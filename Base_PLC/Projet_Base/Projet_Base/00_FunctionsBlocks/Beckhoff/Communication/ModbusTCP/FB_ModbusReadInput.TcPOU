<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_ModbusReadInput" Id="{ee51b302-2909-4b5a-b095-572c48e6e40c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ModbusReadInput
////////////////// 
// Read Modbus TCP/IP on Rising Edge of Trigger ClockRead. Returns alarm and stop modbus Read after three consecutive Modbus attempts that failed. 
//////////////////

VAR_INPUT
	
	// Modbus ReadRegs FB inputs
	pDestAddr 	: POINTER TO BYTE ; // Pointer to variable in which the read data have to be stored
	sIPAddr 	: STRING(15);		// Modbus server device IP adress
	tTimeout 	: TIME;				// Timeout
	nTcpPort 	: UINT;
	nQuantity 	: WORD;				// Quantity of words to be read
	nMBAddr 	: WORD ;			// Starting Register adress
	
	cbLength 	: UDINT;			// Length of variable to host the read data
	nUnitID 	: BYTE;				// Unit ID in case of serial connexion after modbus server. Usually equals to 1
	
	ClockRead	: BOOL; 			// Rising Edge Modbus Trigger
	Reset		: BOOL; 			// Reset Trigger to clean alarm and counter.
	
END_VAR

VAR_OUTPUT
	ErrorId			: UDINT;	// Error Id returned by FB ( see ADS error Code ) . 
	
	Busy			: BOOL ;	// FB busy to proceed command
	ModbusReadAlarm	: BOOL; 	// Alarm if three modbus attempt failed.
	OUT_NbRead		: UDINT;
END_VAR

VAR
	R_TRIG 				: R_TRIG; 			// Rising edge detection for the trigger.
	FB_MBReadInputs 		: FB_MBReadInputs; 	// Multiple registers reading
	
	Step				: INT; 				// Grafcet step
	AlarmCounter		: INT; 				// Alarm Counter. Incremennted if modbus errOR  Alarm if counter =3 , resetable.  

	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// ALARM MANAGEMENT //

	IF AlarmCounter=3 THEN 
		ModbusReadAlarm 	:=TRUE;
		
	ELSE
		ModbusReadAlarm := FALSE;
		ErrorId			:= 0;
		
	END_IF


// MODBUS SEQUENCE //
CASE Step OF 
	0:
		R_TRIG(CLK :=ClockRead);
		
		IF R_TRIG.Q THEN 
			Step :=1;
			Busy := TRUE;
			OUT_NbRead := 0;
		END_IF
	1:
	   FB_MBReadInputs(
	  			sIPAddr:= sIPAddr , 
				nTCPPort:= nTcpPort ,
				nUnitID:= nUnitID,
				nQuantity:= nQuantity,
				nMBAddr:= nMBAddr, 
				cbLength:= cbLength, 
				pDestAddr:= pDestAddr, 
				bExecute:= TRUE,
				tTimeout:= tTimeout,
				cbRead => OUT_NbRead
				);
				
		IF NOT FB_MBReadInputs.bBusy AND NOT FB_MBReadInputs.bError THEN
			FB_MBReadInputs(bExecute:= FALSE);
			AlarmCounter	:=0; // Reset counter after successful modbus read. 
			Step 			:=0;
			Busy := FALSE;
		ELSIF NOT FB_MBReadInputs.bBusy AND FB_MBReadInputs.bError THEN
			FB_MBReadInputs(bExecute:= FALSE);
			AlarmCounter 	:= MIN(AlarmCounter+1,3) ; 
			ErrorId			 :=FB_MBReadInputs.nErrId;
			Step 			:=0;
			Busy := FALSE;
		END_IF
		
END_CASE

// RESET //
	IF Reset THEN 
			AlarmCounter 		:= 0 ; 
			ErrorId 			:= 0 ; 
			ModbusReadAlarm 	:=FALSE;
			Reset 				:= FALSE;
			FB_MBReadInputs		(bExecute := FALSE);
	END_IF

// BUSY //
	
		]]></ST>
    </Implementation>
    <LineIds Name="FB_ModbusReadInput">
      <LineId Id="251" Count="0" />
      <LineId Id="253" Count="1" />
      <LineId Id="378" Count="0" />
      <LineId Id="256" Count="2" />
      <LineId Id="379" Count="0" />
      <LineId Id="259" Count="7" />
      <LineId Id="468" Count="0" />
      <LineId Id="267" Count="1" />
      <LineId Id="426" Count="0" />
      <LineId Id="469" Count="0" />
      <LineId Id="269" Count="11" />
      <LineId Id="467" Count="0" />
      <LineId Id="382" Count="0" />
      <LineId Id="281" Count="3" />
      <LineId Id="380" Count="0" />
      <LineId Id="285" Count="4" />
      <LineId Id="381" Count="0" />
      <LineId Id="290" Count="3" />
      <LineId Id="385" Count="0" />
      <LineId Id="294" Count="3" />
      <LineId Id="383" Count="0" />
      <LineId Id="298" Count="0" />
      <LineId Id="511" Count="0" />
      <LineId Id="330" Count="0" />
      <LineId Id="384" Count="0" />
      <LineId Id="331" Count="0" />
      <LineId Id="299" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>