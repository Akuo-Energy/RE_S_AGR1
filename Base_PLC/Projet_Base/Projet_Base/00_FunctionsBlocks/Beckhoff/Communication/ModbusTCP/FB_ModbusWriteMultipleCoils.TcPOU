<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_ModbusWriteMultipleCoils" Id="{65f92e69-c70f-4eb3-9325-d3521889a0a4}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ModbusWriteMultipleCoils
////////////////// 
// Write Modbus TCP/IP on Rising Edge of Trigger WriteCommAND  Returns alarm and stop modbus Read after three consecutive Modbus attempts that failed.
// Write two registers 
//////////////////
VAR_INPUT
	// Modbus ReadRegs FB inputs

	pSrcAddr			: POINTER TO BYTE ;
	sIPAddr 			: STRING(15);
	tTimeout 			: TIME;
	nTCPport			: UINT:= 502;		// TCP Port
	nMBAddr 			: WORD ;
	cbLength 			: UDINT ;
	nQuantity			: BYTE ;
	nUnitID 			: BYTE;
	WriteCmd 			: BOOL; 					// Rising Edge Trigger for sending modbus request
	
	Reset				: BOOL; 					// Reset Trigger to clean alarm and counter	
	
END_VAR


VAR_OUTPUT
	ErrorId				: UDINT; 			// Erreur ID returned by FB modbus. Updated every time on error occurs. 
	
	Completed			: BOOL ;			// Modbus Writing is completed 
	Busy				: BOOL ; 			// FB busy to proceed command
	ModbusWriteAlarm	: BOOL; 			// Alarm if three modbus attempt failed.
	
END_VAR
VAR
	R_TRIG 				: R_TRIG; 				// Rising edge detection for the trigger.
	FB_MBWriteCoils		: FB_MBWriteCoils; 		// Multiple registers reading
	
	Step				: INT; 					// Grafcet step
	AlarmCounter		: INT; 					// Alarm Counter. Incremennted if modbus errOR  Alarm if counter =3 , resetable.  
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[Completed 				:= FALSE ;

// ALARM MANAGEMENT //
IF AlarmCounter=3 THEN
	ModbusWriteAlarm 	:=TRUE;
	
ELSE
	ModbusWriteAlarm 	:= FALSE;
	ErrorId				:= 0;
	
END_IF
	
// MODBUS SEQUENCE //
	CASE Step OF 
		0:
			R_TRIG(CLK :=WriteCmd);
			IF R_TRIG.Q THEN 
				Step :=1;
			END_IF
			
		1:
		   FB_MBWriteCoils(
					sIPAddr:= sIPAddr , 
					nTCPPort:= nTCPport ,
					nUnitID:= nUnitID,
					nQuantity:= nQuantity,
					nMBAddr:= nMBAddr, 
					cbLength:= cbLength, 
					pSrcAddr:= pSrcAddr, 
					bExecute:= TRUE,
					tTimeout:= tTimeout
					);
					
			IF NOT FB_MBWriteCoils.bBusy AND NOT FB_MBWriteCoils.bError THEN
				FB_MBWriteCoils(bExecute:= FALSE);
				AlarmCounter		:=0; // Reset counter after successful modbus read. 
				Step 				:=0;
				Completed 			:= TRUE ;
				
			ELSIF NOT FB_MBWriteCoils.bBusy AND FB_MBWriteCoils.bError THEN
				FB_MBWriteCoils(bExecute:= FALSE);
				AlarmCounter 		:=MIN(AlarmCounter+1,3) ; 
				ErrorId			 	:=FB_MBWriteCoils.nErrId;
				Step 				:=0;
				
			END_IF
			
	END_CASE

// RESET //	
	IF Reset THEN 
			AlarmCounter 	:= 0 ; 
			ErrorId 		:= 0 ; 
	END_IF	
	
// BUSY //
	Busy 					:= FB_MBWriteCoils.bBusy ;]]></ST>
    </Implementation>
    <LineIds Name="FB_ModbusWriteMultipleCoils">
      <LineId Id="289" Count="18" />
      <LineId Id="156" Count="11" />
      <LineId Id="308" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="309" Count="22" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>