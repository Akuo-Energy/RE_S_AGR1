<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_ESS_BARD" Id="{b055575f-b087-40b3-b3a7-09e418c85c88}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ESS_BARD EXTENDS FB_ESS_Base
//////////////////
// AMSv1 standard product  
//////////////////
VAR CONSTANT
	// Characteristics of the object (Same for all instances)
	
	
END_VAR

VAR_INPUT PERSISTENT
	// Parameters of the Object (instance specific) 
	ParamTimeBetweenPcsConnect		: TIME := T#2S;		(* (s) Tempo between sending order to second Pcs*)
	
	ParamPSoCEqualize				: REAL := 50;		(* (kW) Additionnal power to equilibrate SoC internally of ESS . *)

	ParamDeviationWarning			: REAL := 30.0;		(* (%) Pourcentage of deviation between Battery temperature sensor before a warning is raised*)

	ParamTransfoWarningProdLimit	: REAL := 0.4 ; 	(* (p.u) Limit production if Transfo warning. *)
	ParamDelayOpenDCBbms			: TIME := T#3S;		(* (s) Delay after inverters opened their DC contactor, to open the battery DC contactor*)
	
	{attribute 'OPC.UA.DA' := '1'} 
	ParamPmax						: REAL := 2500   ; 	(* (kW) MAximum Power value for the whole ESS ( limited by transformer and protection ) *)


	
	// HVAC //
	ParamTemperatureSetpoint		: REAL := 22.0;	(* HVAC initial setpoint temperature . *)
	ParamUPSDischargeMaxTime		: TIME := T#30M ; (* Disconnect BESS if UPS is being discharged for too long. 	*)

	
END_VAR


VAR_INPUT
	MesDataExd						: ESS_BARD;
	//Child objects
	AX_PCS 							: ARRAY[1..CstNbPcs_ESS_G] OF FB_PCS_Sma_SCS3450UP;
	AX_Bat							: ARRAY[1..CstNbBAT_Ess_G] OF FB_BAT_KP_MK1;
	AX_HVAC							: ARRAY[1..CstNbHvac_ESS_G] OF FB_HVAC_MeAcMbs1;
	AX_TempSensor					: ARRAY[1..CstNbTempSensor_ESS_G] OF FB_ANA_IO;
	AX_HygroSensor					: ARRAY[1..CstNbTempSensor_ESS_G] OF FB_ANA_IO;
	A1_DS_Bat1						: FB_TOR_DS;
	A1_DS_Bat2						: FB_TOR_DS;
	A1_Spd							: FB_TOR_Spd;
	A1_FSS							: FB_FSS ; 
	A1_MainLVCB						: FB_TOR_CB;
	A1_ES							: FB_TOR_Es;													// Emergency Stop Synthesis
	A1_EM							: FB_EM_Pulse;
	A1_SD_Bat1						: FB_TOR_SD ; 
	A1_SD_Bat2						: FB_TOR_SD ; 
	A1_UPS_24V						: FB_UPS_ENERIS ; 							// Synthese des UPS 24V pour alimentation du PLC et des RBMS 
	A1_CB_ChainFanBank_16_22		: FB_TOR_CB ; 								// Synthese d'Etat des alimentation 24 V des fan des racks 16 à 22 pour les BBMS1 et BBMS 2 
	A1_CB_ChainFanBank1_1_15		: FB_TOR_CB ; 								// Synthese d' Etat des alimentation 24 V des fan des racks 1 à  15 pour les BBMS1
	A1_CB_ChainFanBank2_1_15		: FB_TOR_CB ; 								// Synthese d'Etat des alimentation 24 V des fan des racks 1 à  15 pour les BBMS2
	A1_CB_ChainFuseRack_Bat1		: FB_TOR_CB ;								//  des états des fusibles DC de chaque racks de la batterie 1
	A1_CB_ChainFuseRack_Bat2		: FB_TOR_CB ;								// Synthese des états des fusibles DC de chaque racks de la batterie 2
	A1_CB_RackCtrl24V				: FB_TOR_CB; 												// Etat des alimentations 24 V pour les controleur de racks ( secourus )
	A1_CB_PLC24V					: FB_TOR_CB ;												//alimentation 24 V pour les équipements PLC + relais Sécruité secourus .
	A1_CB_BBMS1						: FB_CB_Switch ;										 // DC Switch for BBMS1 
	A1_CB_BBMS2						: FB_CB_Switch ;										 // DC Switch for BBMS2	

	IN_MesCouplerState_IO			: UINT ; 				// Coupler State IO
	
	IN_CmdStandby					: BOOL;
	IN_CmdReset						: BOOL; 
		(*
	//A1_Transfo						: FB_Transfo_MV;
	//A1_Temp_Transfo					: FB_ANA_IO;

	*)
	
	ModbusRTU			: FB_ModbusRTU() ; 
	
	
END_VAR

VAR_OUTPUT
		                    	
		OUT_EmergencyStop_IO		AT %Q*	: BOOL;
		OUT_CmdBuzzer_IO		AT %Q*	: BOOL;
END_VAR


VAR
	// M_AlarmManagement
		R_TRIG_Event					: ARRAY[1..15] OF R_TRIG ;  
		MesComErrorEthercat	 			: BOOL;						//(NA) Communication Error with Ethercat coupler 
		TOF_Ethercat					: TOF ;
		AX_TapVariable 					: ARRAY[1..10] OF  FB_TapVariable ; // Reset management 
	
		BMS1_bReducePower				: BOOL;
		BMS1_bStopOperation				: BOOL;
		BMS2_bReducePower				: BOOL;
		BMS2_bCheckRackWhenAvailable	: BOOL;
		BMS2_bStopOperation				: BOOL;	
		BMS1_bPreventStart				: BOOL;
		BMS2_bPreventStart				: BOOL;
		
		TON_TempAlarm					: TON;
		TON_HygroAlarm					: TON;		
		TON_UPS							: TON ; 
		
		
		AX_AlarmWords					: ARRAY[1..60] OF ST_ValuesAlarms;
		AX_AlarmWords_Null				: ARRAY[1..60] OF ST_ValuesAlarms;
		NumAlarmsActive					: UINT;
		
		
		
	// M_EVALUATE VARIABLES//        
    	

		DataSystemBMS					: ARRAY[1..CstNbBAT_Ess_G] OF BAT_KP;
	
		DataPcs							: ARRAY[1..CstNbPcs_ESS_G] OF PCS;
		TON_CalConnected_PCS1				: TON;		// Tempo 5s to delay integration of PCS in PID regulation
		TON_CalConnected_PCS2			: TON;		// Tempo to delay integration of PCS in PID regulation
        MesSbat_ChargeConnected_PCS2	: REAL;
		MesSBATDischargeConnected_PCS1	: REAL;
		MesSbat_ChargeConnected_PCS1		: REAL;
		MesSBATDischargeConnected_PCS2	: REAL;              	
	// M_WRITESETPOINTS VARIABLES//  	
	    bEquilibrationOnGoing			: BOOL;      
		FB_Ramp_ExitFreq_PCS1			: FB_RAMP ;
		FB_Ramp_ExitFreq_PCS2			: FB_RAMP ;
		MesPRampTarget_PCS1				: REAL;	// Value to be reached at the end of the ramp . 	
		MesPRampTarget_PCS2				: REAL;	// Value to be reached at the end of the ramp .
	//GET/SET PROPERTY MANAGEMENT// 	
	                           	
	// M_INIT VARIABLES // 	        	
	
	// M_STARTSTOP //
		BMS1_TP_TimeToSoftStopBeforeOpenAC	: TP; 
		BMS2_TP_TimeToSoftStopBeforeOpenAC	: TP; 
		TP_TimeBetweenPcsConnect			: TP; 
		TP_BuzzerMaxTime					: TP;
		TP_Reset							: TP;
		
		F_Tap_SoftStopBMS1					: FB_TapVariable ; 
		F_Tap_SoftStopBMS2					: FB_TapVariable ; 		
		F_Tap_StopBMS1						: FB_TapVariable ; 
		F_Tap_StopBMS2						: FB_TapVariable ; 	
		F_Tap_StartBMS1						: FB_TapVariable ; 
		F_Tap_StartBMS2						: FB_TapVariable ; 			
		
		BMS1_Trig_SoftStop					: R_TRIG;		// Trig to soft stop 
		BMS2_Trig_SoftStop					: R_TRIG;		// Trig to soft stop 
		BMS1_Trig_StopOperation				: R_TRIG;		// Trig to stop operation on BAT fault
		BMS2_Trig_StopOperation				: R_TRIG;		// Trig to stop operation on BAT fault
		BMS1_Trig_Stop						: R_TRIG;		// Trig to stop 
		BMS2_Trig_Stop						: R_TRIG;		// Trig to stop 
		BMS1_Trig_Start						: R_TRIG;		// Trig to stop 
		BMS2_Trig_Start						: R_TRIG;		// Trig to stop 
		
		BMS1_FTrig_SoftStop					: F_TRIG;		// Falling Trig to soft stop 
		BMS2_FTrig_SoftStop					: F_TRIG;		// Falling Trig to soft stop 
		BMS1_FTrig_StopOperation			: F_TRIG;		// Falling Trig to stop operation on BAT fault
		BMS2_FTrig_StopOperation			: F_TRIG;		// Falling Trig to stop operation on BAT fault
		BMS1_FTrig_Stop						: F_TRIG;		// Falling Trig to stop 
		BMS2_FTrig_Stop						: F_TRIG;		// Falling Trig to stop 
		BMS1_FTrig_Start					: R_TRIG;		// Trig to stop 
		BMS2_FTrig_Start					: R_TRIG;		// Trig to stop 
	
	                     
		TRIG_CmdToOpenDc_Sbms1				: R_TRIG;
		TRIG_CmdToOpenDc_Sbms2				: R_TRIG;
		TON_DC_PCS1							: TON;
		TON_DC_PCS2							: TON;
		TRIG_DC_PCS1						: R_TRIG;
		TRIG_DC_PCS2						: R_TRIG;
		
		TON_BeforeOpenDC_Sbms1				: TON;
		TON_BeforeOpenDC_Sbms2				: TON;
		TRIG_TP_Sbms1						: R_TRIG;
		TRIG_TP_Sbms2						: R_TRIG;

		
		TRIG_CmdStandby						: R_TRIG;
		TP_CmdStandby						: TP;			// Pour laisser le temps au pcs de recevoir une commande de zero avant de se deconnecter 
		TP_CmdStandby2						: TP;			// Pour laisser le temps au pcs de recevoir une commande de zero avant de se deconnecter 


		TRIG_CmdConnect						: R_TRIG;
		TRIG_CmdStart			            : R_TRIG;
		TRIG_CmdStop	              	  	: R_TRIG;
		TRIG_CmdReset			            : R_TRIG;

		TRIG_LOCBESS1						: R_TRIG;
		TRIG_LOCBESS2						: R_TRIG;


		
		FTrigTpBtwnPcs						: F_TRIG;

		//HVAC 
		R_TRIGChangePriority				: R_TRIG;


END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="M_AlarmManagement" Id="{746f084a-8cbe-4c89-bb9d-859ac65e8d78}">
      <Declaration><![CDATA[METHOD M_AlarmManagement
//////////////////
// Generates object alarms and manages resets. 
//////////////////

VAR 
	// Method local variables (reinitialized at each cycle) 
	FB_AlarmCodeManager			: FB_AlarmCodeManager ;


	System1StopOperation			: WORD;
	System2StopOperation			: WORD;
	System1CheckrackWhenAvailable	: WORD;
	System2CheckrackWhenAvailable	: WORD;	
	System1PreventStart				: WORD;
	System2PreventStart				: WORD;		
	
	bDeviationTempAlarm				: BOOL;
	bDeviationHygroAlarm			: BOOL;
	TempMax							: REAL;
	TempMin							: REAL;
	HygroMax						: REAL;
	HygroMin						: REAL;

	MesAlarmTempBat					: UINT;
	KK								: UINT;
	MesAlarmHygroBat				: UINT ;
                            		
	MesAlarmSynthesis				: BOOL;
	MesWarningSynthesis				: BOOL;
	CalSoCHigh: BOOL;
	CalSoCLow: BOOL;
	
	
	GG: INT ; 
	LL: INT;
	ID_Journal: INT;
	WordTest: WORD;
	
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_EquipmentCalls" Id="{eb706760-aee2-4353-be75-1d4cb4972e53}">
      <Declaration><![CDATA[METHOD M_EquipmentCalls
//////////////////
// Evaluate AMS characteristics
//////////////////

VAR
	// Method local variables (reinitialized at each cycle) 


	KK: UINT;
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ModbusRTU() ; 

FOR KK := 1 TO CstNbHvac_ESS_G DO
	AX_HVAC[KK].M_Execute();
END_FOR

FOR KK := 1 TO CstNbBAT_Ess_G DO 
	AX_Bat[KK].M_Execute();
END_FOR

FOR KK := 1 TO CstNbPcs_ESS_G DO 
	
	AX_PCS[KK].IN_SetptCCLBat1 := AX_Bat[1].MesDataExd.MesData.MesCCL;
	AX_PCS[KK].IN_SetptCCLBat2 := AX_Bat[2].MesDataExd.MesData.MesCCL;
	AX_PCS[KK].IN_SetptDCLBat1 := AX_Bat[1].MesDataExd.MesData.MesDCL;
	AX_PCS[KK].IN_SetptDCLBat2 := AX_Bat[2].MesDataExd.MesData.MesDCL;

	
	AX_PCS[KK].M_Execute();
END_FOR	

FOR KK := 1 TO 4 DO 
	AX_TempSensor[KK].M_Execute();
	AX_HygroSensor[KK].M_Execute();
END_FOR


A1_DS_Bat1.M_Execute();			
A1_DS_Bat2.M_Execute();			
A1_Spd.M_Execute();				
A1_FSS.M_Execute();
A1_MainLVCB.M_Execute();	
A1_ES.M_Execute();		
A1_EM.M_Execute();	

A1_SD_Bat1.M_Execute() ;
A1_SD_Bat2.M_Execute() ;
A1_UPS_24V.M_Execute() ; 			

A1_CB_ChainFuseRack_Bat1.M_Execute();	
A1_CB_ChainFuseRack_Bat2.M_Execute();
	
A1_CB_ChainFanBank_16_22.M_Execute() ; 
A1_CB_ChainFanBank1_1_15.M_Execute() ; 
A1_CB_ChainFanBank2_1_15.M_Execute() ; 
			
A1_CB_RackCtrl24V.M_Execute(); 			
A1_CB_PLC24V.M_Execute() ; 		

A1_CB_BBMS1.M_Execute() ;
A1_CB_BBMS2.M_Execute() ; ]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Evaluate" Id="{f250aa2f-6386-4731-b8db-8689f724f66f}">
      <Declaration><![CDATA[METHOD M_Evaluate
//////////////////
// Evaluate ESSS characteristics : First retrieve the SystemBMS values then update the PCS parameters
//////////////////

VAR
	// Method local variables (reinitialized at each cycle) 



	KK: INT;
	CalConnected_PCS2: BYTE;
	CalConnected_PCS1: BYTE;
	

	

	CBChoose: BOOL;

	ModbusRTU: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[


// MANAGE LOSS OF MODBUS COMMUNICATION 

// On temporise au démarrage des PCS , pour être sur qu'ils soient prêt à appliquer la consigne pour la régulation PID

TON_CalConnected_PCS1(IN:=NOT AX_PCS[1].MesDataExd.MesData.MesState.0 AND CBChoose AND NOT AX_PCS[1].IN_CmdPcsInLocalMode , PT:=T#5S ) ; 

CalConnected_PCS1 :=  SEL( TON_CalConnected_PCS1.Q, 0,1);


MesDataExd.Mesdata.MesEconnected	:= AX_Bat[1].MesDataExd.MesData.MesEconnected *CalConnected_PCS1  + AX_Bat[2].MesDataExd.MesData.MesEconnected *CalConnected_PCS2 ;
MesDataExd.Mesdata.MesEnomconnected := ( AX_Bat[1].MesDataExd.MesNbRackConnected * AX_Bat[1].ParamEnomRack * AX_Bat[1].MesDataExd.MesData.MesSoH/100*CalConnected_PCS1 +  AX_Bat[2].MesDataExd.MesNbRackConnected * AX_Bat[2].ParamEnomRack* AX_Bat[2].MesDataExd.MesData.MesSoH/100*CalConnected_PCS2);


// Setpoint . Do not consider local setpoint in the calculation
MesDataExd.Mesdata.OUT_SetptP		:= AX_PCS[1].MesDataExd.MesData.OUT_SetptP * SEL(NOT AX_PCS[1].IN_CmdPcsInLocalMode,0,1);
MesDataExd.Mesdata.OUT_SetptQ		:= AX_PCS[1].MesDataExd.MesData.OUT_SetptQ * SEL(NOT AX_PCS[1].IN_CmdPcsInLocalMode,0,1);

MesDataExd.MesData.MesTemp_Bat		:= (MesDataExd.AX_TempSensor[3].MesData.Value + MesDataExd.AX_TempSensor[2].MesData.Value + MesDataExd.AX_TempSensor[4].MesData.Value)/3; 
MesDataExd.MesData.MesHygro_Bat		:= (MesDataExd.AX_HygroSensor[3].MesData.Value + MesDataExd.AX_HygroSensor[2].MesData.Value + MesDataExd.AX_HygroSensor[4].MesData.Value)/3; 


MesDataExd.MesData.MesP			:= DataPcs[1].MesP * SEL(NOT AX_PCS[1].IN_CmdPcsInLocalMode,0,1) ;
MesDataExd.MesData.MesQ			:= DataPcs[1].MesQ * SEL(NOT AX_PCS[1].IN_CmdPcsInLocalMode,0,1) ;
MesDataExd.MesData.MesEActCons		:= A1_EM.MesDataExd.MesData.MesEactCons;
MesDataExd.MesData.MesState		:= MesState;

// SubEquipement properties assignment 
FOR KK := 1 TO 4 DO 
	MesDataExd.AX_HygroSensor[KK] 	:= AX_HygroSensor[KK].MesDataExd;
	MesDataExd.AX_TempSensor[KK]	:= AX_TempSensor[KK].MesDataExd;
END_FOR

FOR KK:= 1 TO CstNbPcs_ESS_G DO 
	MesDataExd.AX_PCS[KK] := AX_PCS[KK].MesDataExd;
END_FOR

FOR KK:= 1 TO CstNbBAT_Ess_G DO 
	MesDataExd.AX_Bat[KK] := 	AX_Bat[KK].MesDataExd;

END_FOR

FOR KK := 1 TO CstNbHvac_ESS_G DO
	MesDataExd.AX_HVAC[KK]		:=  AX_HVAC[KK].MesDataExd; 
END_FOR

MesDataExd.DS_Bat1				 := 	A1_DS_Bat1.MesDataExd; 							
MesDataExd.DS_Bat2				 := 	A1_DS_Bat2.MesDataExd; 					
MesDataExd.Spd					 := 	A1_Spd.MesDataExd; 						
MesDataExd.FSS					 := 	A1_FSS.MesDataExd; 						
MesDataExd.MainLVCB				 :=     A1_MainLVCB.MesDataExd; 					
MesDataExd.ES					 := 	A1_ES.MesDataExd; 						
MesDataExd.EM					 := 	A1_EM.MesDataExd; 						
MesDataExd.SD_Bat1				 := 	A1_SD_Bat1.MesDataExd; 					
MesDataExd.SD_Bat2				 := 	A1_SD_Bat2.MesDataExd; 					
MesDataExd.UPS_24V				 := 	A1_UPS_24V.MesDataExd; 					
MesDataExd.CB_ChainFanBank_16_22 := 	A1_CB_ChainFanBank_16_22.MesDataExd; 	
MesDataExd.CB_ChainFanBank1_1_15 := 	A1_CB_ChainFanBank1_1_15.MesDataExd; 	
MesDataExd.CB_ChainFanBank2_1_15 := 	A1_CB_ChainFanBank2_1_15.MesDataExd; 	
MesDataExd.CB_ChainFuseRack_Bat1 := 	A1_CB_ChainFuseRack_Bat1.MesDataExd; 	
MesDataExd.CB_ChainFuseRack_Bat2 := 	A1_CB_ChainFuseRack_Bat2.MesDataExd; 	
MesDataExd.CB_RackCtrl24V		 := 	A1_CB_RackCtrl24V.MesDataExd; 			
MesDataExd.CB_PLC24V			 := 	A1_CB_PLC24V.MesDataExd; 				
MesDataExd.CB_BBMS1				 :=     A1_CB_BBMS1.MesDataExd; 					
MesDataExd.CB_BBMS2				 :=     A1_CB_BBMS2.MesDataExd; 					]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Init" Id="{da1cd9ed-2f2e-4927-a24c-e0f951c4fce1}">
      <Declaration><![CDATA[METHOD M_Init

VAR
	MesIPAdressCTRLPcs: STRING;
	MesIPAdressCTRLBat: STRING;
	KK: UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR KK := 1 TO CstNbHvac_ESS_G DO
	AX_HVAC[KK].IN_SetptTemp := ParamTemperatureSetpoint;		
	AX_HVAC[KK].ParamUnitID			:= 1 ; 	
	//AX_HVAC[KK].ParamTcpPort		:= 502 ; 
	AX_HVAC[KK].ParamClockWriteTime	:= T#2S ; 
	AX_HVAC[KK].ParamClockReadTime	:= T#1S ; 
	AX_HVAC[KK].ParamTimeOut		:= T#3S ;
	AX_HVAC[KK].ParamPriority 		:= KK;
	
END_FOR


FOR KK := 1 TO CstNbBAT_Ess_G DO 
	AX_Bat[KK].ParamSystemBmsNum 	:= UINT_TO_BYTE(KK) ; 
	AX_Bat[KK].ParamClockReadTime 	:= T#1S ; 
	AX_Bat[KK].ParamClockWriteTime := T#3S ;
	AX_Bat[KK].ParamEnomRack		:= 97.2; 	// kWh .  
	AX_Bat[KK].ParamEssNum 			:= ParamEssNum ; 
	AX_Bat[KK].ParamIpAddress		:= CONCAT(STR1:= '10.0.1.' , STR2:= INT_TO_STRING((ParamEssNum-1)*2+103+(KK-1)))  ; 

	AX_Bat[KK].ParamTempoComAlarm 	:= T#10S ; 
	AX_Bat[KK].ParamTimeout 		:= T#5S ; 
	AX_Bat[KK].ParamTimeOutStart 	:= T#60S ; 
	AX_Bat[KK].ParamTimeOutStop 	:= T#5S ; 
	AX_Bat[KK].ParamTimeWatchdog 	:= T#30S ; 
	AX_Bat[KK].ParamUnitID 		:= 1 ;

END_FOR


FOR KK := 1 TO CstNbPcs_ESS_G DO 
	AX_PCS[KK].ParamClockReadTime 					:= T#200MS ; 
	AX_PCS[KK].ParamClockWriteTime 					:= T#200MS ; 
	AX_PCS[KK].ParamTimeout							:= T#4S;
	AX_PCS[KK].ParamPoverQ							:= TRUE;
	AX_PCS[KK].ParamPcsNum 							:= KK;
	AX_PCS[KK].ParamEssNum 							:= ParamEssNum ; 
	AX_PCS[KK].IN_CmdPcsInLocalMode 					:= FALSE  ; 
	AX_PCS[KK].ParamTcpPort 						:= 502; 
	AX_PCS[KK].ParamTempoComAlarm 					:= T#10S ; 
	AX_PCS[KK].ParamTempoComWarning 				:= T#5S ; 
	AX_PCS[KK].ParamTimeout 						:= T#5S ; 
	AX_PCS[KK].ParamUnitID 							:= 1 ;
	AX_PCS[KK].ParamIPAddress 						:= CONCAT(STR1:= '10.0.1.' , STR2:= INT_TO_STRING(ParamEssNum+100))  ; 
	AX_PCS[KK].ParamPn								:=1400; //apparement faudra changer la limite sur le pcs
	AX_PCS[KK].ParamQn								:=2445;
	AX_PCS[KK].ParamSmax							:=1940;
	

	
END_FOR	


A1_DS_Bat1.ParamNbSensors 			:= 1;
A1_DS_Bat1.ParamAtleastOne			:= TRUE ; 
A1_DS_Bat1.ParamCableCutSecurity 	:= FALSE  ; 
A1_DS_Bat1.ParamTempoDoorAlarm 		:= T#15S ; 

A1_DS_Bat2.ParamNbSensors 			:= 1;
A1_DS_Bat2.ParamAtleastOne			:= TRUE ; 
A1_DS_Bat2.ParamCableCutSecurity 	:= FALSE  ; 
A1_DS_Bat2.ParamTempoDoorAlarm 		:= T#15S ; 



A1_EM.ParamStepEactCons 		:= 10 	;
A1_EM.ParamStepEactProd 		:= 10 ; 
A1_EM.ParamStepEreactCons 	:= 10 ; 
A1_EM.ParamStepEreactProd 	:= 10 ;
A1_EM.ParamEssNum				:= ParamEssNum ; 

A1_Spd.ParamNbSensors 				:= 1;
A1_Spd.ParamAtleastOne 				:= TRUE ; 
A1_Spd.ParamCableCutSecurity 		:= FALSE ; 
A1_Spd.ParamTempoEs					:= T#5S ; 		

A1_MainLVCB.ParamCableCutSecurity		:= TRUE;
A1_MainLVCB.ParamNbSensors			:= 1;
A1_MainLVCB.ParamAtleastOne 			:= TRUE ; 

A1_ES.ParamNbSensors 				:= 1;
A1_ES.ParamCableCutSecurity 		:= FALSE;
A1_ES.ParamAtleastOne 				:= TRUE ; 
A1_ES.ParamTempoEs 					:= T#2S;

				
FOR KK := 1 TO 4 DO 
	AX_TempSensor[KK].ParamRangeMax 	:= 50.0;
	AX_TempSensor[KK].ParamRangeMin 	:= 0.0;
	AX_TempSensor[KK].ParamDiffMax 		:= 2 ; 
	AX_TempSensor[KK].ParamFix 			:= 0 ;
	AX_TempSensor[KK].ParamForced_4_20 	:= FALSE  ; 
	AX_TempSensor[KK].ParamNbSensors 	:=  1 ; 
	AX_TempSensor[KK].ParamPT100 		:= FALSE ; 
	AX_TempSensor[KK].ParamVarMaxAlarm 	:= 32 ; 
	AX_TempSensor[KK].ParamVarMaxWarning:= 28 ;
	AX_TempSensor[KK].ParamVarMinAlarm 	:= 17 ; 
	AX_TempSensor[KK].ParamVarMinWarning:= 21 ;  
	
	AX_HygroSensor[KK].ParamRangeMax 		:= 100.0;
	AX_HygroSensor[KK].ParamRangeMin 		:= 0.0;
	AX_HygroSensor[KK].ParamDiffMax 		:= 2 ; 
	AX_HygroSensor[KK].ParamFix 			:= 0 ;
	AX_HygroSensor[KK].ParamForced_4_20 	:= FALSE  ; 
	AX_HygroSensor[KK].ParamNbSensors 		:=  1 ; 
	AX_HygroSensor[KK].ParamPT100 			:= FALSE ; 
	AX_HygroSensor[KK].ParamVarMaxAlarm 	:= 102 ; 
	AX_HygroSensor[KK].ParamVarMaxWarning 	:= 95 ;
	AX_HygroSensor[KK].ParamVarMinAlarm 	:= -10 ; 
	AX_HygroSensor[KK].ParamVarMinWarning 	:= -10 ; 
	
	
END_FOR


	AX_TempSensor[1].ParamName :=  'PCS Temp Sensor ' ; 
	AX_TempSensor[2].ParamName :=  'BAT 1 Temp Sensor ' ; 
	AX_TempSensor[3].ParamName :=  'BAT 2 Temp Sensor ' ; 
	AX_TempSensor[4].ParamName :=  'BAT 3 Temp Sensor ' ; 	
	
	AX_TempSensor[1].ParamVarMaxAlarm 		:= 50 ; 
	AX_TempSensor[1].ParamVarMaxWarning 	:= 45 ;
	AX_TempSensor[1].ParamVarMinAlarm 		:= 5 ; 
	AX_TempSensor[1].ParamVarMinWarning 	:= 10 ;  


// SD 
	
A1_UPS_24V.ParamClockReadTime 	:= T#1S ; 
A1_UPS_24V.ParamNC 				:= FALSE ; 
A1_UPS_24V.ParamTempoComAlarm 	:= T#2S ;
A1_UPS_24V.ParamTempoComWarning := T#1S ; 
A1_UPS_24V.ParamTimeOut 		:= T#2S  ; 			

A1_FSS.ParamCableCutSecurity 	:= FALSE ; 
A1_FSS.ParamTempoFire 			:= T#5S ; 
A1_FSS.ParamWatchdogEnable 		:= FALSE ; 


A1_CB_ChainFuseRack_Bat1.ParamAtleastOne 		:= TRUE ; 
A1_CB_ChainFuseRack_Bat1.ParamCableCutSecurity 	:= FALSE  ; 	
A1_CB_ChainFuseRack_Bat1.ParamNbSensors 			:= 1  ;

A1_CB_ChainFuseRack_Bat2.ParamAtleastOne 		:= TRUE ; 
A1_CB_ChainFuseRack_Bat2.ParamCableCutSecurity 	:= FALSE  ; 	
A1_CB_ChainFuseRack_Bat2.ParamNbSensors 			:= 1  ;

A1_CB_ChainFanBank_16_22.ParamAtleastOne 			:= TRUE ; 
A1_CB_ChainFanBank_16_22.ParamCableCutSecurity 	:= TRUE  ; 	
A1_CB_ChainFanBank_16_22.ParamNbSensors 			:= 1  ;

A1_CB_ChainFanBank1_1_15.ParamAtleastOne 			:= TRUE ; 
A1_CB_ChainFanBank1_1_15.ParamCableCutSecurity 	:= TRUE  ; 	
A1_CB_ChainFanBank1_1_15.ParamNbSensors 			:= 1  ;

A1_CB_ChainFanBank2_1_15.ParamAtleastOne 			:= TRUE ; 
A1_CB_ChainFanBank2_1_15.ParamCableCutSecurity 	:= TRUE  ; 	
A1_CB_ChainFanBank2_1_15.ParamNbSensors 			:= 1  ;


A1_CB_RackCtrl24V.ParamAtleastOne	 		:= TRUE ; 
A1_CB_RackCtrl24V.ParamCableCutSecurity 	:= TRUE  ; 	
A1_CB_RackCtrl24V.ParamNbSensors 			:= 1  ;

A1_CB_PLC24V.ParamAtleastOne 				:= TRUE ; 
A1_CB_PLC24V.ParamCableCutSecurity 			:= TRUE  ; 	
A1_CB_PLC24V.ParamNbSensors 				:= 1  ;


A1_CB_BBMS1.ParamClosedInput_Connected := TRUE ; 
A1_CB_BBMS1.ParamNC := TRUE ; 

A1_CB_BBMS2.ParamClosedInput_Connected := TRUE ; 
A1_CB_BBMS2.ParamNC := TRUE ; 

]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_StartStop" Id="{a072f0ad-e2b5-4f1d-92fd-ef3cd7e9acf6}">
      <Declaration><![CDATA[METHOD M_StartStop
//////////////////
// Start and Stop Management of the AMS (battery and PCS) .
//////////////////
VAR
	// Method local variables (reinitialized at each cycle) 
	KK	: INT;

	TimeHvacPrio1			: TIME;
	TimeHvacPrio2			: TIME;
	NumPrio1 				: INT;
	NumPrio2				: INT;
	



END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Stop PCS DataFlow if ( BAT internal Fault ReqInvstate=2)  , BAT heartbit com fault > 3s ) 


// Emergency stop 

//OUT_CmdEmergencyStop := A1_Transfo.MesDataExd.MesData.MesAlarmCode.0 (*OR DataPcs[1].OUT_CmdStop OR DataPcs[2].OUT_CmdStop*);  // DMCR OR AU 



TRIG_CmdStandby 	(CLK :=IN_CmdStandby 	); // Go to standby if LOC BBMS AND PCS 
TRIG_CmdStart 		(CLK :=IN_CmdStart	AND NOT (BMS1_bStopOperation OR BMS2_bStopOperation)	);
TRIG_CmdStop		(CLK :=IN_CmdStop	);
TRIG_CmdReset		(CLK :=IN_CmdReset_IO OR IN_CmdReset);

// Trigs to open and close the DC
// si le DC breaker est ouvert ou qu'il y a une alarm UPS

(*TON_DC_PCS1(IN := NOT AX_PCS[1].MesDataExd.MesData.MesState_CBdc, PT := ParamDelayOpenDCBbms );


TRIG_DC_PCS1(CLK := TON_DC_PCS1.Q);	

TRIG_TP_Sbms1(CLK := TRIG_DC_PCS1.Q ); //   OR A1_UPS.MesDataExd.MesData.MesAlarmCode >0); UPS deja dans le stop operation . 
*)

TRIG_LOCBESS1(CLK := AX_Bat[1].MesDataExd.MesData.MesAlarmCom (*AND AX_PCS[1].MesDataExd.MesData.MesAlarmCom*) );	// Alarm PCS + BBMS . 
TRIG_LOCBESS2(CLK := AX_Bat[2].MesDataExd.MesData.MesAlarmCom (*AND AX_PCS[2].MesDataExd.MesData.MesAlarmCom*) ); 


IF TRIG_CmdStart.Q THEN
	IN_CmdStart := FALSE;
END_IF
IF TRIG_CmdStop.Q THEN
	IN_CmdStop := FALSE;
END_IF



IF TRIG_CmdReset.Q THEN
	IN_CmdReset_IO := FALSE;
	IN_CmdReset := FALSE;
	AX_PCS[1].IN_CmdReset := TRUE;
	AX_Bat[1].IN_CmdReset :=  NOT AX_PCS[1].MesDataExd.MesData.MesState>1 ;		// Do not reset bat while PCS is not stopped . !!! 
	AX_Bat[2].IN_CmdReset := NOT AX_PCS[1].MesDataExd.MesData.MesState>1;
END_IF



IF TRIG_TP_Sbms1.Q THEN
	AX_Bat[1].IN_CmdOpenDC := TRUE;
END_IF
IF TRIG_TP_Sbms2.Q THEN
	AX_Bat[2].IN_CmdOpenDC := TRUE;
END_IF



// STOP OPERATING
	// STOP OPERATING TRIGGER :
		BMS1_Trig_StopOperation(CLK := BMS1_bStopOperation);
		BMS2_Trig_StopOperation(CLK := BMS2_bStopOperation);
	
// SOFT STOP
	// SOFT STOP TRIGGER : IF STOP OPERATION ALARM (FOR 5s to avoid opening DC switch on load OR Standby order   
		// First send 0 setpoint to the PCS then send standby order. 
//	TP_CmdStandby(IN:= TRIG_CmdStandby.Q OR TRIG_LOCBESS1.Q , PT:= PAramTempoStandby ) ; 
//	TP_CmdStandby2(IN:= TRIG_CmdStandby.Q OR TRIG_LOCBESS2.Q, PT:= PAramTempoStandby ) ; 
	
	IF TRIG_CmdStandby.Q THEN
		IN_CmdStandby := FALSE;
	END_IF
	
		BMS1_Trig_SoftStop(CLK := TRIG_CmdStandby.Q OR TRIG_LOCBESS1.Q OR TRIG_LOCBESS2.Q);//TP_CmdStandby.Q);

	// CMD SOFT STOP
//	F_Tap_SoftStopBMS1(TapTrigger := BMS1_Trig_SoftStop.Q , TapOut:= AX_PCS[1].IN_CmdStandby) ; 
//	F_Tap_SoftStopBMS2(TapTrigger := BMS2_Trig_SoftStop.Q , TapOut:= AX_PCS[2].IN_CmdStandby) ; 	
	
	
	
	
	
	(*IF BMS1_Trig_SoftStop.Q THEN
		AX_PCS[1].IN_CmdStandby := BMS1_Trig_SoftStop.Q;
	END_IF
	IF BMS1_Trig_SoftStop.Q THEN
		AX_PCS[2].IN_CmdStandby := BMS2_Trig_SoftStop.Q;
	END_IF
*)
	
	// CMD STOP 
		//                     
		BMS1_Trig_Stop(CLK :=  TRIG_CmdStop.Q OR BMS1_Trig_StopOperation.Q OR BMS2_Trig_StopOperation.Q);
		BMS2_Trig_Stop(CLK :=  TRIG_CmdStop.Q );

	F_Tap_StopBMS1(TapTrigger := BMS1_Trig_Stop.Q , TapOut:= AX_PCS[1].IN_CmdStop) ; 
			
		
		
		

// START
	TP_TimeBetweenPcsConnect(IN := TRIG_CmdStart.Q, PT := ParamTimeBetweenPcsConnect);
	
	FTrigTpBtwnPcs(CLK := TP_TimeBetweenPcsConnect.Q);
	
	AX_PCS[1].IN_CmdStart := TRIG_CmdStart.Q AND NOT BMS1_bPreventStart AND NOT AX_PCS[1].IN_CmdPcsInLocalMode  ;
	
	//OUT_CmdStartPcs1_IO := DataPcs[1].OUT_CmdStart;
	
// SHUTDOWN

	
SUPER^.M_StartStop() ; ]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_StateManager" Id="{b10f3d3b-272e-4000-a437-affac614c7e8}">
      <Declaration><![CDATA[METHOD M_StateManager
//////////////////
// Manages AMS state . 
//////////////////
VAR 
	// Method local variables (reinitialized at each cycle) 
	
	CTRLBatState1: BYTE;
	CTRLBatState2: BYTE;
	CTRLPcsState1: BYTE;
	CTRLPcsState2: BYTE;

	bCalAllAcContactorsOpen_System1		: BOOL;
	bCalAllAcContactorsClose_System1	: BOOL;
	
	bDcBreakerOpen_System1				: BOOL;	
	bDcBreakerOpen_System2				: BOOL;	
	
	bAcBreakerOpen_System1				: BOOL;
	bAcBreakerOpen_System2				: BOOL;
	
	bCalNoRackConnected_System1			: BOOL;
	bCalNoRackConnected_System2			: BOOL;

	
	bCalAllAcContactorsOpen_System2		: BOOL;
	bCalAllAContactorsOpen_System2		: BOOL;	
	
	bCalAtLeastOnPcsConnected_System1: BOOL;
	bCalAtLeastOnPcsConnected_System2: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[

// OFF : Il y a, pour les deux systèmes : soit le ac breaker ouvert, soit le dc breaker ouvert, soit les racks sont tous ouverts) 				
MesState.0 := (bAcBreakerOpen_System1 OR bDcBreakerOpen_System1 OR bCalNoRackConnected_System1) AND (bAcBreakerOpen_System2 OR bDcBreakerOpen_System2 OR bCalNoRackConnected_System2);

// AVAILABLE : AC et DC sont fermés sur un système, mais tous les ac contacteurs sont ouverts
MesState.1 := ((NOT bAcBreakerOpen_System1 AND NOT bDcBreakerOpen_System1) OR ( NOT bAcBreakerOpen_System2 AND NOT bDcBreakerOpen_System2)) AND ( bCalAllAcContactorsOpen_System1 AND bCalAllAcContactorsOpen_System2 );

// CONNECTED : tous les contacteurs DC sont fermés et tous les AC CB sont fermés sur au moins un systeme et les contacteurs sont fermés sur au moins un système
MesState.2 := (NOT bAcBreakerOpen_System1 AND NOT bDcBreakerOpen_System1 AND bCalAtLeastOnPcsConnected_System1) OR (NOT bAcBreakerOpen_System2 AND NOT bDcBreakerOpen_System2 AND bCalAtLeastOnPcsConnected_System2);


SUPER^.M_StateManager() ; ]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_WriteSetpoints" Id="{364c671a-1290-48a4-b36e-516ec480c464}">
      <Declaration><![CDATA[METHOD M_WriteSetpoints
//////////////////
// Write P and Q setpoints to PCS controller when AMS in (P,Q) Mode . 
//////////////////
VAR
	// Method local variables (reinitialized at each cycle) 


END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_ESS_BARD">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ESS_BARD.M_AlarmManagement">
      <LineId Id="4462" Count="0" />
    </LineIds>
    <LineIds Name="FB_ESS_BARD.M_EquipmentCalls">
      <LineId Id="498" Count="1" />
      <LineId Id="423" Count="13" />
      <LineId Id="465" Count="0" />
      <LineId Id="437" Count="10" />
      <LineId Id="478" Count="0" />
      <LineId Id="448" Count="4" />
      <LineId Id="484" Count="1" />
      <LineId Id="483" Count="0" />
      <LineId Id="453" Count="0" />
      <LineId Id="455" Count="1" />
      <LineId Id="480" Count="0" />
      <LineId Id="479" Count="0" />
      <LineId Id="457" Count="1" />
      <LineId Id="481" Count="0" />
      <LineId Id="459" Count="3" />
      <LineId Id="407" Count="0" />
      <LineId Id="482" Count="0" />
    </LineIds>
    <LineIds Name="FB_ESS_BARD.M_Evaluate">
      <LineId Id="866" Count="0" />
      <LineId Id="804" Count="26" />
      <LineId Id="832" Count="12" />
      <LineId Id="847" Count="5" />
      <LineId Id="917" Count="19" />
    </LineIds>
    <LineIds Name="FB_ESS_BARD.M_Init">
      <LineId Id="468" Count="43" />
      <LineId Id="629" Count="2" />
      <LineId Id="512" Count="9" />
      <LineId Id="640" Count="0" />
      <LineId Id="642" Count="2" />
      <LineId Id="641" Count="0" />
      <LineId Id="639" Count="0" />
      <LineId Id="528" Count="22" />
      <LineId Id="552" Count="38" />
      <LineId Id="662" Count="0" />
      <LineId Id="591" Count="0" />
      <LineId Id="663" Count="0" />
      <LineId Id="592" Count="13" />
      <LineId Id="647" Count="0" />
      <LineId Id="650" Count="1" />
      <LineId Id="649" Count="0" />
      <LineId Id="606" Count="3" />
      <LineId Id="652" Count="0" />
      <LineId Id="655" Count="1" />
      <LineId Id="653" Count="0" />
      <LineId Id="658" Count="2" />
      <LineId Id="657" Count="0" />
      <LineId Id="661" Count="0" />
      <LineId Id="612" Count="9" />
      <LineId Id="460" Count="0" />
      <LineId Id="668" Count="2" />
      <LineId Id="665" Count="2" />
    </LineIds>
    <LineIds Name="FB_ESS_BARD.M_StartStop">
      <LineId Id="966" Count="46" />
      <LineId Id="1096" Count="0" />
      <LineId Id="1015" Count="6" />
      <LineId Id="1098" Count="0" />
      <LineId Id="1097" Count="0" />
      <LineId Id="1022" Count="56" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ESS_BARD.M_StateManager">
      <LineId Id="299" Count="11" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ESS_BARD.M_WriteSetpoints">
      <LineId Id="484" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>