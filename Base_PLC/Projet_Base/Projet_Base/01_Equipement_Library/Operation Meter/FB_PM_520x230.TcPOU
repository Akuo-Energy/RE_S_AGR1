<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_PM_520x230" Id="{3aa0e0fc-56e2-42c7-bfcd-47ad60c3d338}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_PM_520x230 EXTENDS FB_PM_Base
//////////////////
// Measurement Solution based on Digiware, but access through PMS Socomec
//////////////////
VAR CONSTANT
	// Characteristics of the object (Same for all instances)
			
END_VAR

VAR_INPUT PERSISTENT
	// Parameters of the Object (instance specific) 
	{attribute 'OPC.UA.DA' := '1'} 
	ParamUnitID					: BYTE := 1 ;									// (NA)unit ID
	ParamInInterfaceSub			: BOOL := TRUE; 								// Serial interface RS422/RS485 TYPE (0:EL6021,1:SUB9)			
END_VAR

VAR_OUTPUT
	//Child objects
	
END_VAR


VAR_INPUT 
			MesDataExd				: PM_Standard;								// (NA) Structure of the PM3250
END_VAR

VAR
	//M_ALARMMANAGEMENT VARIABLES//
	                                                    								
                                                        								

	//M_READ VARIABLES//
		ModbusRTU					: FB_ModbusRTU;								// (NA) FB for Modbus Reading


		ObjectCom					: INT;										// (NA) Sequence index
									
		Busy						: BOOL;
		StepRead					: UINT;										// (NA) Step for reading 2 blocks of registers
		AX_TrigRead					: ARRAY[1..1] OF R_trig;
		MbStruct					: ARRAY[1..1] OF Struct_InputRTU;	
		MesBlock					: ARRAY[1..1] OF ARRAY[1..120] OF WORD;	
		AX_Addr						: ARRAY[1..1] OF UINT 	:= [19000];
		AX_Qty						: ARRAY[1..1] OF UINT	:= [86];
		AX_UnitId					: ARRAY[1..1] OF BYTE	:= [1];
		AX_Function					: ARRAY[1..1] OF UINT	:= [4];	
		AX_Priority					: ARRAY[1..1] OF UINT	:= [1];
		KK							: INT;
		ComError 					: BOOL;
	//M_INIT VARIABLES //
		OutFBCompleteted			: BOOL;
	// M_EXECUTE VARIABLES //
		
                              

 
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="M_AlarmManagement" Id="{628f34d3-ca6c-42c1-9ad5-f3b2d2730a4e}">
      <Declaration><![CDATA[METHOD M_AlarmManagement
//////////////////
// Digiware measurement tool alarm and warning management
/////////////////

VAR 
	// Method local variables (reinitialized at each cycle) 
	FB_AlarmCodeManager			: FB_AlarmCodeManager ; 
	
	KK							: BYTE ;		// For loop
	
	CMWarning					: BOOL;			// At least one Digiware device in Alarm
	CMAlarm						: BOOL;			// At least one Digiware device in Alarm
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//ComError 	:= MbStruct[1].OutError^;
	
TON_ComAlarm(IN:= ComError , PT:= ParamTempoComAlarm, Q=>MesDataExd.MesData.MesAlarmCom) ;	
TON_ComWarning(IN:= ComError  , PT:= ParamTempoComAlarm, Q=>MesWarningCom) ;	

//					General com alarm : All the read FB fucked up


// ALARM CODE //
	FB_AlarmCodeManager(
		bAlarm1			:= MesDataExd.MesData.MesAlarmCom  , 					// Communication Alarm #COM
		bAlarm2			:=FALSE, 		// 
		bAlarm3			:=FALSE, 		// 
		bAlarm4			:=FALSE, 		// 
		bAlarm5			:=FALSE, //
		bAlarm6			:=FALSE, //
		bAlarm7			:=FALSE, //
		bAlarm8			:=FALSE, //
		bAlarm9			:=FALSE, //
		bAlarm10		:=FALSE, //
		bAlarm11		:=FALSE, //
		bAlarm12		:=FALSE, //
		bAlarm13		:=FALSE, //
		bAlarm14		:=FALSE, //
		bAlarm15		:= FALSE , 			// 			 
		wAlarmCode		=>MesDataExd.MesData.MesAlarmCode);

// WARNING CODE //
	FB_AlarmCodeManager(		
		bAlarm1			:=MesWarningCom	,				 // Communication Warning #COM
		bAlarm2			:=FALSE, 		// 
		bAlarm3			:=FALSE, 		// 
		bAlarm4			:=FALSE, 		// 
		bAlarm5			:=FALSE, //
		bAlarm6			:=FALSE, //
		bAlarm7			:=FALSE, //
		bAlarm8			:=FALSE, //
		bAlarm9			:=FALSE, //
		bAlarm10		:=FALSE, //
		bAlarm11		:=FALSE, //
		bAlarm12		:=FALSE, //
		bAlarm13		:=FALSE, //
		bAlarm14		:=FALSE, //
		bAlarm15		:=FALSE, //
		wAlarmCode		=>MesDataExd.MesData.MesWarningCode);		

// EVENT CODE //
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_CP" Id="{0b2cd1ea-33a6-4019-9a91-45c1215fee98}">
      <Declaration><![CDATA[METHOD M_CP
//////////////////
//  Emulator
/////////////////

VAR 
	// Method local variables (reinitialized at each cycle) 
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

SUPER^.M_CP() ; 




Trig_Cmd_Read(CLK:=IN_CmdToggleRead);
Trig_Cmd_Write(CLK:=IN_CmdToggleWrite);
	
IF Trig_Cmd_Read.Q THEN
	IN_CmdToggleRead := FALSE;
	MesDataExd.MesData.MesCP_Read := NOT MesDataExd.MesData.MesCP_Read;
END_IF


IF Trig_Cmd_Write.Q THEN
	IN_CmdToggleWrite := FALSE;
	MesDataExd.MesData.MesCP_Write := NOT MesDataExd.MesData.MesCP_Write;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Evaluate" Id="{3f3926a4-c886-4371-803c-f454ed52c04f}">
      <Declaration><![CDATA[METHOD M_Evaluate : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Execute" Id="{5764c3e6-40a5-4813-ac39-4b0895146822}">
      <Declaration><![CDATA[METHOD M_Execute
//////////////////
//  Method Calls 
/////////////////
VAR 
	// Method local variables (reinitialized at each cycle) 
	// EMULATOR
		Psoltot		: REAL;		// Total Solar Power . 
		KK			: BYTE;		// For Loop
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// READING AND WRITING CLOCK //
	TP1(IN:=NOT TP1.Q , PT:= ParamClockReadTime);
	ClockRead 		:= TP1.Q;

// PERMANENT CONDITIONS //
	MesCP_Read 					:= TRUE  ; 
	
// METHODS CALLS //
	IF bInit THEN
		M_Init() ; 
		bInit					:= FALSE ; 
		
	END_IF

	M_Read() ; 
	
// EMULATOR COM READ  /////////////
	
	
	////////////////////
	M_AlarmManagement(); 
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Init" Id="{3c94468d-13ae-4976-b5ce-f428f954b33b}">
      <Declaration><![CDATA[METHOD M_Init
VAR 

END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Modbus RTU Relay
FOR KK := 1 TO 1 DO 
	MbStruct[KK].InBuffer 		:= ADR(MesBlock[KK]);
	MbStruct[KK].InFunction 	:= AX_Function[KK];
	MbStruct[KK].InQuantity 	:= AX_Qty[KK];
	MbStruct[KK].InStartAddr 	:= AX_Addr[KK];
	MbStruct[KK].InUnitID 		:= AX_UnitId[KK];
	
END_FOR



]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Read" Id="{246208a3-5013-4e7b-8c72-bbe18f072b1c}">
      <Declaration><![CDATA[METHOD M_Read
//////////////////
//  Read Modbus Variable for PCS . 
/////////////////
VAR 
	// Method local variables (reinitialized at each cycle) 
	MW 					: FB_MergeWordsToFloat; 
	KK					: BYTE;  						// FOR Loop 

	
END_VAR



]]></Declaration>
      <Implementation>
        <ST><![CDATA[// CP-Read / Write 

MesDataExd.MesData.MesCP_Read := MesDataExd.MesData.MesCP_Read ; 
 

IF MesDataExd.MesData.MesCP_Read  THEN	

	ModbusRTU();
	
	
	FOR KK := 1 TO 1 DO
		AX_TrigRead[KK](CLK  :=ClockRead) ; // CalLocalTimeStruct.wSecond MOD 5 = 0);
		IF AX_TrigRead[KK].Q THEN
			ModbusRTU.M_AddAction_FIFO(InStruct := MbStruct[KK], InPriority := AX_Priority[KK]);
		END_IF
		MbStruct[KK].OutError			:= ADR(ComError);
	END_FOR  
							
	// PROPERTIES UPDATE // 
		// Block 1
	//MW( WORD_STRONG:= MesBlock_Temp[1][1], 	WORD_WEAK := MesBlock_Temp[1][2],	SIGNED:=TRUE, FIX:=0 , SIZE:=2, VAR_OUT := MesDataExd.MesData.MesI2);
		
	MW( WORD_STRONG:= MesBlock[1][1], 	WORD_WEAK := MesBlock[1][2], 	VAR_OUT:= MesDataExd.MesData.MesV1);
	MW( WORD_STRONG:= MesBlock[1][3], 	WORD_WEAK := MesBlock[1][4], 	VAR_OUT:= MesDataExd.MesData.MesV2);
	MW( WORD_STRONG:= MesBlock[1][5], 	WORD_WEAK := MesBlock[1][6], 	VAR_OUT:= MesDataExd.MesData.MesV3);
	MW( WORD_STRONG:= MesBlock[1][7], 	WORD_WEAK := MesBlock[1][8], 	VAR_OUT:= MesDataExd.MesData.MesU12);
	MW( WORD_STRONG:= MesBlock[1][9], 	WORD_WEAK := MesBlock[1][10], VAR_OUT:= MesDataExd.MesData.MesU23);
																					
	MW( WORD_STRONG:= MesBlock[1][11], 	WORD_WEAK := MesBlock[1][12], VAR_OUT:= MesDataExd.MesData.MesU31);
	MW( WORD_STRONG:= MesBlock[1][13], 	WORD_WEAK := MesBlock[1][14], VAR_OUT:= MesDataExd.MesData.MesI1);
	MW( WORD_STRONG:= MesBlock[1][15], 	WORD_WEAK := MesBlock[1][16], VAR_OUT:= MesDataExd.MesData.MesI2);
	MW( WORD_STRONG:= MesBlock[1][17], 	WORD_WEAK := MesBlock[1][18], VAR_OUT:= MesDataExd.MesData.MesI3);
	MW( WORD_STRONG:= MesBlock[1][19], 	WORD_WEAK := MesBlock[1][20], VAR_OUT:= MesDataExd.MesData.MesIN);
	MW( WORD_STRONG:= MesBlock[1][21], 	WORD_WEAK := MesBlock[1][22], VAR_OUT:= MesDataExd.MesData.MesP1);
	MW( WORD_STRONG:= MesBlock[1][23], 	WORD_WEAK := MesBlock[1][24], VAR_OUT:= MesDataExd.MesData.MesP2);
	MW( WORD_STRONG:= MesBlock[1][25], 	WORD_WEAK := MesBlock[1][26], VAR_OUT:= MesDataExd.MesData.MesP3);
																					
	MW( WORD_STRONG:= MesBlock[1][27], 	WORD_WEAK := MesBlock[1][28], VAR_OUT:= MesDataExd.MesData.MesP);
	MW( WORD_STRONG:= MesBlock[1][35], 	WORD_WEAK := MesBlock[1][36], VAR_OUT:= MesDataExd.MesData.MesS);
	MW( WORD_STRONG:= MesBlock[1][43], 	WORD_WEAK := MesBlock[1][44], VAR_OUT:= MesDataExd.MesData.MesQ);
	
	//MW( WORD_STRONG_F:= MesBlock[1][7], 	WORD_WEAK_F := MesBlock[1][8], NUMBER_F= MesDataExd.MesData.MesP);
	//MW( WORD_STRONG_F:= MesBlock[1][9], 	WORD_WEAK_F := MesBlock[1][10], NUMBER_F= MesDataExd.MesData.MesQ1);
	//MW( WORD_STRONG_F:= MesBlock[1][11], 	WORD_WEAK_F := MesBlock[1][12], NUMBER_F= MesDataExd.MesData.MesQ2);
	//MW( WORD_STRONG_F:= MesBlock[1][13], 	WORD_WEAK_F := MesBlock[1][14], NUMBER_F= MesDataExd.MesData.MesQ3);
	//MW( WORD_STRONG_F:= MesBlock[1][15], 	WORD_WEAK_F := MesBlock[1][16], NUMBER_F= MesDataExd.MesData.MesQ);
	//MW( WORD_STRONG_F:= MesBlock[1][23], 	WORD_WEAK_F := MesBlock[1][24], NUMBER_F= MesDataExd.MesData.MesS);
	
	//MW( WORD_STRONG_F:= MesBlock_Temp[4][1], 	WORD_WEAK_F := MesBlock_Temp[4][2], NUMBER_F= MesDataExd.MesData.MesTanPhi);
	//MW( WORD_STRONG_F:= MesBlock_Temp[4][3], 	WORD_WEAK_F := MesBlock_Temp[4][4], NUMBER_F= MesDataExd.MesData.MesFreq);
	//
	//MW( WORD_STRONG_F:= MesBlock_Temp[3][1], 	WORD_WEAK_F := MesBlock_Temp[3][2], NUMBER_F= MesDataExd.MesData.MesEActProd);
	//MW( WORD_STRONG_F:= MesBlock_Temp[3][3], 	WORD_WEAK_F := MesBlock_Temp[3][4], NUMBER_F= MesDataExd.MesData.MesEActCons);
	//MW( WORD_STRONG_F:= MesBlock_Temp[3][5], 	WORD_WEAK_F := MesBlock_Temp[3][6], NUMBER_F= MesDataExd.MesData.MesEReactProd);
	//MW( WORD_STRONG_F:= MesBlock_Temp[3][7], 	WORD_WEAK_F := MesBlock_Temp[3][8], NUMBER_F= MesDataExd.MesData.MesEReactCons);
	//MW( WORD_STRONG:= MesBlock_Temp[4][3], 	WORD_WEAK := MesBlock_Temp[4][4],	SIGNED:=TRUE, FIX:=0 , SIZE:=2, VAR_OUT := MesDataExd.MesData.MesFreq);
	//MW( WORD_STRONG:= MesBlock_Temp[5][1], 	WORD_WEAK := MesBlock_Temp[5][2],	SIGNED:=TRUE, FIX:=0 , SIZE:=2, VAR_OUT := MesDataExd.MesData.MesEActProd);
	//MW( WORD_STRONG:= MesBlock_Temp[5][3], 	WORD_WEAK := MesBlock_Temp[5][4],	SIGNED:=TRUE, FIX:=0 , SIZE:=2, VAR_OUT := MesDataExd.MesData.MesEActCons);
	//MW( WORD_STRONG:= MesBlock_Temp[5][5], 	WORD_WEAK := MesBlock_Temp[5][6],	SIGNED:=TRUE, FIX:=0 , SIZE:=2, VAR_OUT := MesDataExd.MesData.MesEReactProd);
	//MW( WORD_STRONG:= MesBlock_Temp[5][7], 	WORD_WEAK := MesBlock_Temp[5][8],	SIGNED:=TRUE, FIX:=0 , SIZE:=2, VAR_OUT := MesDataExd.MesData.MesEReactCons);
	MesDataExd.Mesdata.MesP	:= MesDataExd.MesData.MesP / 1000.0;
	MesDataExd.MesData.MesS	:= MesDataExd.MesData.MesS	/ 1000.0;
	MesDataExd.MesData.MesP 	:= -1 * MesDataExd.MesData.MesP;
	MesDataExd.MesData.MesP1 	:= -1 * MesDataExd.MesData.MesP1/ 1000.0;
	MesDataExd.MesData.MesP2 	:= -1 * MesDataExd.MesData.MesP2/ 1000.0;
	MesDataExd.MesData.MesP3 	:= -1 * MesDataExd.MesData.MesP3/ 1000.0;
	
	MesDataExd.MesData.MesQ 	:= -1 * MesDataExd.MesData.MesQ;
	
	MesDataExd.MesData.MesQ 	:= MesDataExd.MesData.MesQ/1000.0;
	
	IF MesDataExd.MesData.MesP <> 0 THEN
		MesDataExd.MesData.MesTanPhi := MesDataExd.MesData.MesQ /  MesDataExd.MesData.MesP;
	
	ELSE
		MesDataExd.MesData.MesTanPhi := 0;
	END_IF
	


END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_PM_520x230">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_PM_520x230.M_AlarmManagement">
      <LineId Id="177" Count="2" />
      <LineId Id="196" Count="0" />
      <LineId Id="195" Count="0" />
      <LineId Id="180" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="5" Count="2" />
      <LineId Id="65" Count="0" />
      <LineId Id="119" Count="11" />
      <LineId Id="118" Count="0" />
      <LineId Id="9" Count="3" />
      <LineId Id="55" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="103" Count="12" />
      <LineId Id="102" Count="0" />
      <LineId Id="26" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_PM_520x230.M_CP">
      <LineId Id="173" Count="19" />
      <LineId Id="49" Count="0" />
    </LineIds>
    <LineIds Name="FB_PM_520x230.M_Evaluate">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_PM_520x230.M_Execute">
      <LineId Id="530" Count="1" />
      <LineId Id="529" Count="0" />
      <LineId Id="414" Count="0" />
      <LineId Id="416" Count="0" />
      <LineId Id="547" Count="0" />
      <LineId Id="419" Count="0" />
      <LineId Id="421" Count="2" />
      <LineId Id="548" Count="0" />
      <LineId Id="424" Count="5" />
      <LineId Id="508" Count="1" />
      <LineId Id="512" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_PM_520x230.M_Init">
      <LineId Id="42" Count="7" />
      <LineId Id="4" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="23" Count="0" />
    </LineIds>
    <LineIds Name="FB_PM_520x230.M_Read">
      <LineId Id="830" Count="4" />
      <LineId Id="784" Count="1" />
      <LineId Id="714" Count="7" />
      <LineId Id="849" Count="0" />
      <LineId Id="722" Count="0" />
      <LineId Id="452" Count="0" />
      <LineId Id="275" Count="0" />
      <LineId Id="298" Count="0" />
      <LineId Id="625" Count="0" />
      <LineId Id="594" Count="0" />
      <LineId Id="596" Count="0" />
      <LineId Id="629" Count="1" />
      <LineId Id="632" Count="0" />
      <LineId Id="627" Count="0" />
      <LineId Id="633" Count="0" />
      <LineId Id="635" Count="2" />
      <LineId Id="639" Count="8" />
      <LineId Id="723" Count="0" />
      <LineId Id="648" Count="5" />
      <LineId Id="663" Count="0" />
      <LineId Id="654" Count="0" />
      <LineId Id="657" Count="5" />
      <LineId Id="603" Count="4" />
      <LineId Id="731" Count="0" />
      <LineId Id="769" Count="0" />
      <LineId Id="593" Count="0" />
      <LineId Id="725" Count="1" />
      <LineId Id="730" Count="0" />
      <LineId Id="734" Count="0" />
      <LineId Id="733" Count="0" />
      <LineId Id="800" Count="0" />
      <LineId Id="732" Count="0" />
      <LineId Id="750" Count="2" />
      <LineId Id="815" Count="0" />
      <LineId Id="753" Count="1" />
      <LineId Id="727" Count="2" />
      <LineId Id="724" Count="0" />
      <LineId Id="656" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>