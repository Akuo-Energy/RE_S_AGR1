<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_PM_PM5XXX" Id="{34296c38-99a3-4817-b947-fedb75bb14d4}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_PM_PM5XXX EXTENDS FB_PM_Base
//////////////////
// Schneider Power Meter PM5340. PM auxiliaries
//////////////////
VAR CONSTANT
	// Characteristics of the object (Same for all instances)
			
END_VAR

VAR_INPUT PERSISTENT
	// Parameters of the Object (instance specific) 
	ParamUnitID						: BYTE 	:= 1 ;				(* (NA) Unit ID   							*)	
	ParamTcpPort					: UINT	:= 502;				(* (NA) TCP port 							*)
	ParamIPAddress					: STRING;					(* (NA)	Config: IP Adress of PV INverter	*)
			
END_VAR

VAR_OUTPUT
	//Child objects
	
END_VAR

VAR_INPUT
	MesDataExd			AT %Q*		: PM_PM5XXX;
	IN_SwitchPos_IO					: BOOL; // Definition to be clarified during FAT
	
END_VAR

VAR
	// M_Read		
		FB_ModbusRead	          	: ARRAY[1..4] OF FB_ModbusRead;  // (NA) FB for Modbus Reading
		AX_ModbusReadAlarm			: ARRAY[1..4] OF BOOL;
		AX_ModbusReadAlarmId		: ARRAY[1..4] OF UDINT;		
	
		MesBlock_Temp_1 			: ARRAY [1..20]  OF WORD; 		// (NA) Temporary Block with multiple modbus reading 
		MesBlock_Temp_2 			: ARRAY [1..128] OF WORD; 		// (NA) Temporary Block with multiple modbus reading 
		MesBlock_Temp_3 			: ARRAY [1..128] OF WORD; 		// (NA) Temporary Block with multiple modbus reading 
		MesBlock_Temp_4 			: ARRAY [1..60]  OF WORD; 		// (NA) Temporary Block with multiple modbus reading 
		
		OutErrorMbRead				: ARRAY[1..5] OF BOOL;
		
		
		AX_QTY_MB			: ARRAY[1..4] OF WORD := [20, 112, 104, 60];
		AX_ADR_MB			: ARRAY[1..4] OF WORD := [2699, 2999, 13522, 21299]; 
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="M_AlarmManagement" Id="{155c3045-c34b-4fb0-9831-cdeb39b2fcce}">
      <Declaration><![CDATA[METHOD M_AlarmManagement
//////////////////
//Alarms and warnings management
/////////////////

VAR 
	// Method local variables (reinitialized at each cycle) 
	FB_AlarmCodeManager			: FB_AlarmCodeManager; 
	
	KK							: BYTE;			// For loop
	
	CMWarning					: BOOL;			// At least one Digiware device in Alarm
	CMAlarm						: BOOL;			// At least one Digiware device in Alarm
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[	
TON_ComAlarm(IN:= OutErrorMbRead[1] AND OutErrorMbRead[2] AND OutErrorMbRead[3] AND OutErrorMbRead[4] AND OutErrorMbRead[5] , PT:= ParamTempoComAlarm, Q=> MesDataExd.MesData.MesAlarmCom);	
TON_ComWarning(IN:= OutErrorMbRead[1] OR OutErrorMbRead[2] OR OutErrorMbRead[3] OR OutErrorMbRead[4] OR OutErrorMbRead[5] , PT:= ParamTempoComAlarm, Q=>MesWarningCom);	

MesDataExd.MesAlarmSW_Open := NOT IN_SwitchPos_IO;  
// ALARM CODE //
	FB_AlarmCodeManager(
		bAlarm1			:= MesDataExd.MesData.MesAlarmCom, 			// Communication Error #COM
		bAlarm2			:= MesDataExd.MesAlarmSW_Open, 				// PM switch open
		bAlarm3			:=FALSE, 									// 
		bAlarm4			:=FALSE, 									// 
		bAlarm5			:=FALSE, 									//
		bAlarm6			:=FALSE, 									//
		bAlarm7			:=FALSE, 									//
		bAlarm8			:=FALSE, 									//
		bAlarm9			:=FALSE, 									//
		bAlarm10		:=FALSE, 									//
		bAlarm11		:=FALSE, 									//
		bAlarm12		:=FALSE, 									//
		bAlarm13		:=FALSE, 									//
		bAlarm14		:=FALSE, 									//
		bAlarm15		:= FALSE , 									// 							 
		wAlarmCode		=> MesDataExd.MesData.MesAlarmCode);

// WARNING CODE //
	FB_AlarmCodeManager(		
		bAlarm1			:=MesWarningCom	,				 			// Communication Warning #COM
		bAlarm2			:=FALSE, 						 			// 
		bAlarm3			:=FALSE, 						 			// 
		bAlarm4			:=FALSE, 						 			// 
		bAlarm5			:=FALSE, 						 			//
		bAlarm6			:=FALSE, 						 			//
		bAlarm7			:=FALSE, 						 			//
		bAlarm8			:=FALSE, 						 			//
		bAlarm9			:=FALSE, 						 			//
		bAlarm10		:=FALSE, 						 			//
		bAlarm11		:=FALSE, 						 			//
		bAlarm12		:=FALSE, 						 			//
		bAlarm13		:=FALSE, 						 			//
		bAlarm14		:=FALSE, 						 			//
		bAlarm15		:=FALSE, 						 			//
		wAlarmCode		=> MesDataExd.MesData.MesWarningCode);		
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_CP" Id="{7462ad04-bff1-4d5b-98e6-4fae5bd9a468}">
      <Declaration><![CDATA[METHOD M_CP
//////////////////
//  Emulator
/////////////////

VAR 
	// Method local variables (reinitialized at each cycle) 
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

SUPER^.M_CP() ; 




Trig_Cmd_Read(CLK:=IN_CmdToggleRead);
	
IF Trig_Cmd_Read.Q THEN
	IN_CmdToggleRead := FALSE;
	MesDataExd.MesData.MesCP_Read := NOT MesDataExd.MesData.MesCP_Read;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Evaluate" Id="{ed6089a3-26eb-4162-9680-b3fdc8d1ddc7}">
      <Declaration><![CDATA[METHOD M_Evaluate : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Init" Id="{488662de-c183-44ff-9d09-a78e58503f47}">
      <Declaration><![CDATA[METHOD M_Init
VAR 

END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[ParamClockReadTime := T#10s;


]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Read" Id="{597968d1-7d60-4ba2-85de-b357c26cc521}">
      <Declaration><![CDATA[METHOD M_Read
//////////////////
//  Read Modbus variables for Schneider PM models : PM5560, PM5563, PM5563RD. 
/////////////////
VAR 
	// Method local variables (reinitialized at each cycle) 
	MW_Float			: FB_MergeWordsToFloat;
	MW_UInt				: FB_MergeWordsToUint;
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF MesDataExd.MesData.MesCP_Read THEN	
	
		FB_ModbusRead[1]
	(
		nTCPPort		:= ParamTcpPort,
		ClockRead		:= MesDataExd.MesData.MesCP_Read AND ClockRead, 
		Reset			:= CmdClearFault_G OR IN_CmdReset_L,
		sIPAddr			:=ParamIPAddress,
		nUnitID			:= 255, 
		tTimeout		:= ParamTimeout,
		nQuantity		:= AX_QTY_MB[1], 
		nMBAddr			:= AX_ADR_MB[1], 
		cbLength		:= SIZEOF(MesBlock_Temp_1), 
		pDestAddr		:= ADR(MesBlock_Temp_1), 
		ModbusReadAlarm	=>AX_ModbusReadAlarm[1], 
		ErrorId			=> AX_ModbusReadAlarmId[1]
	);
	
	FB_ModbusRead[2]
	(
		nTCPPort		:= ParamTcpPort,
		ClockRead		:= MesDataExd.MesData.MesCP_Read AND ClockRead, 
		Reset			:= CmdClearFault_G OR IN_CmdReset_L,
		sIPAddr			:=ParamIPAddress, 
		nUnitID			:= 255, 
		tTimeout		:= ParamTimeout,
		nQuantity		:= AX_QTY_MB[2], 
		nMBAddr			:= AX_ADR_MB[2], 
		cbLength		:= SIZEOF(MesBlock_Temp_2), 
		pDestAddr		:= ADR(MesBlock_Temp_2), 
		ModbusReadAlarm	=>AX_ModbusReadAlarm[2], 
		ErrorId			=> AX_ModbusReadAlarmId[2]
	);
	
	FB_ModbusRead[3]
	(
		nTCPPort		:= ParamTcpPort,
		ClockRead		:= MesDataExd.MesData.MesCP_Read AND ClockRead, 
		Reset			:= CmdClearFault_G OR IN_CmdReset_L,
		sIPAddr			:=ParamIPAddress, 
		nUnitID			:= 255, 
		tTimeout		:= ParamTimeout,
		nQuantity		:= AX_QTY_MB[3], 
		nMBAddr			:= AX_ADR_MB[3], 
		cbLength		:= SIZEOF(MesBlock_Temp_3), 
		pDestAddr		:= ADR(MesBlock_Temp_3), 
		ModbusReadAlarm	=>AX_ModbusReadAlarm[3], 
		ErrorId			=> AX_ModbusReadAlarmId[3]
	);
	
	FB_ModbusRead[4]
	(
		nTCPPort		:= ParamTcpPort,
		ClockRead		:= MesDataExd.MesData.MesCP_Read AND ClockRead, 
		Reset			:= CmdClearFault_G OR IN_CmdReset_L,
		sIPAddr			:= ParamIPAddress , 
		nUnitID			:= 255, 
		tTimeout		:= ParamTimeout,
		nQuantity		:= AX_QTY_MB[4], 
		nMBAddr			:= AX_ADR_MB[4], 
		cbLength		:= SIZEOF(MesBlock_Temp_4), 
		pDestAddr		:= ADR(MesBlock_Temp_4), 
		ModbusReadAlarm	=> AX_ModbusReadAlarm[4], 
		ErrorId			=> AX_ModbusReadAlarmId[4]
	);
	
	MW_Float( WORD_STRONG := MesBlock_Temp_1[1],  WORD_WEAK := MesBlock_Temp_1[2],  VAR_OUT := MesDataExd.MesData.MesEActProd);
	MW_Float( WORD_STRONG := MesBlock_Temp_1[3],  WORD_WEAK := MesBlock_Temp_1[4],  VAR_OUT := MesDataExd.MesData.MesEActCons);
	MW_Float( WORD_STRONG := MesBlock_Temp_1[9],  WORD_WEAK := MesBlock_Temp_1[10], VAR_OUT := MesDataExd.MesData.MesEReactProd);
	MW_Float( WORD_STRONG := MesBlock_Temp_1[11], WORD_WEAK := MesBlock_Temp_1[12], VAR_OUT := MesDataExd.MesData.MesEReactCons);
	MW_Float( WORD_STRONG := MesBlock_Temp_1[17], WORD_WEAK := MesBlock_Temp_1[18], VAR_OUT := MesDataExd.MesEAppProd);
	MW_Float( WORD_STRONG := MesBlock_Temp_1[19], WORD_WEAK := MesBlock_Temp_1[20], VAR_OUT := MesDataExd.MesEAppCons);
	                                                                             
	MW_Float( WORD_STRONG := MesBlock_Temp_2[1],  WORD_WEAK := MesBlock_Temp_2[2],  VAR_OUT  := MesDataExd.MesData.MesI1);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[3],  WORD_WEAK := MesBlock_Temp_2[4],  VAR_OUT  := MesDataExd.MesData.MesI2);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[5],  WORD_WEAK := MesBlock_Temp_2[6],  VAR_OUT  := MesDataExd.MesData.MesI3);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[7],  WORD_WEAK := MesBlock_Temp_2[8],  VAR_OUT  := MesDataExd.MesData.MesIn);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[13], WORD_WEAK := MesBlock_Temp_2[14], VAR_OUT  := MesDataExd.MesUnbalanced_I1);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[15], WORD_WEAK := MesBlock_Temp_2[16], VAR_OUT  := MesDataExd.MesUnbalanced_I2);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[17], WORD_WEAK := MesBlock_Temp_2[18], VAR_OUT  := MesDataExd.MesUnbalanced_I3);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[21], WORD_WEAK := MesBlock_Temp_2[22], VAR_OUT  := MesDataExd.MesData.MesU12);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[23], WORD_WEAK := MesBlock_Temp_2[24], VAR_OUT  := MesDataExd.MesData.MesU23);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[25], WORD_WEAK := MesBlock_Temp_2[26], VAR_OUT  := MesDataExd.MesData.MesU31);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[29], WORD_WEAK := MesBlock_Temp_2[30], VAR_OUT  := MesDataExd.MesData.MesV1);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[31], WORD_WEAK := MesBlock_Temp_2[32], VAR_OUT  := MesDataExd.MesData.MesV2);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[33], WORD_WEAK := MesBlock_Temp_2[34], VAR_OUT  := MesDataExd.MesData.MesV3);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[39], WORD_WEAK := MesBlock_Temp_2[40], VAR_OUT  := MesDataExd.MesUnbalanced_U12);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[41], WORD_WEAK := MesBlock_Temp_2[42], VAR_OUT  := MesDataExd.MesUnbalanced_U23);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[43], WORD_WEAK := MesBlock_Temp_2[44], VAR_OUT  := MesDataExd.MesUnbalanced_U31);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[47], WORD_WEAK := MesBlock_Temp_2[48], VAR_OUT  := MesDataExd.MesUnbalanced_V1);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[49], WORD_WEAK := MesBlock_Temp_2[50], VAR_OUT  := MesDataExd.MesUnbalanced_V2);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[51], WORD_WEAK := MesBlock_Temp_2[52], VAR_OUT  := MesDataExd.MesUnbalanced_V3);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[55], WORD_WEAK := MesBlock_Temp_2[56], VAR_OUT  := MesDataExd.MesData.MesP1);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[57], WORD_WEAK := MesBlock_Temp_2[58], VAR_OUT  := MesDataExd.MesData.MesP2);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[59], WORD_WEAK := MesBlock_Temp_2[60], VAR_OUT  := MesDataExd.MesData.MesP3);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[61], WORD_WEAK := MesBlock_Temp_2[62], VAR_OUT  := MesDataExd.MesData.MesP);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[63], WORD_WEAK := MesBlock_Temp_2[64], VAR_OUT  := MesDataExd.MesData.MesQ1);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[65], WORD_WEAK := MesBlock_Temp_2[66], VAR_OUT  := MesDataExd.MesData.MesQ2);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[67], WORD_WEAK := MesBlock_Temp_2[68], VAR_OUT  := MesDataExd.MesData.MesQ3);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[69], WORD_WEAK := MesBlock_Temp_2[70], VAR_OUT  := MesDataExd.MesData.MesQ);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[71], WORD_WEAK := MesBlock_Temp_2[72], VAR_OUT  := MesDataExd.MesData.MesS1);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[73], WORD_WEAK := MesBlock_Temp_2[74], VAR_OUT  := MesDataExd.MesData.MesS2);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[75], WORD_WEAK := MesBlock_Temp_2[76], VAR_OUT  := MesDataExd.MesData.MesS3);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[77], WORD_WEAK := MesBlock_Temp_2[78], VAR_OUT  := MesDataExd.MesData.MesS);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[79], WORD_WEAK := MesBlock_Temp_2[80], VAR_OUT  := MesDataExd.MesData.MesCosPhi1);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[81], WORD_WEAK := MesBlock_Temp_2[82], VAR_OUT  := MesDataExd.MesData.MesCosPhi2);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[83], WORD_WEAK := MesBlock_Temp_2[84], VAR_OUT  := MesDataExd.MesData.MesCosPhi3);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[85], WORD_WEAK := MesBlock_Temp_2[86], VAR_OUT  := MesDataExd.MesData.MesCosPhi);
	MW_Float( WORD_STRONG := MesBlock_Temp_2[111],WORD_WEAK := MesBlock_Temp_2[112],VAR_OUT  := MesDataExd.MesData.MesFreq);

	MW_UInt(WORD_STRONG:= MesBlock_Temp_3[ 1],  VAR_OUT:=MesDataExd.MesAlarmImax);
	MW_UInt(WORD_STRONG:= MesBlock_Temp_3[ 2],  VAR_OUT:=MesDataExd.MesAlarmImin);
	MW_UInt(WORD_STRONG:= MesBlock_Temp_3[ 3],  VAR_OUT:=MesDataExd.MesAlarmInmax);
	MW_UInt(WORD_STRONG:= MesBlock_Temp_3[ 4],  VAR_OUT:=MesDataExd.MesAlarmIgmax);
	MW_UInt(WORD_STRONG:= MesBlock_Temp_3[ 5],  VAR_OUT:=MesDataExd.MesAlarmUmax);
	MW_UInt(WORD_STRONG:= MesBlock_Temp_3[ 6],  VAR_OUT:=MesDataExd.MesAlarmUmin);
	MW_UInt(WORD_STRONG:= MesBlock_Temp_3[ 7],  VAR_OUT:=MesDataExd.MesAlarmVmax);
	MW_UInt(WORD_STRONG:= MesBlock_Temp_3[ 8],  VAR_OUT:=MesDataExd.MesAlarmVmin);
	MW_UInt(WORD_STRONG:= MesBlock_Temp_3[ 9],  VAR_OUT:=MesDataExd.MesAlarmPmax);
	MW_UInt(WORD_STRONG:= MesBlock_Temp_3[ 10], VAR_OUT:=MesDataExd.MesAlarmQmax);
	MW_UInt(WORD_STRONG:= MesBlock_Temp_3[ 11], VAR_OUT:=MesDataExd.MesAlarmSmax);
	
	MW_UInt(WORD_STRONG:= MesBlock_Temp_3[ 25], VAR_OUT:=MesDataExd.MesAlarmFreqmax);
	MW_UInt(WORD_STRONG:= MesBlock_Temp_3[ 26], VAR_OUT:=MesDataExd.MesAlarmFreqmin);
	
	MW_UInt(WORD_STRONG:= MesBlock_Temp_3[ 29], VAR_OUT:=MesDataExd.MesAlarm_PhaseLoss);

	MW_UInt(WORD_STRONG:= MesBlock_Temp_3[ 102], VAR_OUT:=MesDataExd.MesAlarmReset);
	MW_UInt(WORD_STRONG:= MesBlock_Temp_3[ 104], VAR_OUT:=MesDataExd.MesAlarm_PhaseReversal);

END_IF

MesDataExd.MesData.MesI := (MesDataExd.MesData.MesI1 + MesDataExd.MesData.MesI2 + MesDataExd.MesData.MesI3 );
MesDataExd.MesData.MesU := (MesDataExd.MesData.MesU12 + MesDataExd.MesData.MesU23 + MesDataExd.MesData.MesU31 )/3;
MesDataExd.MesData.MesV := (MesDataExd.MesData.MesV1 + MesDataExd.MesData.MesV2 + MesDataExd.MesData.MesV3 )/3;

IF MesDataExd.MesData.MesP <> 0 THEN
	MesDataExd.MesData.MesTanPhi := MesDataExd.MesData.MesQ/MesDataExd.MesData.MesP;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_PM_PM5XXX">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_PM_PM5XXX.M_AlarmManagement">
      <LineId Id="178" Count="1" />
      <LineId Id="196" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="5" Count="2" />
      <LineId Id="65" Count="0" />
      <LineId Id="119" Count="11" />
      <LineId Id="118" Count="0" />
      <LineId Id="9" Count="3" />
      <LineId Id="55" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="103" Count="12" />
      <LineId Id="102" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_PM_PM5XXX.M_CP">
      <LineId Id="112" Count="13" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_PM_PM5XXX.M_Evaluate">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_PM_PM5XXX.M_Init">
      <LineId Id="28" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="23" Count="0" />
    </LineIds>
    <LineIds Name="FB_PM_PM5XXX.M_Read">
      <LineId Id="962" Count="0" />
      <LineId Id="699" Count="0" />
      <LineId Id="919" Count="0" />
      <LineId Id="784" Count="13" />
      <LineId Id="780" Count="0" />
      <LineId Id="798" Count="0" />
      <LineId Id="800" Count="15" />
      <LineId Id="817" Count="15" />
      <LineId Id="834" Count="13" />
      <LineId Id="739" Count="0" />
      <LineId Id="848" Count="0" />
      <LineId Id="850" Count="1" />
      <LineId Id="854" Count="1" />
      <LineId Id="858" Count="2" />
      <LineId Id="862" Count="3" />
      <LineId Id="868" Count="2" />
      <LineId Id="872" Count="2" />
      <LineId Id="876" Count="2" />
      <LineId Id="881" Count="2" />
      <LineId Id="885" Count="2" />
      <LineId Id="889" Count="16" />
      <LineId Id="849" Count="0" />
      <LineId Id="922" Count="10" />
      <LineId Id="934" Count="0" />
      <LineId Id="936" Count="1" />
      <LineId Id="975" Count="0" />
      <LineId Id="940" Count="0" />
      <LineId Id="943" Count="1" />
      <LineId Id="946" Count="0" />
      <LineId Id="921" Count="0" />
      <LineId Id="740" Count="0" />
      <LineId Id="1001" Count="0" />
      <LineId Id="1000" Count="0" />
      <LineId Id="1002" Count="1" />
      <LineId Id="987" Count="0" />
      <LineId Id="986" Count="0" />
      <LineId Id="988" Count="1" />
      <LineId Id="656" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>