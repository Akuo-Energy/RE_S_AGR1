<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="FB_CM_IskraMc740" Id="{1402b8ac-c39c-480f-a891-cfda758ef614}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_CM_IskraMc740 EXTENDS FB_CM_Base
VAR_INPUT
		ParamIPAddress				: STRING 	:= '192.168.20.66'; 	// (NA)Config: IP Adress of PV INverter
		ParamUnitID 				: BYTE  	:= 1; 			  		// (NA)   Modbus Unit ID. 
		ParamTCPPort				: UINT		:= 502;					// (NA) TCP port for modbus
		ParamTempoComWarning		: TIME 		:= T#400ms;
END_VAR
VAR PERSISTENT
		Energy_Exp1				: INT;
		Energy_Exp2				: INT;
		Energy_Exp3				: INT;
		Energy_Exp4				: INT;
		Energy_Count1			: UINT;
		Energy_Count2			: UINT;
		Energy_Count3			: UINT;
		Energy_Count4			: UINT;
END_VAR
VAR
	// M_READ VARIABLES//
		AX_ModbusRead		   		: ARRAY [1..2] OF FB_ModbusRead ; 					// (NA) FB for Modbus Reading
		
		MesBlock_Temp 				: ARRAY [1..2] OF ARRAY[1..120]  OF WORD; 			// (NA) Temporary Block with multiple modbus reading (Caution : Double Word variables)

		AX_ReadAlarm 		  		: ARRAY [1..2] OF BOOL ; 							// (NA) Modbus Read Alarm for all modbus frames		
		AX_ReadAlarmCode			: ARRAY [1..2] OF UDINT;							// (NA) Modbus Read Alarm Code		
		AX_ReadBusy					: ARRAY [1..2] OF BOOL;								// (NA) Modbus Read Busy  
		AX_ReadCompleted			: ARRAY [1..2] OF BOOL;								// (NA) Modbus Read Completed
		
	// M_STATEMANAGER//
		bErrorState					: BOOL;								//(NA) Inverter is in incoherent state
		
		
	

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="M_AlarmManagement" Id="{45efe2cd-a3e7-4948-b67c-afe4c936848e}">
      <Declaration><![CDATA[METHOD M_AlarmManagement
//////////////////
// Manages IntelliGen Alarms
/////////////////

VAR 
	// Method local variables (reinitialized at each cycle) 
	FB_AlarmCodeManager : FB_AlarmCodeManager ; 

	KK					: BYTE;		// For Loop 
	
	ComWarning			: BOOL;		// Aggregated Wcommunication warning
	ComAlarm			: BOOL;		// Aggregated communication Alarm

END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//COMMUNICATION//
	//Alarm
	TON_ComAlarm	(IN:= (AX_ModbusRead[1].ModbusReadAlarm) AND (AX_ModbusRead[2].ModbusReadAlarm) , PT:= ParamTempoComAlarm, Q=>MesAlarmCom) ;
	TON_ComWarning	(IN:= (AX_ModbusRead[1].ModbusReadAlarm) OR  (AX_ModbusRead[2].ModbusReadAlarm) , PT:= ParamTempoComWarning, Q=>MesComWarning) ;	
	

	// Alarms if ALL MODBUS frames didn't work and timeout of 15s
	
	
// ALARM CODE //
	FB_AlarmCodeManager(
		bAlarm1			:= MesAlarmCom,  				// Communication general alarm (desactivate if LOC) 
		bAlarm2			:= FALSE ,				// State not Ok
		bAlarm3			:= FALSE, 						// 
		bAlarm4			:= FALSE, 		            	//     
		bAlarm5			:= FALSE, 						// 
		bAlarm6			:= FALSE, 						// 
		bAlarm7			:= False, 						// 
		bAlarm8			:= False, 						// 
		bAlarm9			:= FALSE, 						
		bAlarm10		:= FALSE, 						
		bAlarm11		:= FALSE, 
		bAlarm12		:= FALSE, 
		bAlarm13		:= FALSE, 
		bAlarm14		:= FALSE, 						// 
		bAlarm15		:= FALSE , 		// Command Alarm in case of intervention
		wAlarmCode		=>MesDataExd.MesData.MesAlarmCode);

// WARNING CODE //
	FB_AlarmCodeManager(
 		bAlarm1			:= MesComWarning,				// Bad communication				
		bAlarm2			:= FALSE,						
		bAlarm3			:= FALSE,						
		bAlarm4			:= FALSE, 						
		bAlarm5			:= FALSE, 						
		bAlarm6			:= FALSE, 						
		bAlarm7			:= FALSE, 
		bAlarm8			:= FALSE, 
		bAlarm9			:= FALSE, 
		bAlarm10		:= FALSE, 
		bAlarm11		:= FALSE, 
		bAlarm12		:= FALSE, 
		bAlarm13		:= FALSE, 
		bAlarm14		:= FALSE, 
		bAlarm15		:= FALSE, 
		wAlarmCode		=>MesDataExd.MesData.MesWarningCode);	

// EVENT CODE //
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_CP" Id="{eb10c8ac-9b52-4051-a212-18797355292b}">
      <Declaration><![CDATA[METHOD M_CP
//////////////////
//  Emulator
/////////////////

VAR 
	// Method local variables (reinitialized at each cycle) 

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Execute" Id="{09a28066-90ef-48ce-b3b2-3906ab29ea66}">
      <Declaration><![CDATA[METHOD M_Execute
//////////////////
//  Method Calls 
/////////////////

VAR 
	// Method local variables (reinitialized at each cycle) 

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInit THEN
	M_Init();
END_IF


SUPER^.M_Execute() ; ]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Read" Id="{10cc42ee-e6e2-4a19-a238-57a1f98839f0}">
      <Declaration><![CDATA[METHOD M_Read
//////////////////
//  Read Modbus Variable for PCS . 
/////////////////
VAR 
	// Method local variables (reinitialized at each cycle) 
		
		AX_Addr				: ARRAY[1..3] OF UINT := [30105, 	30401, 	0];
		AX_Qty				: ARRAY[1..3] OF UINT := [86, 		86, 	1];
		
		T5					: FB_ISKRA_T5;
		T6					: FB_ISKRA_T6;
		
		MW					: FB_MergeWordsToUint;

		KK: INT;
END_VAR



]]></Declaration>
      <Implementation>
        <ST><![CDATA[AX_ModbusRead[1]
(
	pDestAddr 		:= ADR(MesBlock_Temp[1]),
	sIPAddr 		:= ParamIPAddress,
	tTimeout 		:= ParamTimeout,
	nQuantity 		:= AX_Qty[1],
	ntcpport 		:= ParamTCPPort,
	nMBAddr 		:= AX_Addr[1],
	nUnitID 		:= ParamUnitID,
	cbLength 		:= SIZEOF(MesBlock_Temp[1]),
	ClockRead 		:= ClockRead AND MesDataExd.MesData.MesCP_Read,
	Reset 			:= CalFaultClear_G OR CmdReset_L,
	ErrorId 		=> AX_ReadAlarmCode[1],
	ModbusReadAlarm => AX_ReadAlarm[1],
	Busy 			=> AX_ReadBusy[1]	
);

AX_ModbusRead[2]
(
	pDestAddr 		:= ADR(MesBlock_Temp[2]),
	sIPAddr 		:= ParamIPAddress,
	tTimeout 		:= ParamTimeout,
	nQuantity 		:= AX_Qty[2],
	ntcpport 		:= ParamTCPPort,
	nMBAddr 		:= AX_Addr[2],
	nUnitID 		:= ParamUnitID,
	cbLength 		:= SIZEOF(MesBlock_Temp[2]),
	ClockRead 		:= ClockRead AND MesDataExd.MesData.MesCP_Read,
	Reset 			:= CalFaultClear_G OR CmdReset_L,
	ErrorId 		=> AX_ReadAlarmCode[2],
	ModbusReadAlarm => AX_ReadAlarm[2],
	Busy 			=> AX_ReadBusy[2]	
);

T5(WORD_STRONG := MesBlock_Temp[1][1], 			WORD_WEAK := MesBlock_Temp[1][2],			VAR_OUT =>MesDataExd.MesData.MesFreq);
T5(WORD_STRONG := MesBlock_Temp[1][3], 			WORD_WEAK := MesBlock_Temp[1][4],			VAR_OUT =>MesDataExd.MesData.MesV1);
T5(WORD_STRONG := MesBlock_Temp[1][5], 			WORD_WEAK := MesBlock_Temp[1][6],			VAR_OUT =>MesDataExd.MesData.MesV2);
T5(WORD_STRONG := MesBlock_Temp[1][7], 			WORD_WEAK := MesBlock_Temp[1][8],			VAR_OUT =>MesDataExd.MesData.MesV3);
T5(WORD_STRONG := MesBlock_Temp[1][9], 			WORD_WEAK := MesBlock_Temp[1][10],			VAR_OUT =>MesDataExd.MesData.MesV);
T5(WORD_STRONG := MesBlock_Temp[1][14], 		WORD_WEAK := MesBlock_Temp[1][15],			VAR_OUT =>MesDataExd.MesData.MesU12);
T5(WORD_STRONG := MesBlock_Temp[1][16], 		WORD_WEAK := MesBlock_Temp[1][17],			VAR_OUT =>MesDataExd.MesData.MesU23);
T5(WORD_STRONG := MesBlock_Temp[1][18], 		WORD_WEAK := MesBlock_Temp[1][19],			VAR_OUT =>MesDataExd.MesData.MesU31);
T5(WORD_STRONG := MesBlock_Temp[1][20], 		WORD_WEAK := MesBlock_Temp[1][21],			VAR_OUT =>MesDataExd.MesData.MesU);
T5(WORD_STRONG := MesBlock_Temp[1][22], 		WORD_WEAK := MesBlock_Temp[1][23],			VAR_OUT =>MesDataExd.MesData.MesI1);
T5(WORD_STRONG := MesBlock_Temp[1][24], 		WORD_WEAK := MesBlock_Temp[1][25],			VAR_OUT =>MesDataExd.MesData.MesI2);
T5(WORD_STRONG := MesBlock_Temp[1][26], 		WORD_WEAK := MesBlock_Temp[1][27],			VAR_OUT =>MesDataExd.MesData.MesI3);
T5(WORD_STRONG := MesBlock_Temp[1][28], 		WORD_WEAK := MesBlock_Temp[1][29],			VAR_OUT =>MesDataExd.MesData.MesI4);
T5(WORD_STRONG := MesBlock_Temp[1][32], 		WORD_WEAK := MesBlock_Temp[1][33],			VAR_OUT =>MesDataExd.MesData.MesI);

T6(WORD_STRONG := MesBlock_Temp[1][36], 		WORD_WEAK := MesBlock_Temp[1][37],			VAR_OUT =>MesDataExd.MesData.MesP);
T6(WORD_STRONG := MesBlock_Temp[1][38], 		WORD_WEAK := MesBlock_Temp[1][39],			VAR_OUT =>MesDataExd.MesData.MesP1);
T6(WORD_STRONG := MesBlock_Temp[1][40], 		WORD_WEAK := MesBlock_Temp[1][41],			VAR_OUT =>MesDataExd.MesData.MesP2);
T6(WORD_STRONG := MesBlock_Temp[1][42], 		WORD_WEAK := MesBlock_Temp[1][43],			VAR_OUT =>MesDataExd.MesData.MesP3);
T6(WORD_STRONG := MesBlock_Temp[1][44], 		WORD_WEAK := MesBlock_Temp[1][45],			VAR_OUT =>MesDataExd.MesData.MesQ);
T6(WORD_STRONG := MesBlock_Temp[1][46], 		WORD_WEAK := MesBlock_Temp[1][47],			VAR_OUT =>MesDataExd.MesData.MesQ1);
T6(WORD_STRONG := MesBlock_Temp[1][48], 		WORD_WEAK := MesBlock_Temp[1][49],			VAR_OUT =>MesDataExd.MesData.MesQ2);
T6(WORD_STRONG := MesBlock_Temp[1][50], 		WORD_WEAK := MesBlock_Temp[1][51],			VAR_OUT =>MesDataExd.MesData.MesQ3);
T6(WORD_STRONG := MesBlock_Temp[1][52], 		WORD_WEAK := MesBlock_Temp[1][53],			VAR_OUT =>MesDataExd.MesData.MesS);

Mesdata.MesThdI1 	:= WORD_TO_REAL(MesBlock_Temp[1][84])/100;
Mesdata.MesThdI2 	:= WORD_TO_REAL(MesBlock_Temp[1][85])/100;
Mesdata.MesThdI3 	:= WORD_TO_REAL(MesBlock_Temp[1][86])/100;
Mesdata.MesThdV1 	:= WORD_TO_REAL(MesBlock_Temp[1][78])/100;
Mesdata.MesThdV2 	:= WORD_TO_REAL(MesBlock_Temp[1][79])/100;
Mesdata.MesThdV3 	:= WORD_TO_REAL(MesBlock_Temp[1][80])/100;
Mesdata.MesThdU12 	:= WORD_TO_REAL(MesBlock_Temp[1][81])/100;
Mesdata.MesThdU23 	:= WORD_TO_REAL(MesBlock_Temp[1][82])/100;
Mesdata.MesThdU31 	:= WORD_TO_REAL(MesBlock_Temp[1][83])/100;

T5(WORD_STRONG := MesBlock_Temp[2][85], 		WORD_WEAK := MesBlock_Temp[2][86],			VAR_OUT =>MesDataExd.MesData.MesUgn);

Energy_Exp1 := WORD_TO_INT(MesBlock_Temp[2][1]);
Energy_Exp2 := WORD_TO_INT(MesBlock_Temp[2][2]);
Energy_Exp3 := WORD_TO_INT(MesBlock_Temp[2][3]);
Energy_Exp4 := WORD_TO_INT(MesBlock_Temp[2][4]);

MW(WORD_STRONG := MesBlock_Temp[2][ 5], WORD_WEAK := MesBlock_Temp[2][ 6], VAR_OUT := Energy_Count1);
MW(WORD_STRONG := MesBlock_Temp[2][ 7], WORD_WEAK := MesBlock_Temp[2][ 8], VAR_OUT := Energy_Count2);
MW(WORD_STRONG := MesBlock_Temp[2][ 9], WORD_WEAK := MesBlock_Temp[2][10], VAR_OUT := Energy_Count3);
MW(WORD_STRONG := MesBlock_Temp[2][11], WORD_WEAK := MesBlock_Temp[2][12], VAR_OUT := Energy_Count4);

MesData.MesE_AcDel 		:= Energy_Count1*EXPT(10, Energy_Exp1);
MesData.MesE_ReacDel 	:= Energy_Count2*EXPT(10, Energy_Exp2);
MesData.MesE_AcRec 		:= Energy_Count3*EXPT(10, Energy_Exp3);
MesData.MesE_ReacRec 	:= Energy_Count4*EXPT(10, Energy_Exp4);]]></ST>
      </Implementation>
    </Method>
    <Property Name="P.MesDataExd.MesData. Id="{8b597c05-ab23-45b7-8802-c8b8d2664c2e}">
      <Declaration><![CDATA[PROPERTY P.MesDataExd.MesData.: MC740]]></Declaration>
      <Get Name="Get" Id="{1b2c8b05-1622-43d2-a330-9cb432ebd246}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P.MesDataExd.MesData.:= MesDataExd.MesData.]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_Reset_L" Id="{b0666d67-7f50-4aa9-a343-f2d398a7d65e}">
      <Declaration><![CDATA[PROPERTY P_Reset_L : BOOL
]]></Declaration>
      <Set Name="Set" Id="{ead87030-bd92-4536-b6e4-37399266069c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CmdReset_L := P_Reset_L;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="FB_CM_IskraMc740">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_CM_IskraMc740.M_AlarmManagement">
      <LineId Id="244" Count="0" />
      <LineId Id="257" Count="0" />
      <LineId Id="346" Count="0" />
      <LineId Id="371" Count="0" />
      <LineId Id="370" Count="0" />
      <LineId Id="348" Count="0" />
      <LineId Id="331" Count="0" />
      <LineId Id="259" Count="0" />
      <LineId Id="330" Count="0" />
      <LineId Id="260" Count="38" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CM_IskraMc740.M_CP">
      <LineId Id="51" Count="0" />
    </LineIds>
    <LineIds Name="FB_CM_IskraMc740.M_Execute">
      <LineId Id="24" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="13" Count="1" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_CM_IskraMc740.M_Read">
      <LineId Id="14" Count="15" />
      <LineId Id="232" Count="0" />
      <LineId Id="216" Count="15" />
      <LineId Id="84" Count="1" />
      <LineId Id="235" Count="2" />
      <LineId Id="239" Count="1" />
      <LineId Id="242" Count="7" />
      <LineId Id="279" Count="0" />
      <LineId Id="251" Count="8" />
      <LineId Id="267" Count="0" />
      <LineId Id="269" Count="8" />
      <LineId Id="265" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="234" Count="0" />
      <LineId Id="289" Count="3" />
      <LineId Id="197" Count="0" />
      <LineId Id="295" Count="2" />
      <LineId Id="294" Count="0" />
      <LineId Id="195" Count="0" />
      <LineId Id="299" Count="2" />
    </LineIds>
    <LineIds Name="FB_CM_IskraMc740.P.MesDataExd.MesData.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CM_IskraMc740.P_Reset_L.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>