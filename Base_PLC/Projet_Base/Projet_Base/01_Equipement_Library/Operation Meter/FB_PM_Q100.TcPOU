<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_PM_Q100" Id="{1402b8ac-c39c-480f-a891-cfda758ef614}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_PM_Q100 EXTENDS FB_PM_Base
VAR_INPUT PERSISTENT
		ParamIPAddress				: STRING 	:= '192.168.20.66'; 	(* (NA)Config: IP Adress of PV INverter	*)
		ParamUnitID 				: BYTE  	:= 1; 			  		(* (NA)   Modbus Unit ID.               *)
		ParamTCPPort				: UINT		:= 502;					(* (NA) TCP port for modbus             *)

END_VAR

VAR_INPUT 
		MesDataExd			: PM_Q100;
END_VAR

VAR_OUTPUT
END_VAR
VAR
	// M_READ VARIABLES//

		AX_SB						: ARRAY [1..CstNbSB_INV_G] OF JuncBox;
		AX_ModbusRead		   		: ARRAY [1..3] OF FB_ModbusRead ; 					// (NA) FB for Modbus Reading
		
		MesBlock1_Temp 				: ARRAY[1..2]  OF WORD; 			// (NA) Temporary Block with multiple modbus reading (Caution : Double Word variables)
		MesBlock2_Temp 				: ARRAY[1..76]  OF WORD; 			// (NA) Temporary Block with multiple modbus reading (Caution : Double Word variables)
		MesBlock3_Temp 				: ARRAY[1..38]  OF WORD; 			// (NA) Temporary Block with multiple modbus reading (Caution : Double Word variables)

		AX_ReadAlarm 		  		: ARRAY [1..3] OF BOOL ; 							// (NA) Modbus Read Alarm for all modbus frames		
		AX_ReadAlarmCode			: ARRAY [1..3] OF UDINT;							// (NA) Modbus Read Alarm Code		
		AX_ReadBusy					: ARRAY [1..3] OF BOOL;								// (NA) Modbus Read Busy  
		AX_ReadCompleted			: ARRAY [1..3] OF BOOL;								// (NA) Modbus Read Completed
				
	

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="M_AlarmManagement" Id="{45efe2cd-a3e7-4948-b67c-afe4c936848e}">
      <Declaration><![CDATA[METHOD M_AlarmManagement
//////////////////
// Manages IntelliGen Alarms
/////////////////

VAR 
	// Method local variables (reinitialized at each cycle) 
	FB_AlarmCodeManager : FB_AlarmCodeManager ; 

	KK					: BYTE;		// For Loop 
	
	ComWarning			: BOOL;		// Aggregated Wcommunication warning
	ComAlarm			: BOOL;		// Aggregated communication Alarm

END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[	//Alarm
	TON_ComAlarm(IN:= (AX_ModbusRead[1].ModbusReadAlarm) AND (AX_ModbusRead[2].ModbusReadAlarm) AND (AX_ModbusRead[3].ModbusReadAlarm) , PT:= ParamTempoComAlarm, Q=> MesDataExd.MesData.MesAlarmCom) ;	

	// Alarms if ALL MODBUS frames didn't work and timeout of 15s
	
	
// ALARM CODE //
	FB_AlarmCodeManager(
		bAlarm1			:= MesDataExd.MesData.MesAlarmCom,			// Communication general alarm (desactivate if LOC) 
		bAlarm2			:= FALSE,						//
		bAlarm3			:= FALSE, 						//
		bAlarm4			:= FALSE, 		            	//  
		bAlarm5			:= FALSE, 						//
		bAlarm6			:= FALSE, 						//
		bAlarm7			:= False, 						//
		bAlarm8			:= False, 						//
		bAlarm9			:= FALSE, 						//
		bAlarm10		:= FALSE, 						//
		bAlarm11		:= FALSE,                       //
		bAlarm12		:= FALSE,                       //
		bAlarm13		:= FALSE,                       //
		bAlarm14		:= FALSE, 						//
		bAlarm15		:= FALSE, 		                //
		wAlarmCode		=>MesDataExd.MesData.MesAlarmCode);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_CP" Id="{6b111db4-4041-45ec-a764-66b796e3a7fc}">
      <Declaration><![CDATA[METHOD M_CP
//////////////////
//  Emulator
/////////////////

VAR 
	// Method local variables (reinitialized at each cycle) 
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

SUPER^.M_CP() ; 




Trig_Cmd_Read(CLK:=IN_CmdToggleRead);
	
IF Trig_Cmd_Read.Q THEN
	IN_CmdToggleRead := FALSE;
	MesDataExd.MesData.MesCP_Read := NOT MesDataExd.MesData.MesCP_Read;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Execute" Id="{09a28066-90ef-48ce-b3b2-3906ab29ea66}">
      <Declaration><![CDATA[METHOD M_Execute
//////////////////
//  Method Calls 
/////////////////

VAR 
	// Method local variables (reinitialized at each cycle) 

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInit THEN
	M_Init();
END_IF


SUPER^.M_Execute() ; ]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Read" Id="{10cc42ee-e6e2-4a19-a238-57a1f98839f0}">
      <Declaration><![CDATA[METHOD M_Read
//////////////////
//  Read Modbus Variable for PCS . 
/////////////////
VAR 
	// Method local variables (reinitialized at each cycle) 
		MW 					: FB_MergeWordsToFloat; 
		MW1					: FB_MergeWordsToDint;
		
	KK: INT;
	MesWarningCodeAkuo: INT;
	MesPTemp: REAL;
	MesQTemp: REAL;
END_VAR



]]></Declaration>
      <Implementation>
        <ST><![CDATA[// CP-Read / Write 

 

IF MesDataExd.MesData.MesCP_Read  THEN		
	
	AX_ModbusRead[1]
	(
		pDestAddr := ADR(MesBlock1_Temp),
		sIPAddr := ParamIPAddress,
		tTimeout := ParamTimeout,
		nQuantity := 2,
		ntcpport := ParamTCPPort,
		nMBAddr := 100,
		nUnitID := ParamUnitID,
		cbLength := SIZEOF(MesBlock1_Temp),
		ClockRead := ClockRead,
		Reset := CmdClearFault_G OR IN_CmdReset_L,
		ErrorId => AX_ReadAlarmCode[1],
		ModbusReadAlarm => AX_ReadAlarm[1],
		Busy => AX_ReadBusy[1]	
	);
	
	AX_ModbusRead[2]
	(
		pDestAddr := ADR(MesBlock2_Temp),
		sIPAddr := ParamIPAddress,
		tTimeout := ParamTimeout,
		nQuantity := 76,
		ntcpport := ParamTCPPort,
		nMBAddr := 200,
		nUnitID := ParamUnitID,
		cbLength := SIZEOF(MesBlock2_Temp),
		ClockRead := ClockRead,
		Reset := CmdClearFault_G OR IN_CmdReset_L,
		ErrorId => AX_ReadAlarmCode[2],
		ModbusReadAlarm => AX_ReadAlarm[2],
		Busy => AX_ReadBusy[2]	
	);
	
	AX_ModbusRead[3]
	(
		pDestAddr := ADR(MesBlock3_Temp),
		sIPAddr := ParamIPAddress,
		tTimeout := ParamTimeout,
		nQuantity := 38,
		ntcpport := ParamTCPPort,
		nMBAddr := 800,
		nUnitID := ParamUnitID,
		cbLength := SIZEOF(MesBlock3_Temp),
		ClockRead := ClockRead,
		Reset := CmdClearFault_G OR IN_CmdReset_L,
		ErrorId => AX_ReadAlarmCode[3],
		ModbusReadAlarm => AX_ReadAlarm[3],
		Busy => AX_ReadBusy[3]	
	);
	
	FOR KK := 1 TO 3 DO
		AX_ReadCompleted[KK] := NOT AX_ReadAlarm[KK] AND NOT AX_ReadBusy[KK];
	END_FOR
	
MesDataExd.MesState1 := MesBlock1_Temp[1];
MesDataExd.MesState2 := MesBlock1_Temp[2];
	
	MW( WORD_STRONG:= MesBlock2_Temp[ 1], 	WORD_WEAK := MesBlock2_Temp[ 2],	VAR_OUT := MesDataExd.MesData.MesV1);
	MW( WORD_STRONG:= MesBlock2_Temp[ 3], 	WORD_WEAK := MesBlock2_Temp[ 4],	VAR_OUT := MesDataExd.MesData.MesV2);
	MW( WORD_STRONG:= MesBlock2_Temp[ 5], 	WORD_WEAK := MesBlock2_Temp[ 6],	VAR_OUT := MesDataExd.MesData.MesV3);
	MW( WORD_STRONG:= MesBlock2_Temp[ 7], 	WORD_WEAK := MesBlock2_Temp[ 8],	VAR_OUT := MesDataExd.MesVN);
	MW( WORD_STRONG:= MesBlock2_Temp[ 9], 	WORD_WEAK := MesBlock2_Temp[10],	VAR_OUT := MesDataExd.MesData.MesI1);
	MW( WORD_STRONG:= MesBlock2_Temp[11], 	WORD_WEAK := MesBlock2_Temp[12],	VAR_OUT := MesDataExd.MesData.MesI2);
	MW( WORD_STRONG:= MesBlock2_Temp[13], 	WORD_WEAK := MesBlock2_Temp[14],	VAR_OUT := MesDataExd.MesData.MesI3);
	MW( WORD_STRONG:= MesBlock2_Temp[15], 	WORD_WEAK := MesBlock2_Temp[16],	VAR_OUT := MesDataExd.MesData.MesIN);
	MW( WORD_STRONG:= MesBlock2_Temp[17], 	WORD_WEAK := MesBlock2_Temp[18], 	VAR_OUT := MesDataExd.MesData.MesU12);
	MW( WORD_STRONG:= MesBlock2_Temp[19], 	WORD_WEAK := MesBlock2_Temp[20], 	VAR_OUT := MesDataExd.MesData.MesU23);
	MW( WORD_STRONG:= MesBlock2_Temp[21], 	WORD_WEAK := MesBlock2_Temp[22], 	VAR_OUT := MesDataExd.MesData.MesU31);
	MW( WORD_STRONG:= MesBlock2_Temp[23], 	WORD_WEAK := MesBlock2_Temp[24],  VAR_OUT := MesDataExd.MesData.MesV);
	MW( WORD_STRONG:= MesBlock2_Temp[25], 	WORD_WEAK := MesBlock2_Temp[26],  VAR_OUT := MesDataExd.MesData.MesI);
	MW( WORD_STRONG:= MesBlock2_Temp[27], 	WORD_WEAK := MesBlock2_Temp[28],  VAR_OUT := MesDataExd.MesData.MesP1);
	MW( WORD_STRONG:= MesBlock2_Temp[29], 	WORD_WEAK := MesBlock2_Temp[30],  VAR_OUT := MesDataExd.MesData.MesP2);
	MW( WORD_STRONG:= MesBlock2_Temp[31], 	WORD_WEAK := MesBlock2_Temp[32],  VAR_OUT := MesDataExd.MesData.MesP3);
	MW( WORD_STRONG:= MesBlock2_Temp[33], 	WORD_WEAK := MesBlock2_Temp[34],  VAR_OUT := MesPTemp);
	MW( WORD_STRONG:= MesBlock2_Temp[35], 	WORD_WEAK := MesBlock2_Temp[36],  VAR_OUT := MesDataExd.MesData.MesQ1);
	MW( WORD_STRONG:= MesBlock2_Temp[37], 	WORD_WEAK := MesBlock2_Temp[38],  VAR_OUT := MesDataExd.MesData.MesQ2);
	MW( WORD_STRONG:= MesBlock2_Temp[39], 	WORD_WEAK := MesBlock2_Temp[40],  VAR_OUT := MesDataExd.MesData.MesQ3);
	MW( WORD_STRONG:= MesBlock2_Temp[41], 	WORD_WEAK := MesBlock2_Temp[42],  VAR_OUT := MesQTemp);
	MW( WORD_STRONG:= MesBlock2_Temp[43], 	WORD_WEAK := MesBlock2_Temp[44],  VAR_OUT := MesDataExd.MesData.MesS1);
	MW( WORD_STRONG:= MesBlock2_Temp[45], 	WORD_WEAK := MesBlock2_Temp[46],  VAR_OUT := MesDataExd.MesData.MesS2);
	MW( WORD_STRONG:= MesBlock2_Temp[47], 	WORD_WEAK := MesBlock2_Temp[48],  VAR_OUT := MesDataExd.MesData.MesS3);
	MW( WORD_STRONG:= MesBlock2_Temp[49], 	WORD_WEAK := MesBlock2_Temp[50],  VAR_OUT := MesDataExd.MesData.MesS);
	MW( WORD_STRONG:= MesBlock2_Temp[75], 	WORD_WEAK:= MesBlock2_Temp[76], VAR_OUT:= MesDataExd.MesData.MesFreq);
																			
																			
	MW( WORD_STRONG:= MesBlock3_Temp[01], 	WORD_WEAK := MesBlock3_Temp[02], VAR_OUT:= MesDataExd.MesEPerPulse);
	MW1( WORD_STRONG:= MesBlock3_Temp[07], 	WORD_WEAK := MesBlock3_Temp[08], Size := 2, fix := 0, signed := FALSE, VAR_OUT := MesDataExd.MesEac1_dmd);
	MW1( WORD_STRONG:= MesBlock3_Temp[09], 	WORD_WEAK := MesBlock3_Temp[10], Size := 2, fix := 0, signed := FALSE, VAR_OUT := MesDataExd.MesEac2_dmd);
	MW1( WORD_STRONG:= MesBlock3_Temp[11], 	WORD_WEAK := MesBlock3_Temp[12], Size := 2, fix := 0, signed := FALSE, VAR_OUT := MesDataExd.MesEac3_dmd);
	MW1( WORD_STRONG:= MesBlock3_Temp[13], 	WORD_WEAK := MesBlock3_Temp[14], Size := 2, fix := 0, signed := FALSE, VAR_OUT := MesDataExd.MesEac_dmd );
	MW1( WORD_STRONG:= MesBlock3_Temp[15], 	WORD_WEAK := MesBlock3_Temp[16], Size := 2, fix := 0, signed := FALSE, VAR_OUT := MesDataExd.MesEac1_sup);
	MW1( WORD_STRONG:= MesBlock3_Temp[17], 	WORD_WEAK := MesBlock3_Temp[18], Size := 2, fix := 0, signed := FALSE, VAR_OUT := MesDataExd.MesEac2_sup);
	MW1( WORD_STRONG:= MesBlock3_Temp[19], 	WORD_WEAK := MesBlock3_Temp[20], Size := 2, fix := 0, signed := FALSE, VAR_OUT := MesDataExd.MesEac3_sup);
	MW1( WORD_STRONG:= MesBlock3_Temp[21], 	WORD_WEAK := MesBlock3_Temp[22], Size := 2, fix := 0, signed := FALSE, VAR_OUT := MesDataExd.MesEac_sup );
	MW1( WORD_STRONG:= MesBlock3_Temp[23], 	WORD_WEAK := MesBlock3_Temp[24], Size := 2, fix := 0, signed := FALSE, VAR_OUT := MesDataExd.MesEreac1_ind);
	MW1( WORD_STRONG:= MesBlock3_Temp[25], 	WORD_WEAK := MesBlock3_Temp[26], Size := 2, fix := 0, signed := FALSE, VAR_OUT := MesDataExd.MesEreac2_ind);
	MW1( WORD_STRONG:= MesBlock3_Temp[27], 	WORD_WEAK := MesBlock3_Temp[28], Size := 2, fix := 0, signed := FALSE, VAR_OUT := MesDataExd.MesEreac3_ind);
	MW1( WORD_STRONG:= MesBlock3_Temp[29], 	WORD_WEAK := MesBlock3_Temp[30], Size := 2, fix := 0, signed := FALSE, VAR_OUT := MesDataExd.MesEreac_ind );
	MW1( WORD_STRONG:= MesBlock3_Temp[31], 	WORD_WEAK := MesBlock3_Temp[32], Size := 2, fix := 0, signed := FALSE, VAR_OUT := MesDataExd.MesEreac1_cap);
	MW1( WORD_STRONG:= MesBlock3_Temp[33], 	WORD_WEAK := MesBlock3_Temp[34], Size := 2, fix := 0, signed := FALSE, VAR_OUT := MesDataExd.MesEreac2_cap);
	MW1( WORD_STRONG:= MesBlock3_Temp[35], 	WORD_WEAK := MesBlock3_Temp[36], Size := 2, fix := 0, signed := FALSE, VAR_OUT := MesDataExd.MesEreac3_cap);
	MW1( WORD_STRONG:= MesBlock3_Temp[37], 	WORD_WEAK := MesBlock3_Temp[38], Size := 2, fix := 0, signed := FALSE, VAR_OUT := MesDataExd.MesEreac_cap);
	
MesDataExd.CalEac1_dmd      := MesDataExd.MesEac1_dmd        * MesDataExd.MesEPerPulse ;
MesDataExd.CalEac2_dmd      := MesDataExd.MesEac2_dmd        * MesDataExd.mesEperpulse ;
MesDataExd.CalEac3_dmd      := MesDataExd.MesEac3_dmd        * MesDataExd.mesEperpulse ;
MesDataExd.CalEac_dmd       := MesDataExd.MesEac_dmd         * MesDataExd.mesEperpulse ;
MesDataExd.CalEac1_sup      := MesDataExd.MesEac1_sup        * MesDataExd.mesEperpulse ;
MesDataExd.CalEac2_sup      := MesDataExd.MesEac2_sup        * MesDataExd.mesEperpulse ;
MesDataExd.CalEac3_sup      := MesDataExd.MesEac3_sup        * MesDataExd.mesEperpulse ;
MesDataExd.CalEac_sup       := MesDataExd.MesEac_sup         * MesDataExd.mesEperpulse ;
MesDataExd.CalEreac1_ind    := MesDataExd.MesEreac1_ind      * MesDataExd.mesEperpulse ;
MesDataExd.CalEreac2_ind    := MesDataExd.MesEreac2_ind      * MesDataExd.mesEperpulse ;
MesDataExd.CalEreac3_ind    := MesDataExd.MesEreac3_ind      * MesDataExd.mesEperpulse ;
MesDataExd.CalEreac_ind     := MesDataExd.MesEreac_ind       * MesDataExd.mesEperpulse ;
MesDataExd.CalEreac1_cap    := MesDataExd.MesEreac1_cap      * MesDataExd.mesEperpulse ;
MesDataExd.CalEreac2_cap    := MesDataExd.MesEreac2_cap      * MesDataExd.mesEperpulse ;
MesDataExd.CalEreac3_cap    := MesDataExd.MesEreac3_cap      * MesDataExd.mesEperpulse ;
MesDataExd.CalEreac_cap     := MesDataExd.MesEreac_cap       * MesDataExd.mesEperpulse ;
	
	// Changement signe P 
	
MesDataExd.MesData.MesP := -MesPTemp/1000;
MesDataExd.MesData.MesQ := -MesQTemp/1000;
MesDataExd.MesData.MesU := SQRT(3)*MesDataExd.MesData.MesV;
	
	IF ABS(MesDataExd.MesData.MesP) > 0 THEN
	MesDataExd.MesData.MesTanPhi := MesDataExd.MesData.MesQ / ABS(MesDataExd.MesData.MesP);
	END_IF


END_IF
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_PM_Q100">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_PM_Q100.M_AlarmManagement">
      <LineId Id="257" Count="0" />
      <LineId Id="346" Count="0" />
      <LineId Id="348" Count="0" />
      <LineId Id="331" Count="0" />
      <LineId Id="259" Count="0" />
      <LineId Id="330" Count="0" />
      <LineId Id="260" Count="17" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_PM_Q100.M_CP">
      <LineId Id="79" Count="13" />
      <LineId Id="55" Count="0" />
    </LineIds>
    <LineIds Name="FB_PM_Q100.M_Execute">
      <LineId Id="24" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="45" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_PM_Q100.M_Read">
      <LineId Id="338" Count="0" />
      <LineId Id="340" Count="2" />
      <LineId Id="213" Count="1" />
      <LineId Id="14" Count="15" />
      <LineId Id="67" Count="0" />
      <LineId Id="52" Count="14" />
      <LineId Id="32" Count="1" />
      <LineId Id="69" Count="14" />
      <LineId Id="68" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="96" Count="1" />
      <LineId Id="99" Count="3" />
      <LineId Id="98" Count="0" />
      <LineId Id="103" Count="4" />
      <LineId Id="110" Count="1" />
      <LineId Id="108" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="115" Count="2" />
      <LineId Id="114" Count="0" />
      <LineId Id="119" Count="2" />
      <LineId Id="113" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="131" Count="16" />
      <LineId Id="287" Count="15" />
      <LineId Id="286" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="176" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="231" Count="0" />
      <LineId Id="268" Count="0" />
      <LineId Id="320" Count="0" />
      <LineId Id="177" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="179" Count="1" />
      <LineId Id="196" Count="1" />
      <LineId Id="215" Count="0" />
      <LineId Id="195" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>