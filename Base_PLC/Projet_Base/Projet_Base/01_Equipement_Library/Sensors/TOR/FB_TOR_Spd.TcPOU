<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="FB_TOR_Spd" Id="{fa69231e-2982-462b-b45b-3d260d5fc3ac}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_TOR_Spd EXTENDS FB_TOR_Base
//////////////////
//  Surge Protection Device
//////////////////
VAR_INPUT PERSISTENT
	// Parameters of the Object (instance/model specific) 
	ParamTempoEs :TIME:=T#5S;(*  (s)Tempo before raising an alarm*)
END_VAR

VAR_OUTPUT
	//Child objects
	
END_VAR

VAR_INPUT
	// I/O Inputs 		                                     				
		
			MesDataExd			: TOR_Standard ;  

END_VAR

VAR
	//M_ALARMMANAGEMENT VARIABLES//
		FB_PermAlarm				: SR ;					// (NA) FB to maintain Fire Alarm even if sensor stop detection (burn) .
		TON_ES						: TON ; 
 
	//M_STATEMANAGER VARIABLES//

		
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[

]]></ST>
    </Implementation>
    <Method Name="M_AlarmManagement" Id="{35bb5a6a-dee7-40fe-abc3-be7990159e46}">
      <Declaration><![CDATA[METHOD M_AlarmManagement
//////////////////
// Manages Smoke detector alarms and warnings
/////////////////

VAR 
	// Method local variables (reinitialized at each cycle) 
	FB_AlarmCodeManager			: FB_AlarmCodeManager ; 

END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Detection Variables
TON_ES(IN:= MesDataExd.MesData.MesAlarmState , PT:= ParamTempoEs ) ; 
FB_PermAlarm(SET1 := TON_ES.Q  , Reset := CmdClearFault_G OR IN_CmdReset_L ); // SR FB for keep fire if burn .

// ALARM CODE //
	FB_AlarmCodeManager(
		bAlarm1			:= FB_PermAlarm.Q1 ,  														// Surge protection triggered	
		bAlarm2			:= SEL(ParamNbSensors<>1,FALSE, IN_MesState1_IO <> IN_MesState2_IO), 		// UNcoherent measure
		bAlarm3			:=FALSE, 																	// 
		bAlarm4			:=FALSE, 																	// 
		bAlarm5			:=FALSE, 																	//	
		bAlarm6			:=FALSE,                                                                    //
		bAlarm7			:=FALSE,                                                                    //
		bAlarm8			:=FALSE,                                                                    //
		bAlarm9			:=FALSE,                                                                    //
		bAlarm10		:=FALSE,                                                                    //
		bAlarm11		:=FALSE,                                                                    //
		bAlarm12		:=FALSE,                                                                    //
		bAlarm13		:=FALSE,                                                                    //
		bAlarm14		:=FALSE,                                                                    //
		bAlarm15		:=FALSE,                                                                    //
		wAlarmCode		=>MesDataExd.MesData.MesAlarmCode );
		
// WARNING CODE //
	FB_AlarmCodeManager(
		bAlarm1			:= IN_MesState1_IO OR  IN_MesState2_IO,	  									// At least one detector is ON 
		bAlarm2			:=FALSE, 																	// 
		bAlarm3			:=FALSE, 																	// 
		bAlarm4			:=FALSE, 																	// 
		bAlarm5			:=FALSE, 																	//
		bAlarm6			:=FALSE,        															//
		bAlarm7			:=FALSE,        															//
		bAlarm8			:=FALSE,        															//
		bAlarm9			:=FALSE,        															//
		bAlarm10		:=FALSE,        															//
		bAlarm11		:=FALSE,        															//
		bAlarm12		:=FALSE,        															//
		bAlarm13		:=FALSE,        															//
		bAlarm14		:=FALSE,        															//
		bAlarm15		:=FALSE,        															//
		wAlarmCode			=>MesDataExd.MesData.MesWarningCode);
		
// EVENT CODE //
	FB_AlarmCodeManager(
		bAlarm1			:= IN_MesState1_IO, 															// First sensor is ON
		bAlarm2			:= IN_MesState2_IO, 															// Second sensor is ON
		bAlarm3			:= FALSE, 																		// 
		bAlarm4			:= FALSE, 																		// 
		bAlarm5			:= FALSE, 																		//			
		bAlarm6			:= FALSE,                           											//
		bAlarm7			:= FALSE,                           											//
		bAlarm8			:= FALSE,                           											//
		bAlarm9			:= FALSE,                           											//
		bAlarm10		:= FALSE,                           											//
		bAlarm11		:= FALSE,                           											//
		bAlarm12		:= FALSE,                           											//
		bAlarm13		:= FALSE,                           											//
		bAlarm14		:= FALSE,                           											//
		bAlarm15		:= FALSE,                           											//
		wAlarmCode		=>MesDataExd.MesData.MesEventCode);]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Execute" Id="{f63c3808-01c7-4be7-9041-7c2c32d69a96}">
      <Declaration><![CDATA[METHOD M_Execute
//////////////////
//  Method Calls 
/////////////////

VAR 
	// Method local variables (reinitialized at each cycle) 

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
	
	IF ParamNbSensors = 9 THEN // Use of contactor bi-stable No and NC
		IN_MesState2_IO := NOT IN_MesState2_IO;
	END_IF
SUPER^.M_Execute() ; 
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Init" Id="{0fefbf28-7e59-4aa8-8148-c47e5cef9e61}">
      <Declaration><![CDATA[METHOD M_Init
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//A1_SPD_Aux.ParamAtleastOne := TRUE ; 
//A1_SPD_Aux.ParamNbSensors := 1 ; 
//A1_SPD_Aux.ParamCableCutSecurity := TRUE ; 	]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_StateManager" Id="{849bb065-97eb-4968-bcbe-0ec09b484bd4}">
      <Declaration><![CDATA[METHOD M_StateManager
//////////////////
// Detect when fire occurs
/////////////////

VAR 
	// Method local variables (reinitialized at each cycle)
 	MesStateInterm1 : BOOL;
	MesStateInterm2 : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF ParamCableCutSecurity THEN
	MesStateInterm1 := NOT IN_MesState1_IO ; 
	MesStateInterm2 := NOT IN_MesState2_IO ; 
ELSE 
	MesStateInterm1 := IN_MesState1_IO;
	MesStateInterm2 := IN_MesState2_IO;
END_IF

IF ParamNbSensors = 1 THEN 
	MesStateInterm2 := MesStateInterm1 ;
END_IF

IF ParamAtleastOne THEN 
MesDataExd.MesData.MesAlarmState := MesStateInterm1 OR MesStateInterm2 ; 
ELSE
MesDataExd.MesData.MesAlarmState := MesStateInterm1 AND MesStateInterm2 ; 
END_IF

R_TRIGAlarm(CLK:= MesDataExd.MesData.MesAlarmState ) ; 
IF R_TRIGAlarm.Q THEN
	MesCountAlarm :=  MIN(MesCountAlarm + 1 ,4294967295 ) ; 
ELSIF IN_ResetCounter THEN 
	MesCountAlarm := 0 ; 
END_IF

MesDataExd.MesData.MesCountAlarm	:= MesCountAlarm ; 

]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_TOR_Spd">
      <LineId Id="3" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_TOR_Spd.M_AlarmManagement">
      <LineId Id="95" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="96" Count="56" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_TOR_Spd.M_Execute">
      <LineId Id="7" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_TOR_Spd.M_Init">
      <LineId Id="6" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_TOR_Spd.M_StateManager">
      <LineId Id="153" Count="0" />
      <LineId Id="110" Count="2" />
      <LineId Id="155" Count="0" />
      <LineId Id="157" Count="1" />
      <LineId Id="113" Count="2" />
      <LineId Id="169" Count="0" />
      <LineId Id="117" Count="6" />
      <LineId Id="135" Count="1" />
      <LineId Id="124" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="141" Count="1" />
      <LineId Id="138" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>