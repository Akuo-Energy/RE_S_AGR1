<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_INV_Power_One" Id="{7d9fe017-ba92-4f81-96c0-c1765e1acd42}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_INV_Power_One EXTENDS FB_INV_Base
//////////////////
// Power One ( ABB) inverters ) 
// PT1: 
// PT2: 18 BJ
// PT3:	
// PT4: 18 BJ
//////////////////
VAR_INPUT PERSISTENT
	// Parameters of the Object (instance specific) 

	(* ajouter parametres ID pour les fct modbus *)
	ParamUnitID 				: BYTE  := 1; 			  (* (NA)   SMA Modbus Unit ID. *)
	ParamFunctionReadModbus		: BYTE := 4 ; (* (NA)   Modbus Function. *)
	Master_slave_Calculation 	: BOOL; //Gestion de la soustraction des modules
	WriteTest					: UINT := 0;
	
END_VAR


VAR_INPUT
	
	IN_SetptTanPhi				: REAL ; // (p.u) Setpt Tanphi 
	MesDataExd					: INV_ClusterPowerOne;
END_VAR


VAR_OUTPUT
	//Child objects

	OUT_CmdSetpt420_IO				: INT;

END_VAR

VAR
	// M_ALARMMNGMT VARIABLES //
	
	// M_READ VARIABLES//

		FB_ModbusRTU	          	: FB_ModbusRTU; 	            // (NA) FB for Modbus Reading

		RTrigI						: R_TRIG;
		InputStructRead 			: Struct_InputRTU ; 
		InputStructRead_Null		: Struct_InputRTU ; 
		bReadCompleted 				: BOOL;

		InverterNumber				: BYTE;
		Steps						: INT:=1;
		MesBlock_Temp 				: ARRAY[1..18] OF ARRAY [0..66] OF WORD ; 			// (NA) Temporary Block with multiple modbus reading (Caution : Double Word variables)
		MesBlock_Temp_Anemo			: ARRAY[0..128] OF WORD;
		AX_bRead 					: ARRAY[0..18] OF BOOL; 
		CalAllCompleted				: BOOL; 
		CalAllBugged				: BOOL; 
		TON_AllBugged				: TON;
		TRIG_AllBugged				: R_TRIG;
		
		ReadError					: BOOL; //FB Modbus en error

		AX_Start_Adresse			: ARRAY [1..18] OF WORD :=[228,328,428,528,628,728,828,928,1028,1128,1228,1328,1428,1528,1628,1728,1828,1928];  // First Module 228, 7module 628
		DecalageInvModule			: INT;
		MesTempPSlave				: ARRAY [1..9] OF ARRAY [1..4] OF REAL;
		MesTempPMaster				: ARRAY [1..9] OF ARRAY [1..4] OF REAL;
		MesTempPos					: ARRAY [1..9] OF INT;
		Nb_DataBlockModules			: WORD:=65;

	// M_INIT //
		OutFBCompleteted 	        : BOOL;
	
	// M_STARTSTOP//
	// M_CP
	// M_STATEMANAGER//
	
	//M_EXECUTE VARIABLES //
		TP_READ						: LTP;  //Tempo de cadencement FB Modbus
		RTrig						: R_Trig; //Front montant sur TP_READ.Q
		ReadBusy					: BOOL;	//FB Modbus en busy
	//EMULATOR VARIABLES //




		
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[

]]></ST>
    </Implementation>
    <Method Name="M_Acknowledge" Id="{796ff6c8-6170-4f59-8109-5410bca784cf}">
      <Declaration><![CDATA[METHOD M_Acknowledge
VAR
		//Each cycle
	Temp_Alarm	:BOOL:=False;	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_AlarmManagement" Id="{2826b8c9-1d04-4eb3-9969-320ff5ad97e3}">
      <Declaration><![CDATA[METHOD M_AlarmManagement
//////////////////
// Manages IntelliGen Alarms
/////////////////

VAR 
	// Method local variables (reinitialized at each cycle) 
	FB_AlarmCodeManager : FB_AlarmCodeManager ; 
	InvWarning		: ARRAY [1..3] OF BOOL;
	InvAlarm		: ARRAY [1..3] OF BOOL;
	KK				: BYTE;		// For Loop 
	

END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//COMMUNICATION//
// CALC INVERT STAT ERREUR //
	//INV 1
		InvWarning[1]	:= MesDataExd.AX_INV[1].AX_PowerCol[1].MesAlarmID > 0 OR MesDataExd.AX_INV[1].AX_PowerCol[2].MesAlarmID > 0 OR MesDataExd.AX_INV[1].AX_PowerCol[3].MesAlarmID > 0 
							OR MesDataExd.AX_INV[1].AX_PowerCol[4].MesAlarmID > 0 OR MesDataExd.AX_INV[1].AX_PowerCol[5].MesAlarmID > 0 OR MesDataExd.AX_INV[1].AX_PowerCol[6].MesAlarmID > 0;
		InvAlarm[1]		:= MesDataExd.AX_INV[1].AX_PowerCol[1].MesAlarmID > 0 AND MesDataExd.AX_INV[1].AX_PowerCol[2].MesAlarmID > 0 AND MesDataExd.AX_INV[1].AX_PowerCol[3].MesAlarmID > 0 
							AND MesDataExd.AX_INV[1].AX_PowerCol[4].MesAlarmID > 0 AND MesDataExd.AX_INV[1].AX_PowerCol[5].MesAlarmID > 0 AND MesDataExd.AX_INV[1].AX_PowerCol[6].MesAlarmID > 0;
	//INV 2
		InvWarning[2]	:= MesDataExd.AX_INV[2].AX_PowerCol[1].MesAlarmID > 0 OR MesDataExd.AX_INV[2].AX_PowerCol[2].MesAlarmID > 0 OR MesDataExd.AX_INV[2].AX_PowerCol[3].MesAlarmID > 0 
							OR MesDataExd.AX_INV[2].AX_PowerCol[4].MesAlarmID > 0 OR MesDataExd.AX_INV[2].AX_PowerCol[5].MesAlarmID > 0 OR MesDataExd.AX_INV[2].AX_PowerCol[6].MesAlarmID > 0;
		InvAlarm[2]		:= MesDataExd.AX_INV[2].AX_PowerCol[1].MesAlarmID > 0 AND MesDataExd.AX_INV[2].AX_PowerCol[2].MesAlarmID > 0 AND MesDataExd.AX_INV[2].AX_PowerCol[3].MesAlarmID > 0 
							AND MesDataExd.AX_INV[2].AX_PowerCol[4].MesAlarmID > 0 AND MesDataExd.AX_INV[2].AX_PowerCol[5].MesAlarmID > 0 AND MesDataExd.AX_INV[2].AX_PowerCol[6].MesAlarmID > 0;	
	//INV 3
		InvWarning[3]	:= MesDataExd.AX_INV[3].AX_PowerCol[1].MesAlarmID > 0 OR MesDataExd.AX_INV[3].AX_PowerCol[2].MesAlarmID > 0 OR MesDataExd.AX_INV[3].AX_PowerCol[3].MesAlarmID > 0 
							OR MesDataExd.AX_INV[3].AX_PowerCol[4].MesAlarmID > 0 OR MesDataExd.AX_INV[3].AX_PowerCol[5].MesAlarmID > 0 OR MesDataExd.AX_INV[3].AX_PowerCol[6].MesAlarmID > 0;
		InvAlarm[3]		:= MesDataExd.AX_INV[3].AX_PowerCol[1].MesAlarmID > 0 AND MesDataExd.AX_INV[3].AX_PowerCol[2].MesAlarmID > 0 AND MesDataExd.AX_INV[3].AX_PowerCol[3].MesAlarmID > 0 
							AND MesDataExd.AX_INV[3].AX_PowerCol[4].MesAlarmID > 0 AND MesDataExd.AX_INV[3].AX_PowerCol[5].MesAlarmID > 0 AND MesDataExd.AX_INV[3].AX_PowerCol[6].MesAlarmID > 0;
	
						

	//Warning
	MesWarningCom 	:= ReadError ;  

	//Alarm
	TON_ComAlarm(IN:= MesWarningCom  , PT:= ParamTempoComAlarm, Q=>MesDataExd.MesAlarmCom) ;	// Alarms if ALL TRAM MODBUS did not work and timeout of 15s

// ALARM CODE //
	FB_AlarmCodeManager(
		bAlarm1			:= InvAlarm[1],		// All module are in alarm Inverter 1
		bAlarm2			:= InvAlarm[2],		// All module are in alarm Inverter 2
		bAlarm3			:= InvAlarm[3],		// All module are in alarm Inverter 3
		bAlarm4			:= MesDataExd.MesAlarmCom, 	//AT Least one Com error with 18 x Modules during more than 30s         
		bAlarm5			:= FALSE,
		bAlarm6			:= FALSE,
		bAlarm7			:= FALSE,
		bAlarm8			:= FALSE,
		bAlarm9			:= FALSE,
		bAlarm10		:= FALSE,
		bAlarm11		:= FALSE, 
		bAlarm12		:= FALSE, 
		bAlarm13		:= FALSE, 
		bAlarm14		:= FALSE, 													// 
		bAlarm15		:= FALSE,
		wAlarmCode		=> MesDataExd.MesAlarmCode);

// WARNING CODE //
	FB_AlarmCodeManager(
 		bAlarm1			:= INVWarning[1],//AT LEast one moduls of inverter 1 in alarm
		bAlarm2			:= INVWarning[2],//AT LEast one moduls of inverter 2 in alarm
		bAlarm3			:= INVWarning[3],//AT LEast one moduls of inverter 3 in alarm
		bAlarm4			:= MesWarningCom,//AT Least one Com error with 18 x Modules
		bAlarm5			:= FALSE, 		
		bAlarm6			:= FALSE, 		
		bAlarm7			:= FALSE, 
		bAlarm8			:= FALSE, 
		bAlarm9			:= FALSE, 
		bAlarm10		:= FALSE, 
		bAlarm11		:= FALSE, 
		bAlarm12		:= FALSE, 
		bAlarm13		:= FALSE, 
		bAlarm14		:= FALSE, 
		bAlarm15		:= FALSE, 
		wAlarmCode		=> MesDataExd.MesWarningCode);	

		
// EVENT CODE //
	FB_AlarmCodeManager(
		bAlarm1			:= RS_StartStop.Q1, 			// Start command
		bAlarm2			:= NOT RS_StartStop.Q1, 		// Stop command
		bAlarm3			:= FALSE,	
		bAlarm4			:= FALSE, 	
		bAlarm5			:= FALSE, 
		bAlarm6			:= FALSE, 
		bAlarm7			:= FALSE, 
		bAlarm8			:= FALSE, 
		bAlarm9			:= FALSE, 
		bAlarm10		:= FALSE, 
		bAlarm11		:= FALSE, 
		bAlarm12		:= FALSE, 
		bAlarm13		:= FALSE, 
		bAlarm14		:= FALSE, 
		bAlarm15		:= FALSE, 
		wAlarmCode		=> MesDataExd.MesEventCode);]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_CP" Id="{4f6e5f87-7173-4aff-9ecf-627a88a0f5e4}">
      <Declaration><![CDATA[METHOD M_CP
//////////////////
//  Emulator
/////////////////

VAR 
	// Method local variables (reinitialized at each cycle) 
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

SUPER^.M_CP() ; 




Trig_Cmd_Read(CLK:=IN_CmdToggleRead);
//Trig_Cmd_Write(CLK:=IN_CmdToggleWrite);
//	
IF Trig_Cmd_Read.Q THEN
	IN_CmdToggleRead := FALSE;
	MesDataExd.AX_INV[1].MesData.MesCP_Read := NOT MesDataExd.AX_INV[1].MesData.MesCP_Read;
END_IF
//
//
//IF Trig_Cmd_Write.Q THEN
//	IN_CmdToggleWrite := FALSE;
//	MesDataExd.MesData.MesCP_Write := NOT MesDataExd.MesData.MesCP_Write;
//END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Curtail" Id="{0b18ccff-1b50-4c57-97fa-aa8ce1677a00}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Curtail'}
METHOD M_Curtail
//////////////////
// Write Curtail Command through modbus to PV inverters.  
//////////////////
VAR 
	// Method local variables (reinitialized at each cycle) 
	Threshold 			 : INT:=5 ;					// (0-100) Change percentage of Range to trigger the write command. 

	CHECK				 : BOOL; 					// Check if changes. 
	WriteCmdInvMode		: BOOL;

	MesSEPAM	: ProtectRelay_S48;
	

END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[



MesDataExd.OUT_SetptTanPhi := IN_SetptTanPhi ; 
MesDataExd.OUT_SetptP		:= ParamPn ; 
MesDataExd.OUT_CmdStart	:= TRUE ;
MesDataExd.OUT_CmdStop	:= FALSE ;

	
OUT_CmdSetpt420_IO := 32767- REAL_TO_INT((32767 * (MesDataExd.OUT_SetptTanPhi+0.484)/(0.968))  );		// ? ? 
 
SUPER^.M_Curtail() ; ]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Execute" Id="{c88c7fa6-a47a-4e55-a47f-cd406a669ece}">
      <Declaration><![CDATA[METHOD M_Execute
//////////////////
//  Method Calls 
/////////////////

VAR 
	// Method local variables (reinitialized at each cycle) 

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF  bInit THEN
	M_Init();
END_IF

(*
TP_Read(In := NOT(TP_Read.Q) AND NOT ReadBusy);
RTrig(CLK := TP_Read.Q);
ClockRead := RTrig.Q;
*)
SUPER^.M_Execute() ; ]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Init" Id="{368ea559-3306-4965-83e8-3e8149c3d489}">
      <Declaration><![CDATA[METHOD M_Init
VAR_INPUT
END_VAR

VAR

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//ParamPn := 990 ;
bInit := FALSE;
//FB_ModbusRTU() ;
AX_bRead[1] := TRUE ; 
(*
FB_ModbusRead(
	Inquantity		:= Nb_DataBlockModules,
	InUnitID 		:= ParamUnitID ,
	InTimeout		:= ParamTimeout,
	InInterfaceSub	:= FALSE,
	InFunctionRead	:= TRUE	);
	
	*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Read" Id="{db16c19d-8e95-44de-ba73-1597a95029c8}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Read'}
METHOD M_Read
//////////
// Read Method for SMA : Modbus reading
//////////
VAR
	// Method local variables (reinitialized at each cycle) 
	MW_32MLE		: FB_WordsToFloat32MLE;
	AX_bRead_init 		: ARRAY[0..18] OF BOOL; 
	KK					: BYTE;						 // Index to loop over modbus blocks. 	
	JJ					: BYTE;

	InclockRead: INT;
END_VAR


]]></Declaration>
      <Implementation>
        <ST><![CDATA[

IF MesDataExd.AX_INV[1].MesData.MesCP_Read  THEN	







OutFBCompleteted:=FALSE;

// MODBUS REQUEST//


	
		// Reset Structure output. 
		//InputStructRead	:= InputStructRead_Null; 
		//
		//InputStructRead.InFunction := ParamFunctionReadModbus;
		//InputStructRead.InQuantity := Nb_DataBlockModules;	
		//
		//InputStructRead.OutBusy := ADR(ReadBusy);
		//InputStructRead.OutError := ADR(ReadError);
		//InputStructRead.OutCompleted := ADR(bReadCompleted);

		FB_ModbusRTU.ReadRTU1(
				InClockRead := NOT ClockRead AND AX_bRead[Steps],
				InStartAddr :=  AX_Start_Adresse[Steps],
				InQuantity := Nb_DataBlockModules,
				InUnitID := ParamUnitID,
				InTimeout := T#1500MS,
				InAddrDest := ADR(MesBlock_Temp[Steps]),
				InFunctionRead := ParamFunctionReadModbus,
				InInterfaceSub	:= FALSE 
			);
		
		IF  FB_ModbusRTU.ReadRTU1.OutBusy AND AX_bRead[Steps]THEN 
			AX_bRead[Steps] 	:= FALSE; 
		
		END_IF	
	
		RTrigI(CLK:= FB_ModbusRTU.ReadRTU1.TmpError );
		IF FB_ModbusRTU.ReadRTU1.OutbCompleted THEN

			Steps:= SEL(Steps >= 18 , Steps +1 , 1) ;
			AX_bRead[Steps] 	:= TRUE;
			ReadError := FALSE ; 
			
		ELSIF NOT FB_ModbusRTU.ReadRTU1.OutBusy  AND  RTrigI.Q THEN
			Steps:= SEL(Steps >= 18 , Steps +1 , 1) ;
			AX_bRead[Steps] 	:= TRUE;
			ReadError := TRUE ; 
		
		END_IF

//FB_ModbusRTU() ; 

	CalAllCompleted := AX_bRead[1] AND AX_bRead[2] AND AX_bRead[3] AND AX_bRead[4] AND AX_bRead[5] AND AX_bRead[6]; 
	CalAllCompleted := CalAllCompleted AND AX_bRead[7] AND AX_bRead[8] AND AX_bRead[9] AND AX_bRead[10] AND AX_bRead[11] AND AX_bRead[12];
	CalAllCompleted := CalAllCompleted AND AX_bRead[13] AND AX_bRead[14] AND AX_bRead[15] AND AX_bRead[16] AND AX_bRead[17] AND AX_bRead[18];	
	
	CalAllBugged	:= AX_bRead[1] OR AX_bRead[2] OR AX_bRead[3] OR AX_bRead[4] OR AX_bRead[5] OR AX_bRead[6];
	CalAllBugged 	:= CalAllBugged OR AX_bRead[7] OR AX_bRead[8] OR AX_bRead[9] OR AX_bRead[10] OR AX_bRead[11] OR AX_bRead[12];
	CalAllBugged 	:= CalAllBugged OR AX_bRead[13] OR AX_bRead[14] OR AX_bRead[15] OR AX_bRead[16] OR AX_bRead[17] OR AX_bRead[18];	
	
	
	OutFBCompleteted := CalAllCompleted	;
	TON_AllBugged(IN := NOT CalAllBugged, pt := T#10S);
	TRIG_AllBugged(CLK := TON_AllBugged.Q);
	IF TRIG_AllBugged.Q THEN
		TON_AllBugged(IN := FALSE);
		AX_bRead[Steps] := TRUE;
	END_IF

	////CHECK IF ALL MODBUS REQUESTS ARE FINISHED
	IF (CalAllCompleted) THEN
		////RESETING CLOCK READ FOR EACH REQUEST
		//AX_bRead:= AX_bRead_init;
		CalAllCompleted := FALSE;
	END_IF
	MesTempPos[1] := 0;
	MesTempPos[2] := 0;
	// PROPERTIES UPDATE
	// MODBUS BLOCKS SEPARATION	& PROPERTIES UPDATE
		//INVERTER 01 - Module
	
	
	JJ := 1 ; 
	
	FOR KK := 1 TO 18 BY 1 DO
		
		IF KK =1 THEN
			//InverterNumber := 1 ;
			InverterNumber := 1;// on constate un décalage de deux bloque avec cette méthode. Ainsi , l'adresse correspondant à INV1 (AX_Start_Adresse[1] , donne un résultat dans le block 3 Block_Temp[3]. 

		END_IF

		DecalageInvModule := SEL(((KK+0) MOD 6) =0 , (KK+0) MOD 6  , 6);//KK - (6*(InverterNumber-1)) ;
			
		//Word on 1 register To INT 
		MesDataExd.AX_INV[InverterNumber].AX_PowerCol[DecalageInvModule].MesSN 				:= WORD_TO_INT(MesBlock_Temp[KK][0]);
		MesDataExd.AX_INV[InverterNumber].AX_PowerCol[DecalageInvModule].MesID_Type 	:= WORD_TO_INT(MesBlock_Temp[KK][1]);
		MesDataExd.AX_INV[InverterNumber].AX_PowerCol[DecalageInvModule].MesID_StateGlobal		:= WORD_TO_INT(MesBlock_Temp[KK][2]);
		MesDataExd.AX_INV[InverterNumber].AX_PowerCol[DecalageInvModule].MesIDState	    := WORD_TO_INT(MesBlock_Temp[KK][3]);
		MesDataExd.AX_INV[InverterNumber].AX_PowerCol[DecalageInvModule].MesAlarmID		:= WORD_TO_INT(MesBlock_Temp[KK][4]);
		// 5 et 6 is blanck
		//Word on 2 register To Float 32
		//Module Information
			//Part1
		MW_32MLE(InFirstWord:=MesBlock_Temp[KK][7],InSecondWord:=MesBlock_Temp[KK][8],OutCalReal	=>MesDataExd.AX_INV[InverterNumber].AX_PowerCol[DecalageInvModule].MesEDay);
		MW_32MLE(InFirstWord:=MesBlock_Temp[KK][9],InSecondWord:=MesBlock_Temp[KK][10],OutCalReal	=>MesDataExd.AX_INV[InverterNumber].AX_PowerCol[DecalageInvModule].MesETot);
		MW_32MLE(InFirstWord:=MesBlock_Temp[KK][11],InSecondWord:=MesBlock_Temp[KK][12],OutCalReal  =>MesDataExd.AX_INV[InverterNumber].AX_PowerCol[DecalageInvModule].MesEPartial);
		MW_32MLE(InFirstWord:=MesBlock_Temp[KK][13],InSecondWord:=MesBlock_Temp[KK][14],OutCalReal  =>MesDataExd.AX_INV[InverterNumber].AX_PowerCol[DecalageInvModule].MesEWeek);
		MW_32MLE(InFirstWord:=MesBlock_Temp[KK][15],InSecondWord:=MesBlock_Temp[KK][16],OutCalReal  =>MesDataExd.AX_INV[InverterNumber].AX_PowerCol[DecalageInvModule].MesEMonth);
		MW_32MLE(InFirstWord:=MesBlock_Temp[KK][17],InSecondWord:=MesBlock_Temp[KK][18],OutCalReal  =>MesDataExd.AX_INV[InverterNumber].AX_PowerCol[DecalageInvModule].MesEYear);
			//Part2                                                                                                      
		MW_32MLE(InFirstWord:=MesBlock_Temp[KK][33],InSecondWord:=MesBlock_Temp[KK][34],OutCalReal  =>MesDataExd.AX_INV[InverterNumber].AX_PowerCol[DecalageInvModule].MesTemp_Inv);
		MW_32MLE(InFirstWord:=MesBlock_Temp[KK][35],InSecondWord:=MesBlock_Temp[KK][36],OutCalReal  =>MesDataExd.AX_INV[InverterNumber].AX_PowerCol[DecalageInvModule].MesTemp_Supply);
		MW_32MLE(InFirstWord:=MesBlock_Temp[KK][37],InSecondWord:=MesBlock_Temp[KK][38],OutCalReal  =>MesDataExd.AX_INV[InverterNumber].AX_PowerCol[DecalageInvModule].MesTemp_Headsink);
		MW_32MLE(InFirstWord:=MesBlock_Temp[KK][39],InSecondWord:=MesBlock_Temp[KK][40],OutCalReal  =>MesDataExd.AX_INV[InverterNumber].AX_PowerCol[DecalageInvModule].MesTemp_T2);
		MW_32MLE(InFirstWord:=MesBlock_Temp[KK][41],InSecondWord:=MesBlock_Temp[KK][42],OutCalReal  =>MesDataExd.AX_INV[InverterNumber].AX_PowerCol[DecalageInvModule].MesTemp_T3);
		

		// Detect Communication Error : MesID_StateGlobal = 0 , MesAlarmID = 0 , Temp_Inv = 0 
		IF MesDataExd.AX_INV[InverterNumber].AX_PowerCol[DecalageInvModule].MesTemp_Inv = 0 
			AND MesDataExd.AX_INV[InverterNumber].AX_PowerCol[DecalageInvModule].MesID_StateGlobal = 0 
			AND MesDataExd.AX_INV[InverterNumber].AX_PowerCol[DecalageInvModule].MesAlarmID = 0 THEN  
				MesDataExd.AX_INV[InverterNumber].AX_PowerCol[DecalageInvModule].MesAlarmID := 8 ; 
		END_IF
		
	
		IF  MesDataExd.AX_INV[InverterNumber].AX_PowerCol[DecalageInvModule].MesID_Type = 1  THEN
			//Slave
			MW_32MLE(InFirstWord:=MesBlock_Temp[KK][19],InSecondWord:=MesBlock_Temp[KK][20],OutCalReal=>MesDataExd.AX_INV[InverterNumber].AX_PowerCol[DecalageInvModule].MesV);
			MW_32MLE(InFirstWord:=MesBlock_Temp[KK][21],InSecondWord:=MesBlock_Temp[KK][22],OutCalReal=>MesTempPSlave[JJ][4]);
			MesDataExd.AX_INV[InverterNumber].AX_PowerCol[DecalageInvModule].MesI := MesTempPSlave[JJ][4] ; 
			MW_32MLE(InFirstWord:=MesBlock_Temp[KK][23],InSecondWord:=MesBlock_Temp[KK][24],OutCalReal=>MesTempPSlave[JJ][1]);
			MesDataExd.AX_INV[InverterNumber].AX_PowerCol[DecalageInvModule].MesData.MesP := MesTempPSlave[JJ][1];
			MW_32MLE(InFirstWord:=MesBlock_Temp[KK][25],InSecondWord:=MesBlock_Temp[KK][26],OutCalReal=>MesDataExd.AX_INV[InverterNumber].AX_PowerCol[DecalageInvModule].MesData.MesFreq);
			MW_32MLE(InFirstWord:=MesBlock_Temp[KK][27],InSecondWord:=MesBlock_Temp[KK][28],OutCalReal=>MesTempPSlave[JJ][2]);
			MesDataExd.AX_INV[InverterNumber].AX_PowerCol[DecalageInvModule].MesData.MesPdc := MesTempPSlave[JJ][2];
			MW_32MLE(InFirstWord:=MesBlock_Temp[KK][29],InSecondWord:=MesBlock_Temp[KK][30],OutCalReal=>MesDataExd.AX_INV[InverterNumber].AX_PowerCol[DecalageInvModule].MesData.MesUdc);
			MW_32MLE(InFirstWord:=MesBlock_Temp[KK][31],InSecondWord:=MesBlock_Temp[KK][32],OutCalReal=>MesTempPSlave[JJ][3]);
			MesDataExd.AX_INV[InverterNumber].AX_PowerCol[DecalageInvModule].MesData.MesIdc := MesTempPSlave[JJ][3] ;
		ELSE      
			//Master                                                                                                               
			MW_32MLE(InFirstWord:=MesBlock_Temp[KK][55],InSecondWord:=MesBlock_Temp[KK][56],OutCalReal=>MesDataExd.AX_INV[InverterNumber].AX_PowerCol[DecalageInvModule].MesV);
			MW_32MLE(InFirstWord:=MesBlock_Temp[KK][57],InSecondWord:=MesBlock_Temp[KK][58],OutCalReal=>MesTempPMaster[JJ][4]);
			MW_32MLE(InFirstWord:=MesBlock_Temp[KK][59],InSecondWord:=MesBlock_Temp[KK][60],OutCalReal=>MesTempPMaster[JJ][1]);
			//MesDataExd.AX_INV[InverterNumber].AX_PowerCol[DecalageInvModule].MesP := MesTempPMaster[JJ][1];
			MW_32MLE(InFirstWord:=MesBlock_Temp[KK][25],InSecondWord:=MesBlock_Temp[KK][26],OutCalReal=>MesDataExd.AX_INV[InverterNumber].AX_PowerCol[DecalageInvModule].MesData.MesFreq);
			MW_32MLE(InFirstWord:=MesBlock_Temp[KK][61],InSecondWord:=MesBlock_Temp[KK][62],OutCalReal=>MesTempPMaster[JJ][2]);
			//MesDataExd.AX_INV[InverterNumber].AX_PowerCol[DecalageInvModule].MesPdc := MesTempPMaster[JJ][2];
			MW_32MLE(InFirstWord:=MesBlock_Temp[KK][63],InSecondWord:=MesBlock_Temp[KK][64],OutCalReal=>MesDataExd.AX_INV[InverterNumber].AX_PowerCol[DecalageInvModule].MesData.MesUdc);
			MW_32MLE(InFirstWord:=MesBlock_Temp[KK][65],InSecondWord:=MesBlock_Temp[KK][66],OutCalReal=>MesTempPMaster[JJ][3]); 
			MesTempPos[JJ] := DecalageInvModule ; 	// Relative Number of master module 
		END_IF
		
		IF KK MOD 2 =0 THEN
			IF Master_slave_Calculation AND MesTempPos[JJ]>0 THEN
				MesDataExd.AX_INV[InverterNumber].AX_PowerCol[MesTempPos[JJ]].MesData.MesP := MesTempPMaster[JJ][1]- MesTempPSlave[JJ][1];	// P
				MesDataExd.AX_INV[InverterNumber].AX_PowerCol[MesTempPos[JJ]].MesData.MesPdc := MesTempPMaster[JJ][2]- MesTempPSlave[JJ][2];	// Pdc
				MesDataExd.AX_INV[InverterNumber].AX_PowerCol[MesTempPos[JJ]].MesData.MesIdc :=MesTempPMaster[JJ][3]- MesTempPSlave[JJ][3];	// Idc
				MesDataExd.AX_INV[InverterNumber].AX_PowerCol[MesTempPos[JJ]].MesI := MesTempPMaster[JJ][4]- MesTempPSlave[JJ][4];	// I

				IF MesDataExd.AX_INV[InverterNumber].AX_PowerCol[MesTempPos[JJ]].MesData.MesP < 0 THEN 
					MesDataExd.AX_INV[InverterNumber].AX_PowerCol[MesTempPos[JJ]].MesData.MesP := 0 ; 
					MesDataExd.AX_INV[InverterNumber].AX_PowerCol[MesTempPos[JJ]].MesData.MesPdc := 0 ; 
					MesDataExd.AX_INV[InverterNumber].AX_PowerCol[MesTempPos[JJ]].MesData.MesIdc := 0 ; 
					MesDataExd.AX_INV[InverterNumber].AX_PowerCol[MesTempPos[JJ]].MesI := 0 ;
					MesDataExd.AX_INV[InverterNumber].AX_PowerCol[MesTempPos[JJ]].MesAlarmID := 8  ;  // Com error with master
					
				ELSIF MesDataExd.AX_INV[InverterNumber].AX_PowerCol[MesTempPos[JJ]].MesData.MesP > 50 THEN // Higher than Pnom 
					MesDataExd.AX_INV[InverterNumber].AX_PowerCol[MesTempPos[JJ]].MesAlarmID := 88  ; // Com error with Slave device 
				END_IF
				
			ELSIF MesTempPos[JJ]>0 THEN 
				MesDataExd.AX_INV[InverterNumber].AX_PowerCol[MesTempPos[JJ]].MesData.MesP := MesTempPMaster[JJ][1];	// P
				MesDataExd.AX_INV[InverterNumber].AX_PowerCol[MesTempPos[JJ]].MesData.MesPdc := MesTempPMaster[JJ][2];	// Pdc
				MesDataExd.AX_INV[InverterNumber].AX_PowerCol[MesTempPos[JJ]].MesData.MesIdc := MesTempPMaster[JJ][3];	// Idc				
				MesDataExd.AX_INV[InverterNumber].AX_PowerCol[MesTempPos[JJ]].MesI := MesTempPMaster[JJ][4];	// I					
				
			END_IF
			JJ := JJ +1;		
		END_IF
		
		// RACK informations
		IF DecalageInvModule = 6  THEN
			
			MW_32MLE(InFirstWord:=MesBlock_Temp[KK][43],InSecondWord:=MesBlock_Temp[KK][44],OutCalReal=>MesDataExd.AX_INV[InverterNumber].MesEDay);
			MW_32MLE(InFirstWord:=MesBlock_Temp[KK][45],InSecondWord:=MesBlock_Temp[KK][46],OutCalReal=>MesDataExd.AX_INV[InverterNumber].MesETot);
			MW_32MLE(InFirstWord:=MesBlock_Temp[KK][47],InSecondWord:=MesBlock_Temp[KK][48],OutCalReal=>MesDataExd.AX_INV[InverterNumber].MesEPartial);
			MW_32MLE(InFirstWord:=MesBlock_Temp[KK][49],InSecondWord:=MesBlock_Temp[KK][50],OutCalReal=>MesDataExd.AX_INV[InverterNumber].MesEWeek);
			MW_32MLE(InFirstWord:=MesBlock_Temp[KK][51],InSecondWord:=MesBlock_Temp[KK][52],OutCalReal=>MesDataExd.AX_INV[InverterNumber].MesEMonth);
			MW_32MLE(InFirstWord:=MesBlock_Temp[KK][53],InSecondWord:=MesBlock_Temp[KK][54],OutCalReal=>MesDataExd.AX_INV[InverterNumber].MesEYear);
			InverterNumber := SEL(InverterNumber=3 , InverterNumber + 1,1);
		END_IF
		
	END_FOR;
	
	//Calculation of Master/slave power
(*
	IF FALSE AND Master_slave_Calculation THEN
		//Inverter 1
			//P
			MesDataExd.AX_INV[1].AX_PowerCol[MesTempPos[1]].MesP := MesTempPMaster[1][1]- MesTempPSlave[1][1];
			MesDataExd.AX_INV[1].AX_PowerCol[MesTempPos[2]].MesP := MesTempPMaster[2][1]- MesTempPSlave[2][1];
			MesDataExd.AX_INV[1].AX_PowerCol[MesTempPos[3]].MesP := MesTempPMaster[3][1]- MesTempPSlave[3][1];
			//Pdc
			MesDataExd.AX_INV[1].AX_PowerCol[MesTempPos[1]].MesPdc := MesTempPMaster[1][2]- MesTempPSlave[1][2];
			MesDataExd.AX_INV[1].AX_PowerCol[MesTempPos[2]].MesPdc := MesTempPMaster[2][2]- MesTempPSlave[2][2];
			MesDataExd.AX_INV[1].AX_PowerCol[MesTempPos[3]].MesPdc := MesTempPMaster[3][2]- MesTempPSlave[3][2];
			
		//Inverter 2
			//P
			MesDataExd.AX_INV[2].AX_PowerCol[MesTempPos[4]].MesP := MesTempPMaster[4][1]- MesTempPSlave[4][1];
			MesDataExd.AX_INV[2].AX_PowerCol[MesTempPos[5]].MesP := MesTempPMaster[5][1]- MesTempPSlave[5][1];
			MesDataExd.AX_INV[2].AX_PowerCol[MesTempPos[6]].MesP := MesTempPMaster[6][1]- MesTempPSlave[6][1];
			//Pdc    
			MesDataExd.AX_INV[2].AX_PowerCol[MesTempPos[4]].MesPdc := MesTempPMaster[4][2]- MesTempPSlave[4][2];
			MesDataExd.AX_INV[2].AX_PowerCol[MesTempPos[5]].MesPdc := MesTempPMaster[5][2]- MesTempPSlave[5][2];
			MesDataExd.AX_INV[2].AX_PowerCol[MesTempPos[6]].MesPdc := MesTempPMaster[6][2]- MesTempPSlave[6][2];
		             
		//Inverter 3  
			//P       
			MesDataExd.AX_INV[3].AX_PowerCol[MesTempPos[7]].MesP := MesTempPMaster[7][1]- MesTempPSlave[7][1];
			MesDataExd.AX_INV[3].AX_PowerCol[MesTempPos[8]].MesP := MesTempPMaster[8][1]- MesTempPSlave[8][1];
			MesDataExd.AX_INV[3].AX_PowerCol[MesTempPos[9]].MesP := MesTempPMaster[9][1]- MesTempPSlave[9][1];
			//Pdc     
			MesDataExd.AX_INV[3].AX_PowerCol[MesTempPos[7]].MesPdc := MesTempPMaster[7][2]- MesTempPSlave[7][2];
			MesDataExd.AX_INV[3].AX_PowerCol[MesTempPos[8]].MesPdc := MesTempPMaster[8][2]- MesTempPSlave[8][2];
			MesDataExd.AX_INV[3].AX_PowerCol[MesTempPos[9]].MesPdc := MesTempPMaster[9][2]- MesTempPSlave[9][2];
	ELSE
		//Inverter 1
			MesDataExd.AX_INV[1].AX_PowerCol[MesTempPos[1]].MesP := MesTempPMaster[1][1];
			MesDataExd.AX_INV[1].AX_PowerCol[MesTempPos[2]].MesP := MesTempPMaster[2][1];
			MesDataExd.AX_INV[1].AX_PowerCol[MesTempPos[3]].MesP := MesTempPMaster[3][1];
			//Pdc     
			MesDataExd.AX_INV[1].AX_PowerCol[MesTempPos[1]].MesPdc := MesTempPMaster[1][2];
			MesDataExd.AX_INV[1].AX_PowerCol[MesTempPos[2]].MesPdc := MesTempPMaster[2][2];
			MesDataExd.AX_INV[1].AX_PowerCol[MesTempPos[3]].MesPdc := MesTempPMaster[3][2];
		//Inverter 2  
			//P      
			MesDataExd.AX_INV[2].AX_PowerCol[MesTempPos[4]].MesP := MesTempPMaster[4][1];
			MesDataExd.AX_INV[2].AX_PowerCol[MesTempPos[5]].MesP := MesTempPMaster[5][1];
			MesDataExd.AX_INV[2].AX_PowerCol[MesTempPos[6]].MesP := MesTempPMaster[6][1];
			//Pdc     
			MesDataExd.AX_INV[2].AX_PowerCol[MesTempPos[4]].MesPdc := MesTempPMaster[4][2];
			MesDataExd.AX_INV[2].AX_PowerCol[MesTempPos[5]].MesPdc := MesTempPMaster[5][2];
			MesDataExd.AX_INV[2].AX_PowerCol[MesTempPos[6]].MesPdc := MesTempPMaster[6][2];
		             
		//Inverter 3  
			//P      
			MesDataExd.AX_INV[3].AX_PowerCol[MesTempPos[7]].MesP := MesTempPMaster[7][1];
			MesDataExd.AX_INV[3].AX_PowerCol[MesTempPos[8]].MesP := MesTempPMaster[8][1];
			MesDataExd.AX_INV[3].AX_PowerCol[MesTempPos[9]].MesP := MesTempPMaster[9][1];
			//Pdc     
			MesDataExd.AX_INV[3].AX_PowerCol[MesTempPos[7]].MesPdc := MesTempPMaster[7][2];
			MesDataExd.AX_INV[3].AX_PowerCol[MesTempPos[8]].MesPdc := MesTempPMaster[8][2];
			MesDataExd.AX_INV[3].AX_PowerCol[MesTempPos[9]].MesPdc := MesTempPMaster[9][2];
	END_IF	
	*)
//Addition des puissance
	FOR KK:= 1 TO 3 DO 
		MesDataExd.AX_INV[KK].MesData.MesP := 0 ; 
		MesDataExd.AX_INV[KK].MesData.MesI := 0 ; 
		MesDataExd.AX_INV[KK].MesData.MesPdc := 0 ; 
		MesDataExd.AX_INV[KK].MesData.MesFreq :=  0 ; 
		MesDataExd.AX_INV[KK].MesData.MesIdc := 0  ; 
		MesDataExd.AX_INV[KK].MesData.MesV := 0  ; 		
		MesDataExd.AX_INV[KK].MesData.MesUdc := 0  ; 		
 		MesDataExd.AX_INV[KK].MesData.MesTemp	:= 0 ; 
		MesDataExd.AX_INV[KK].MesData.ParamPn := ParamPn/3 ; 
		
		FOR InclockRead:= 1 TO 6 DO 
			MesDataExd.AX_INV[KK].MesData.MesP  	:= MesDataExd.AX_INV[KK].MesData.MesP +	MesDataExd.AX_INV[KK].AX_PowerCol[InclockRead].MesData.MesP ;					
			MesDataExd.AX_INV[KK].MesData.MesPdc  	:= MesDataExd.AX_INV[KK].MesData.MesPdc +	MesDataExd.AX_INV[KK].AX_PowerCol[InclockRead].MesData.MesPdc ;					
			MesDataExd.AX_INV[KK].MesData.MesI  	:= MesDataExd.AX_INV[KK].MesData.MesI +	MesDataExd.AX_INV[KK].AX_PowerCol[InclockRead].MesI ;					
			MesDataExd.AX_INV[KK].MesData.MesFreq 	:= MAX(MesDataExd.AX_INV[KK].MesData.MesFreq , MesDataExd.AX_INV[KK].AX_PowerCol[InclockRead].MesData.MesFreq) ; 
			MesDataExd.AX_INV[KK].MesData.MesIdc  	:= MesDataExd.AX_INV[KK].MesData.MesIdc +	MesDataExd.AX_INV[KK].AX_PowerCol[InclockRead].MesData.MesIdc ;			
			MesDataExd.AX_INV[KK].MesData.MesUdc 	:= MAX(MesDataExd.AX_INV[KK].MesData.MesUdc , MesDataExd.AX_INV[KK].AX_PowerCol[InclockRead].MesData.MesUdc) ; 		
			MesDataExd.AX_INV[KK].MesData.MesV 	:= MAX(MesDataExd.AX_INV[KK].MesData.MesV , MesDataExd.AX_INV[KK].AX_PowerCol[InclockRead].MesV) ; 
			MesDataExd.AX_INV[KK].MesData.MesTemp 	:= MAX(MesDataExd.AX_INV[KK].MesData.MesTemp , MesDataExd.AX_INV[KK].AX_PowerCol[InclockRead].MesTemp_Inv) ; 	
		END_FOR
	

	END_FOR

END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_StateManager" Id="{6e844944-b452-4eaf-b9a2-2287e546a36f}">
      <Declaration><![CDATA[METHOD M_StateManager
//////////////////
// Detect which is the state of the inverter. IF loss of communication MesState =0 , the last inverter state is kept .  
/////////////////

VAR 
	// Method local variables (reinitialized at each cycle) 

	
	KK: INT;
	LL: INT;

	MesAll_Start	: BOOL;
	MesALO_Fault 	: BOOL;
	MesALO_Stopped	: BOOL;
	MesAll_Fault: BOOL;
	
	
	CalIDState_PowerCol: INT;
	CalNbPowerCol: INT;	
	
	
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[MesDataExd.MesNbInvConnected := 0  ; 
FOR KK:= 1  TO 3 DO 
	MesDataExd.AX_INV[KK].MesNbPowerColConnected := 0  ; 
	FOR LL:=1 TO 6 DO 
		
		CalIDState_PowerCol := MesDataExd.AX_INV[KK].AX_PowerCol[LL].MesID_StateGlobal ; 
	
		IF CalIDState_PowerCol = 6 THEN 
			MesDataExd.AX_INV[KK].MesNbPowerColConnected  := MesDataExd.AX_INV[KK].MesNbPowerColConnected + 1 ; 
		END_IF

	END_FOR	
	
	IF MesDataExd.AX_INV[KK].MesNbPowerColConnected> 0  THEN 
		MesDataExd.MesNbInvConnected := MesDataExd.MesNbInvConnected  + 1 ;  
	END_IF

END_FOR

// Check over all the powercolonnes 
//O=Stopped, 1 = MPPT, 2 = Sleeping, 3 = Starting, 4 = Throttled, 5 = Shutting down, 6 = Fault, 7 = Standby

FOR KK := 1 TO CstNbInv_PTR_G DO
	MesAll_Start := TRUE;
	MesAll_Fault := TRUE ;
	FOR LL := 1 TO CstNbPowerCol_INV_G DO 
		MesAll_Start := MesAll_Start AND MesDataExd.AX_INV[KK].AX_PowerCol[LL].MesIDState = 45;
		MesALO_Fault := MesALO_Fault OR MesDataExd.AX_INV[KK].AX_PowerCol[LL].MesAlarmID > 0;
		MesAll_Fault := MesAll_Fault AND MesDataExd.AX_INV[KK].AX_PowerCol[LL].MesAlarmID > 0;
		MesALO_Stopped := MesALO_Stopped OR 
			(MesDataExd.AX_INV[KK].AX_PowerCol[LL].MesIDState = 45 AND MesDataExd.AX_INV[KK].AX_PowerCol[LL].MesAlarmID > 0);
	END_FOR
	
	MesDataExd.AX_INV[KK].MesData.MesState := 0;
	
	IF MesDataExd.AX_INV[KK].MesNbPowerColConnected > 0 THEN 
		IF MesDataExd.AX_INV[KK].MesData.MesP > 0.01 THEN 
			MesDataExd.AX_INV[KK].MesData.MesState.1 := TRUE ; // MPPT 
		ELSE 
			MesDataExd.AX_INV[KK].MesData.MesState.7 := TRUE ;  // Standby 
		END_IF 	
	ELSE 
		IF MesAll_Fault THEN 
			MesDataExd.AX_INV[KK].MesData.MesState.6 := TRUE ; // Fault 
		ELSE 
			MesDataExd.AX_INV[KK].MesData.MesState.0 := TRUE ; // Off 
		END_IF
	END_IF

END_FOR

MesDataExd.MesState 			:= 0  ; // At Cluster level
IF MesDataExd.MesNbInvConnected=0   THEN  // 
	// OFF State  
	MesDataExd.MesState.0 		:= 1 ; 
	
ELSE
	// ON State
	MesDataExd.MesState.2 		:= 1 ;
	
END_IF



SUPER^.M_StateManager() ; ]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_INV_Power_One">
      <LineId Id="3" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_INV_Power_One.M_Acknowledge">
      <LineId Id="51" Count="0" />
    </LineIds>
    <LineIds Name="FB_INV_Power_One.M_AlarmManagement">
      <LineId Id="562" Count="81" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_INV_Power_One.M_CP">
      <LineId Id="129" Count="19" />
      <LineId Id="119" Count="0" />
    </LineIds>
    <LineIds Name="FB_INV_Power_One.M_Curtail">
      <LineId Id="399" Count="0" />
      <LineId Id="416" Count="1" />
      <LineId Id="400" Count="0" />
      <LineId Id="398" Count="0" />
      <LineId Id="419" Count="0" />
      <LineId Id="418" Count="0" />
      <LineId Id="436" Count="0" />
      <LineId Id="435" Count="0" />
      <LineId Id="378" Count="2" />
      <LineId Id="355" Count="0" />
    </LineIds>
    <LineIds Name="FB_INV_Power_One.M_Execute">
      <LineId Id="24" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="45" Count="1" />
      <LineId Id="13" Count="1" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_INV_Power_One.M_Init">
      <LineId Id="23" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="47" Count="1" />
      <LineId Id="51" Count="3" />
      <LineId Id="64" Count="1" />
    </LineIds>
    <LineIds Name="FB_INV_Power_One.M_Read">
      <LineId Id="7102" Count="288" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_INV_Power_One.M_StateManager">
      <LineId Id="451" Count="16" />
      <LineId Id="449" Count="1" />
      <LineId Id="339" Count="1" />
      <LineId Id="372" Count="2" />
      <LineId Id="445" Count="0" />
      <LineId Id="375" Count="2" />
      <LineId Id="443" Count="0" />
      <LineId Id="378" Count="2" />
      <LineId Id="426" Count="0" />
      <LineId Id="381" Count="0" />
      <LineId Id="448" Count="0" />
      <LineId Id="429" Count="0" />
      <LineId Id="433" Count="0" />
      <LineId Id="437" Count="2" />
      <LineId Id="436" Count="0" />
      <LineId Id="440" Count="0" />
      <LineId Id="442" Count="0" />
      <LineId Id="441" Count="0" />
      <LineId Id="435" Count="0" />
      <LineId Id="446" Count="1" />
      <LineId Id="434" Count="0" />
      <LineId Id="430" Count="0" />
      <LineId Id="392" Count="1" />
      <LineId Id="417" Count="8" />
      <LineId Id="394" Count="3" />
      <LineId Id="12" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>