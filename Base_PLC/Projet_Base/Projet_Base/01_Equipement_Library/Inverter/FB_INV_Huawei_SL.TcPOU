<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_INV_Huawei_SL" Id="{9303f6a2-8d2d-4205-91ad-3effdab2c11b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_INV_Huawei_SL EXTENDS FB_INV_Base
//////////////////
// SmartLogger Huawei
//////////////////

VAR_INPUT PERSISTENT
	// Parameters of the Object (instance specific)
	{attribute 'OPC.UA.DA' := '1'}  
	ParamIpAddress		   : STRING 	:= '127.0.0.1'; (* (NA)Config: IP Adress of PV INverter*)
	{attribute 'OPC.UA.DA' := '1'} 
	ParamUnitID 			: BYTE  := 0; 			  	(* (NA)   Modbus Unit ID. *)
	ParamNbINV				: BYTE:=1 ; 				(* Number of inverters behind the smartlogger *)
	{attribute 'OPC.UA.DA' := '1'}              		
	ParamnTcpPort			: UINT := 502;				(* TCP port number *)
	ParamPnomINV			: REAL:=60; 				(* (kW) Nominal Power For one inverter *)
	ParamSLNum				: BYTE ; 					(* (NA) Config :Numerous of the ESS in the PP*)
	ParamID_PTR				: UINT;						(* (NA) ID of the PTR where Smartlogger is located*)
	
	
		MesDataExd	AT %Q*		: INV_Huawei_SL;
	
END_VAR

VAR_OUTPUT
	//Child objects
	
END_VAR

VAR

	// M_READ VARIABLES//


//		FB_ModbusRead_I1          	: ARRAY[1..CstNbINVperPTR_G] OF  FB_ModbusRead ; 		// (NA) FB for Modbus Reading
		FB_ModbusRead_I2          	: FB_ModbusRead ; 										// (NA) FB for Modbus Reading
		FB_ModbusRead_I3          	: FB_ModbusRead ; 										// (NA) FB for Modbus Reading
			
//		MesBlock1_Temp 				: ARRAY[1..CstNbINVperPTR_G] OF ARRAY[0..24]  OF WORD; 	// (NA) Temporary Block with multiple modbus reading (Caution : Double Word variables)
//		MesBlock1_Temp 				: ARRAY[0..25*CstNbINVperPTR_G-1]  OF WORD; 			// (NA) Temporary Block with multiple modbus reading (Caution : Double Word variables)
		MesBlock2_Temp 				: ARRAY[0..56] OF WORD;									// (NA) Temporary Block with multiple modbus reading (Caution : Double Word variables)
		MesBlock3_Temp 				: ARRAY[0..14] OF WORD;									// (NA) Temporary Block with multiple modbus reading (Caution : Double Word variables)
                                                                                    		
		                                                                            		
//		MesModbusReadAlarm 		  	: ARRAY[1..CstNbINVperPTR_G] OF BOOL ; 					// (NA) Modbus Read Alarm for all modbus frames		
		MesModbusReadAlarm2 		: BOOL ; 												// (NA) Modbus Read Alarm for all modbus frames			
		MesModbusReadAlarm3 		: BOOL ; 												// (NA) Modbus Read Alarm for all modbus frames			

//		MesModbusAlarmCode			: ARRAY[1..CstNbINVperPTR_G] OF UDINT;					// (NA) Modbus Read Alarm Code
		MesModbusAlarmCode2			: UDINT;												// (NA) Modbus Read Alarm Code
		MesModbusAlarmCode3			: UDINT;												// (NA) Modbus Read Alarm Code

	
	// M_CURTAIL VARIABLES //
		FB_ModbusWrite_I2 		  	: FB_ModbusWrite ; 										// (NA) Functionnal Block for Writing Curtail limit through modbus
		FB_ModbusWrite_I3 		  	: FB_ModbusWrite ; 										// (NA) Functionnal Block for Writing Curtail limit through modbus	
		MesModbusWriteCode          : UDINT ; 												// (NA) Modbus Write Alarm Code 			 
		MesModbusWriteCode2         : UDINT ; 												// (NA) Modbus Write Alarm Code 
	                                                                           		
		MesModbusCurtailAlarm		: BOOL ;				   								// (NA) Modbus Write Curtail Alarm 
		MesModbusCurtailAlarm2		: BOOL ;				   								// (NA) Modbus Write Curtail Alarm 
		WriteBlock_Temp 	AT %Q*	: ARRAY[0..3] OF WORD;				 					// Temporary Block with multiple modbus writing	 
		
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[

]]></ST>
    </Implementation>
    <Method Name="M_AlarmManagement" Id="{8bc7b900-9e72-4497-a24b-f34ac3dc906e}">
      <Declaration><![CDATA[METHOD M_AlarmManagement
//////////////////
// Manages IntelliGen Alarms
/////////////////

VAR 
	// Method local variables (reinitialized at each cycle) 
	FB_AlarmCodeManager : FB_AlarmCodeManager ; 

	KK					: BYTE;		// For Loop 
	
	ComWarning			: BOOL;		// Aggregated Wcommunication warning
	ComAlarm			: BOOL;		// Aggregated communication Alarm
	ComINVWarning			: BOOL;		// Aggregated Wcommunication warning
	ComINVAlarm			: BOOL;		// Aggregated communication Alarm
	
	INVAlarm			: BOOL ; // At least one inverter has an alarm
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//COMMUNICATION//
	CalModbusWriteAlarm := MesModbusCurtailAlarm ; 
	
	ComWarning 			:= MesModbusCurtailAlarm ;			// At least one modbus trame did not work
	ComAlarm			:= TRUE;						// All modbus trame did not work
	
		ComWarning 	:= ComWarning OR  MesModbusReadAlarm2 OR MesModbusReadAlarm3; // Smart logger LOC
		ComAlarm	:= ComAlarm  AND MesModbusReadAlarm2 AND MesModbusReadAlarm3; 
		
//		ComINVWarning := FALSE ; // LOC with inverters
//		ComINVAlarm	 := TRUE ; 
//		INVAlarm		:=FALSE ; 
		
(*	FOR KK:=1 TO ParamNbINV DO 
		ComINVWarning 	:= ComINVWarning OR MesDataExd.MesData.LExd.MesDataExd.MesData.NV[KK].CalComAlarm;
	    ComINVAlarm	:= ComINVAlarm  AND MesDataExd.MesData.LExd.MesDataExd.MesData.NV[KK].CalComAlarm ;
		INVAlarm := INVAlarm AND MesDataExd.MesData.LExd.MesDataExd.MesData.NV[KK].MesAlarm ;
	END_FOR
	*)	
	//Warning
	MesWarningCom 	:= ComWarning ;  
	//Alarm
	TON_ComAlarm(IN:= ComAlarm , PT:= ParamTempoComAlarm, Q=> MesDataExd.MesData.MesAlarmCom) ;	

// ALARM CODE //

// Attention une alarm doit être mise en commentaire de la manière suivante (* *), l'utilisation du // pose pb sur Bazefield 

	FB_AlarmCodeManager(
		bAlarm1			:= MesDataExd.MesData.MesState_Inv=6 ,	// Smart Logger general alarm (desactivate if LOC)  
		bAlarm2			:= MesDataExd.MesData.MesAlarmCom,  // Loss of communication with smart logger #COM
		bAlarm3			:=ComINVAlarm AND NOT MesWarningCom , 		// LOC with all inverters while they were connected
		bAlarm4			:=MesModbusCurtailAlarm, 		// 
		bAlarm5			:=FALSE, 
		bAlarm6			:=FALSE, 
		bAlarm7			:=FALSE, 
		bAlarm8			:=FALSE, 
		bAlarm9			:=FALSE, 
		bAlarm10		:=FALSE, 
		bAlarm11		:=FALSE, 
		bAlarm12		:=FALSE, 
		bAlarm13		:=FALSE, 
		bAlarm14		:=FALSE, 													// 
		bAlarm15		:= FALSE , 									// Command Alarm in case of intervention
		wAlarmCode		=>MesDataExd.MesData.MesAlarmCode);

// WARNING CODE //
	FB_AlarmCodeManager(
 		bAlarm1			:= ComINVWarning,								// At least one inverter has a loss of communication
		bAlarm2			:= CalCompareWarningCurtail,					// Measured Power above curtail Power 
		bAlarm3			:= MesWarningCom,								// Bad communication #COM
		bAlarm4			:=INVAlarm, 		// At least one inverter has an alarm
		bAlarm5			:=FALSE, 
		bAlarm6			:=FALSE, 
		bAlarm7			:=FALSE, 
		bAlarm8			:=FALSE, 
		bAlarm9			:=FALSE, 
		bAlarm10		:=FALSE, 
		bAlarm11		:=FALSE, 
		bAlarm12		:=FALSE, 
		bAlarm13		:=FALSE, 
		bAlarm14		:=FALSE, 
		bAlarm15		:=FALSE, 
		wAlarmCode		=>MesDataExd.MesData.MesWarningCode);	

// EVENT CODE //
	FB_AlarmCodeManager(
		bAlarm1			:= RS_StartStop.Q1, 			// Start command
		bAlarm2			:= NOT RS_StartStop.Q1, 		// Stop command
		bAlarm3			:= MesDataExd.MesData.MesState_Inv=2 OR MesDataExd.MesData.MesState_Inv=3, 		// Curtailing is ON
		bAlarm4			:= FALSE, 		// 
		bAlarm5			:= FALSE, 
		bAlarm6			:= FALSE, 
		bAlarm7			:= FALSE, 
		bAlarm8			:= FALSE, 
		bAlarm9			:= FALSE, 
		bAlarm10		:= FALSE, 
		bAlarm11		:= FALSE, 
		bAlarm12		:= FALSE, 
		bAlarm13		:= FALSE, 
		bAlarm14		:= FALSE, 
		bAlarm15		:= FALSE, 
		wAlarmCode		=>MesDataExd.MesData.MesEventCode);
		

		]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_CP" Id="{1bfc030e-6a5b-4859-99c8-20b2a48c707c}">
      <Declaration><![CDATA[METHOD M_CP
//////////////////
//  Emulator
/////////////////

VAR 
	// Method local variables (reinitialized at each cycle) 
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

SUPER^.M_CP() ; 




Trig_Cmd_Read(CLK:=IN_CmdToggleRead);
Trig_Cmd_Write(CLK:=IN_CmdToggleWrite);
	
IF Trig_Cmd_Read.Q THEN
	IN_CmdToggleRead := FALSE;
	MesDataExd.MesData.MesCP_Read := NOT MesDataExd.MesData.MesCP_Read;
END_IF


IF Trig_Cmd_Write.Q THEN
	IN_CmdToggleWrite := FALSE;
	MesDataExd.MesData.MesCP_Write := NOT MesDataExd.MesData.MesCP_Write;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Curtail" Id="{24586879-5ceb-40e1-9664-51bfb1e36ea9}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Curtail'}
METHOD M_Curtail
//////////////////
// Write Curtail Command through modbus to PV inverters.  
//////////////////
VAR 
	// Method local variables (reinitialized at each cycle) 
	
	Threshold 			 : INT:=5 ;					// (0-100) Change percentage of Range to trigger the write commAND  

	CHECK				 : BOOL; 					// Check if changes. 
	WriteCmd 			 : BOOL;					// Modbus Write Rising Edge 
	
	SetptPlimit_Temp: ARRAY[0..1] OF WORD;
	SetptQlimit_Temp: ARRAY[0..1] OF WORD;
	
	WriteBlock_Temp1 				: ARRAY[0..1] OF WORD; 	// Temporary Block with multiple modbus writing	 
	WriteBlock_Temp2 				: ARRAY[0..1] OF WORD; 	// Temporary Block with multiple modbus writing	
	
	Split		: FB_SplitRealToWords ; 
	
	CHECK2: BOOL;

	CalInhibeWrite: BOOL;


	Quantity: BYTE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// MODBUS VARIABLE FORMATING //
MesDataExd.MesData.OUT_SetptPLimit	:= MIN(MesDataExd.MesSetptPMax,MAX(0, IN_SetptPlimit)) ; 
MesDataExd.MesData.OUT_SetptQ	:= MIN(MesDataExd.MesSetptQMax , MAX(MesDataExd.MesSetptQMin , IN_SetptQ)) ; 
		
	
	Split(IN:= MesDataExd.MesData.OUT_SetptPLimit*10.0 , OUT=>SetptPlimit_Temp ) ;   //Between 0 and 100% Pmax
	Split(IN:= MesDataExd.MesData.OUT_SetptQ*10.0 , OUT=>SetptQlimit_Temp ) ; // Cosphi limité à 0.8
	
	
	WriteBlock_Temp1[0] := SetptPlimit_Temp[0] ; 
	WriteBlock_Temp1[1] := SetptPlimit_Temp[1] ; 
	WriteBlock_Temp2[0] := SetptQlimit_Temp[0] ; 
	WriteBlock_Temp2[1] := SetptQlimit_Temp[1] ; 

// MODBUS REQUEST //	
	// Modbus Blocks write
	FB_ModbusWrite_I2(
		pSrcAddr 			:= ADR(WriteBlock_Temp1) ,
		cbLength			:= SIZEOF(WriteBlock_Temp1) , 
		nQuantity 			:= 2,
		Reset				:= CmdClearFault_G, 
		sIPAddr				:=ParamIpAddress ,
		nTCPport			:= ParamnTcpPort ,  
		nUnitID				:=ParamUnitID , 
		nMBAddr				:=40424 , 
		tTimeout			:=ParamTimeout ,
		WriteCmd			:=ClockWrite AND MesDataExd.MesData.MesCP_Write, 
		ModbusWriteAlarm	=>MesModbusCurtailAlarm , 
		ErrorId				=> MesModbusWriteCode); 

	FB_ModbusWrite_I3(
		pSrcAddr 			:= ADR(WriteBlock_Temp2) ,
		cbLength			:= SIZEOF(WriteBlock_Temp2) , 
		nQuantity 			:= 2,
		Reset				:= CmdClearFault_G, 
		sIPAddr				:=ParamIpAddress ,
		nTCPport			:= ParamnTcpPort ,  
		nUnitID				:=ParamUnitID , 
		nMBAddr				:=40426 , 
		tTimeout			:=ParamTimeout ,
		WriteCmd			:=ClockWrite AND MesDataExd.MesData.MesCP_Write, 
		ModbusWriteAlarm	=>MesModbusCurtailAlarm2 , 
		ErrorId				=> MesModbusWriteCode2); 

	IF FB_ModbusWrite_I2.Completed THEN
		MesDataExd.OUT_SetptPlimit 	:= IN_SetptPlimit ;
		MesDataExd.OUT_SetptQlimit	:= IN_SetptQ;
	END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Init" Id="{02f76042-38a7-4e17-a3fc-1269ab900e55}">
      <Declaration><![CDATA[METHOD M_Init
VAR_INPUT
END_VAR

VAR

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ MesDataExd.OUT_SetptPlimit := 9999999 ; // initialize to absurd value , to force a write of setpoint at startup . 
MesDataExd.OUT_SetptQlimit	:= 9999999 ; // initiali]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Read" Id="{ea45d134-cc0c-49c5-9626-16c2a6e25113}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Read'}
METHOD M_Read
//////////
// Read Method for SMA : Modbus reading
//////////
VAR
	// Method local variables (reinitialized at each cycle) 
	MW 					: FB_MergeWordsToDint; 
	KK					: BYTE;						 // Index to loop over modbus blocks. 	

END_VAR


]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Version table de com : Issu 37

IF	MesDataExd.MesData.MesCP_Read THEN	
	
	// Datalogger //
		//INITIALIZING MODBUS REQUESTS //
		FB_ModbusRead_I2(ClockRead:= ClockRead AND MesDataExd.MesData.MesCP_Read, Reset:= CmdClearFault_G ,sIPAddr:=ParamIpAddress , nUnitID:= ParamUnitID, tTimeout:= ParamTimeout,nTcpPort := ParamnTcpPort);
		FB_ModbusRead_I3(ClockRead:= ClockRead AND MesDataExd.MesData.MesCP_Read, Reset:= CmdClearFault_G ,sIPAddr:=ParamIpAddress , nUnitID:= ParamUnitID, tTimeout:= ParamTimeout,nTcpPort := ParamnTcpPort);
	
	// MODBUS REQUEST//
		FB_ModbusRead_I2(
			nQuantity		:= 57, 
			nMBAddr			:= 40521, 
			cbLength		:= SIZEOF(MesBlock2_Temp) , 
			pDestAddr		:= ADR(MesBlock2_Temp) , 
			ModbusReadAlarm	=>MesModbusReadAlarm2 , 
			ErrorId			=> MesModbusAlarmCode2);
			
		FB_ModbusRead_I3(
			nQuantity		:= 15, 
			nMBAddr			:= 40685, 
			cbLength		:= SIZEOF(MesBlock3_Temp) , 
			pDestAddr		:= ADR(MesBlock3_Temp) , 
			ModbusReadAlarm	=>MesModbusReadAlarm3 , 
			ErrorId			=> MesModbusAlarmCode3);		
			
	
	// MODBUS BLOCKS SEPARATION	
			MW(WORD_STRONG:= MesBlock2_Temp[0], WORD_WEAK := MesBlock2_Temp[1],SIGNED:=FALSE, FIX:=3 , SIZE:=2, VAR_OUT := MesDataExd.MesData.MesPdc);
	
			MW(WORD_STRONG:= MesBlock2_Temp[4], WORD_WEAK := MesBlock2_Temp[5],SIGNED:=TRUE, FIX:=3 , SIZE:=2, VAR_OUT := MesDataExd.MesData.MesP);
			MW(WORD_STRONG:= MesBlock2_Temp[11],SIGNED:=TRUE, FIX:=3 , SIZE:=1, VAR_OUT := MesDataExd.MesData.MesCosPhi);
	
			MW(WORD_STRONG:= MesBlock2_Temp[23], WORD_WEAK := MesBlock2_Temp[24],SIGNED:=TRUE, FIX:=3 , SIZE:=2, VAR_OUT := MesDataExd.MesData.MesQ);
			MW(WORD_STRONG:= MesBlock2_Temp[33], WORD_WEAK := MesBlock2_Temp[34],SIGNED:=TRUE, FIX:=1 , SIZE:=2, VAR_OUT := MesDataExd.MesData.MesIdc);
			MW(WORD_STRONG:= MesBlock2_Temp[39], WORD_WEAK := MesBlock2_Temp[40],SIGNED:=FALSE, FIX:=1 , SIZE:=2, VAR_OUT := MesDataExd.MesETot);
			MW(WORD_STRONG:= MesBlock2_Temp[41], WORD_WEAK := MesBlock2_Temp[42],SIGNED:=FALSE, FIX:=1 , SIZE:=2, VAR_OUT := MesDataExd.MesEDay);
		MesDataExd.MesData.MesState_Inv:= MesBlock2_Temp[45];
			
			MW(WORD_STRONG:= MesBlock2_Temp[51],SIGNED:=TRUE, FIX:=0 , SIZE:=1, VAR_OUT := MesDataExd.MesI1);
			MW(WORD_STRONG:= MesBlock2_Temp[52],SIGNED:=TRUE, FIX:=0 , SIZE:=1, VAR_OUT := MesDataExd.MesI2);
			MW(WORD_STRONG:= MesBlock2_Temp[53],SIGNED:=TRUE, FIX:=0 , SIZE:=1, VAR_OUT := MesDataExd.MesI3);
			MW(WORD_STRONG:= MesBlock2_Temp[54],SIGNED:=FALSE, FIX:=1 , SIZE:=1, VAR_OUT := MesDataExd.MesU12);
			MW(WORD_STRONG:= MesBlock2_Temp[55],SIGNED:=FALSE, FIX:=1 , SIZE:=1, VAR_OUT := MesDataExd.MesU23);
			MW(WORD_STRONG:= MesBlock2_Temp[56],SIGNED:=FALSE, FIX:=1 , SIZE:=1, VAR_OUT := MesDataExd.MesU31);
		
		MW(WORD_STRONG:= MesBlock2_Temp[51],SIGNED:=TRUE, FIX:=0 , SIZE:=1, VAR_OUT := MesDataExd.MesI1);
		MW(WORD_STRONG:= MesBlock2_Temp[52],SIGNED:=TRUE, FIX:=0 , SIZE:=1, VAR_OUT := MesDataExd.MesI2);
		MW(WORD_STRONG:= MesBlock2_Temp[53],SIGNED:=TRUE, FIX:=0 , SIZE:=1, VAR_OUT := MesDataExd.MesI3);
		MW(WORD_STRONG:= MesBlock2_Temp[54],SIGNED:=FALSE, FIX:=1 , SIZE:=1, VAR_OUT := MesDataExd.MesU12);
		MW(WORD_STRONG:= MesBlock2_Temp[55],SIGNED:=FALSE, FIX:=1 , SIZE:=1, VAR_OUT := MesDataExd.MesU23);
		MW(WORD_STRONG:= MesBlock2_Temp[56],SIGNED:=FALSE, FIX:=1 , SIZE:=1, VAR_OUT := MesDataExd.MesU31);
		
		
		
	
		// Block 3
		MW(WORD_STRONG:= MesBlock3_Temp[0], SIGNED:=FALSE, FIX:=2 , SIZE:=1, VAR_OUT := MesDataExd.MesEff);
		MW(WORD_STRONG:= MesBlock3_Temp[8],WORD_WEAK := MesBlock3_Temp[9], SIGNED:=FALSE, FIX:=2 , SIZE:=2, VAR_OUT := MesDataExd.MesSetptQMax);
		MW(WORD_STRONG:= MesBlock3_Temp[10],WORD_WEAK := MesBlock3_Temp[11], SIGNED:=TRUE, FIX:=2 , SIZE:=2, VAR_OUT := MesDataExd.MesSetptQMin);
		MW(WORD_STRONG:= MesBlock3_Temp[12],WORD_WEAK := MesBlock3_Temp[13], SIGNED:=FALSE, FIX:=2 , SIZE:=2, VAR_OUT := MesDataExd.MesSetptPMax);
	MesDataExd.MesOn	:= 	MesBlock3_Temp[14].0 ; 	
	


END_IF
	
// Properties update
	ParamPn := ParamPnomINV * ParamNbINV ; 
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_StartStop" Id="{1a1ff02c-76df-42fa-9ca4-b304fb0f8947}">
      <Declaration><![CDATA[METHOD M_StartStop
//////////////////
// Start and Stop AMG
/////////////////
VAR 
	// Method local variables (reinitialized at each cycle) 

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_StateManager" Id="{ef20bfc4-1981-435f-aa43-2e0edc519152}">
      <Declaration><![CDATA[METHOD M_StateManager
//////////////////
// Detect which is the state of the inverter. IF loss of communication MesState =0 , the last inverter state is kept .  
/////////////////

VAR 
	// Method local variables (reinitialized at each cycle) 

	
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[
MesDataExd.MesData.MesState 			:= 0  ; 
//O=Stopped, 1 = MPPT, 2 = Sleeping, 3 = Starting, 4 = Throttled, 5 = Shutting down, 6 = Fault, 7 = Standby


IF MesDataExd.MesData.MesState_Inv = 0 THEN //idle 
	// Standby
	MesDataExd.MesData.MesState .7 		:= 1 ;
ELSIF  MesDataExd.MesData.MesState_Inv = 1 THEN //on grid 

	// ON State
	MesDataExd.MesData.MesState.1 		:= 1 ; 		// At least one inverter is feeding power to the grid .

ELSIF  MesDataExd.MesData.MesState_Inv = 2 OR  MesDataExd.MesData.MesState_Inv = 3  THEN //on grid 
 	MesDataExd.MesData.MesState.4 		:= 1 ; 		// At least one inverter is feeding power to the grid .
	
ELSIF  MesDataExd.MesData.MesState_Inv = 4 OR MesDataExd.MesData.MesState_Inv = 5 THEN // planned outage , power limit outage 
	 MesDataExd.MesData.MesState .0 		:= 1 ;
	 
ELSIF  MesDataExd.MesData.MesState_Inv = 6 THEN //fault outage
	 MesDataExd.MesData.MesState .6 		:= 1 ;
ELSE // Communication interrupt 
	// OFF State  
	MesDataExd.MesData.MesState .1 		:= 1 ; 
	
END_IF
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_INV_Huawei_SL">
      <LineId Id="3" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_INV_Huawei_SL.M_AlarmManagement">
      <LineId Id="476" Count="24" />
      <LineId Id="577" Count="0" />
      <LineId Id="576" Count="0" />
      <LineId Id="575" Count="0" />
      <LineId Id="501" Count="56" />
      <LineId Id="458" Count="0" />
    </LineIds>
    <LineIds Name="FB_INV_Huawei_SL.M_CP">
      <LineId Id="173" Count="19" />
      <LineId Id="49" Count="0" />
    </LineIds>
    <LineIds Name="FB_INV_Huawei_SL.M_Curtail">
      <LineId Id="561" Count="47" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_INV_Huawei_SL.M_Init">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_INV_Huawei_SL.M_Read">
      <LineId Id="870" Count="0" />
      <LineId Id="887" Count="0" />
      <LineId Id="791" Count="49" />
      <LineId Id="884" Count="2" />
      <LineId Id="841" Count="13" />
      <LineId Id="625" Count="0" />
    </LineIds>
    <LineIds Name="FB_INV_Huawei_SL.M_StartStop">
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="FB_INV_Huawei_SL.M_StateManager">
      <LineId Id="125" Count="0" />
      <LineId Id="128" Count="1" />
      <LineId Id="126" Count="0" />
      <LineId Id="84" Count="1" />
      <LineId Id="132" Count="0" />
      <LineId Id="136" Count="1" />
      <LineId Id="135" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="139" Count="1" />
      <LineId Id="142" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="91" Count="2" />
      <LineId Id="12" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>