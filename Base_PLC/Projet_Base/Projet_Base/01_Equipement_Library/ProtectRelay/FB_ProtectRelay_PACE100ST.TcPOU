<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_ProtectRelay_PACE100ST" Id="{627c00e5-b084-48f4-ab6e-24bc543cd046}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ProtectRelay_PACE100ST EXTENDS FB_ProtectRelay_Base
//////////////////
// SEPAM system for High Voltage or Low Voltage Grid Protection . 
//////////////////


VAR_INPUT PERSISTENT
	// Parameters of the Object (instance/model specific) 
	ParamInInterfaceSub						: BOOL := TRUE; // Serial interface RS422/RS485 TYPE (0:EL6021,1:SUB9)
END_VAR

VAR_OUTPUT

END_VAR

VAR_INPUT
	InUnitID            					: DINT;			// (NA)   ID FOR SEPAM S48 Modbus Unit ID. 	

	IN_MesAlarmI0Max_IO						: BOOL;
	IN_MesAlarmIMax_IO						: BOOL;
	
	MesDataExd				AT %Q* 	: ProtectRelay_PACE100ST ;
	
	
END_VAR

VAR

	ModbusRTU								: FB_ModbusRTU;
	MesBlock								: ARRAY[1..3] OF ARRAY[1..120] OF WORD;	
	AX_Addr									: ARRAY[1..3] OF UINT 	:= [1200,	1500,	2000];
	AX_Qty									: ARRAY[1..3] OF UINT	:= [2,		2,		3];
	AX_UnitId								: ARRAY[1..3] OF BYTE	:= [1,		1,		1];
	AX_Function								: ARRAY[1..3] OF UINT	:= [4,		4,		4];	
	AX_Priority								: ARRAY[1..3] OF UINT	:= [1,		1,		1];
	AX_bStart								: ARRAY[1..3] OF BOOL;
	AX_TrigRead								: ARRAY[1..3] OF R_trig;
	MbStruct								: ARRAY[1..3] OF Struct_InputRTU;	
	
	KK										: INT;


	//M_EVALUATE

	//ClockRead								: BOOL;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="M_AlarmManagement" Id="{8c4379b8-8517-4e32-9af9-42cae8fc7b62}">
      <Declaration><![CDATA[METHOD M_AlarmManagement
//////////////////
// Manages Sepam Alarms. Alarms opens HT CB until Sepam manual Reset . Warning Opens CB-L but does not maintain warning
/////////////////

VAR 
	// Method local variables (reinitialized at each cycle) 
	FB_AlarmCodeManager 	: FB_AlarmCodeManager ; 

END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// ALARM CODE //
	FB_AlarmCodeManager(
		bAlarm1				:= MesDataExd.CB_In_Alarm,		// CB in Alarm
		bAlarm2				:= IN_MesAlarmI0Max_IO,					// Max IO Fault
		bAlarm3				:= IN_MesAlarmIMax_IO,						// Max I Fault 
		bAlarm4				:= FALSE,						// 
		bAlarm5				:= FALSE,						//
		bAlarm6				:= FALSE, 						// 
		bAlarm7				:= FALSE, 						// 
		bAlarm8				:= FALSE, 						// 
		bAlarm9				:= FALSE, 						// 
		bAlarm10			:= FALSE, 						// 
		bAlarm11			:= FALSE, 						//
		bAlarm12			:= FALSE, 						// 
		bAlarm13			:= FALSE, 						//
		bAlarm14			:= FALSE, 						//
		bAlarm15			:= FALSE, 						// 
		wAlarmCode			=>MesDataExd.MesData.MesAlarmCode);

// WARNING CODE //
	FB_AlarmCodeManager(
		bAlarm1			:= FALSE,//
		bAlarm2			:= FALSE,//
		bAlarm4			:= FALSE,//
		bAlarm5			:= FALSE,//
		bAlarm6			:= FALSE,// 
		bAlarm7			:= FALSE,// 
		bAlarm8			:= FALSE,// 
		bAlarm9			:= FALSE,// 
		bAlarm10		:= FALSE,// 
		bAlarm11		:= FALSE,// 
		bAlarm12		:= FALSE,// 
		bAlarm13		:= FALSE,// 
		bAlarm14		:= FALSE,// 
		bAlarm15		:= FALSE,// 
		wAlarmCode		=>MesDataExd.MesData.MesWarningCode);

// EVENT CODE //
	FB_AlarmCodeManager(
		bAlarm1			:=FALSE, 		// 
		bAlarm2			:=FALSE, 		// 
		bAlarm3			:=FALSE, 		// 
		bAlarm4			:=FALSE, 		// 
		bAlarm5			:=FALSE, 		//
		bAlarm6			:=FALSE, 		//
		bAlarm7			:=FALSE, 		//
		bAlarm8			:=FALSE, 		//
		bAlarm9			:=FALSE, 		//
		bAlarm10		:=FALSE, 		//
		bAlarm11		:=FALSE, 		//
		bAlarm12		:=FALSE, 		//
		bAlarm13		:=FALSE, 		//
		bAlarm14		:=FALSE, 		//
		bAlarm15		:=FALSE, 		//
		wAlarmCode		=>MesDataExd.MesData.MesEventCode);]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_CP" Id="{db7c59d7-efdb-404b-8fb1-6be4424c9aa0}">
      <Declaration><![CDATA[METHOD M_CP
//////////////////
//  Emulator
/////////////////

VAR 
	// Method local variables (reinitialized at each cycle) 
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

SUPER^.M_CP() ; 




Trig_Cmd_Read(CLK:=IN_CmdToggleRead);
Trig_Cmd_Write(CLK:=IN_CmdToggleWrite);
	
IF Trig_Cmd_Read.Q THEN
	IN_CmdToggleRead := FALSE;
	MesDataExd.MesData.MesCP_Read := NOT MesDataExd.MesData.MesCP_Read;
END_IF


IF Trig_Cmd_Write.Q THEN
	IN_CmdToggleWrite := FALSE;
	MesDataExd.MesData.MesCP_Write := NOT MesDataExd.MesData.MesCP_Write;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Evaluate" Id="{1be78df4-cb75-4415-90df-49453a384d1b}">
      <Declaration><![CDATA[METHOD M_Evaluate
VAR_INPUT
END_VAR

VAR
	CloseMainMVCB							: BOOL;
	Valtemp									: REAL;
	MesConnectAuthorization					: BOOL;

END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Init" Id="{562b877a-db47-4bbc-b603-8b903706efc2}">
      <Declaration><![CDATA[METHOD M_Init
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Modbus RTU Relay
FOR KK := 1 TO 4 DO 
	MbStruct[KK].InBuffer := ADR(MesBlock[KK]);
	MbStruct[KK].InFunction := AX_Function[KK];
	MbStruct[KK].InQuantity := AX_Qty[KK];
	MbStruct[KK].InStartAddr := AX_Addr[KK];
	MbStruct[KK].InUnitID := AX_UnitId[KK];
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Read" Id="{134a5387-97cf-40f1-afc2-82dad8ae0a45}">
      <Declaration><![CDATA[METHOD M_Read
//////////////////
//  Method Calls 
/////////////////

VAR 
//local variables (reinitialized at each cycle) 
	MW 					: FB_MergeWordsToDint; 
	MW_Float			: FB_MergeWordsToFloat; 
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// CP-Read / Write 


// System BMS 
IF MesDataExd.MesData.MesCP_Read  THEN	

	ModbusRTU();
	
	
	FOR KK := 1 TO 4 DO
		AX_TrigRead[KK](CLK  :=CalLocalTimeStruct.wSecond MOD 5 = 0);
		IF AX_TrigRead[KK].Q THEN
			ModbusRTU.M_AddAction_FIFO(InStruct := MbStruct[KK], InPriority := AX_Priority[KK]);
		END_IF
	END_FOR
	
	
	MW_Float( WORD_STRONG:= MesBlock[1][1], 	WORD_WEAK := MesBlock[1][2],  VAR_OUT:=MesDataExd.MesData.MesI1);
	MW_Float( WORD_STRONG:= MesBlock[1][3], 	WORD_WEAK := MesBlock[1][4],  VAR_OUT:=MesDataExd.MesData.MesI2);
	MW_Float( WORD_STRONG:= MesBlock[1][5], 	WORD_WEAK := MesBlock[1][6],  VAR_OUT:=MesDataExd.MesData.MesI3);
	MW_Float( WORD_STRONG:= MesBlock[1][7], 	WORD_WEAK := MesBlock[1][8],  VAR_OUT:=MesDataExd.MesData.MesI0);
	MW_Float( WORD_STRONG:= MesBlock[1][15], 	WORD_WEAK := MesBlock[1][16], VAR_OUT:=MesDataExd.Thermal_Overload);
	MW_Float( WORD_STRONG:= MesBlock[1][17], 	WORD_WEAK := MesBlock[1][18], VAR_OUT:=MesDataExd.MesData.MesFreq);
	
	
	MesDataExd.Comut 			:= WORD_TO_BOOL(MesBlock[2][7]);
	MesDataExd.CB_Close 		:= WORD_TO_BOOL(MesBlock[2][8]);
	MesDataExd.CB_In_Alarm 		:= WORD_TO_BOOL(MesBlock[2][9]);
	MesDataExd.Trip_Counter 	:= WORD_TO_INT(MesBlock[3][3]);

END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_ProtectRelay_PACE100ST">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProtectRelay_PACE100ST.M_AlarmManagement">
      <LineId Id="132" Count="0" />
      <LineId Id="5" Count="6" />
      <LineId Id="100" Count="7" />
      <LineId Id="99" Count="0" />
      <LineId Id="13" Count="2" />
      <LineId Id="17" Count="0" />
      <LineId Id="61" Count="2" />
      <LineId Id="65" Count="10" />
      <LineId Id="19" Count="0" />
      <LineId Id="21" Count="1" />
      <LineId Id="34" Count="16" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProtectRelay_PACE100ST.M_CP">
      <LineId Id="69" Count="19" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProtectRelay_PACE100ST.M_Evaluate">
      <LineId Id="55" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProtectRelay_PACE100ST.M_Init">
      <LineId Id="23" Count="6" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProtectRelay_PACE100ST.M_Read">
      <LineId Id="378" Count="1" />
      <LineId Id="382" Count="1" />
      <LineId Id="361" Count="1" />
      <LineId Id="229" Count="0" />
      <LineId Id="326" Count="0" />
      <LineId Id="317" Count="1" />
      <LineId Id="347" Count="1" />
      <LineId Id="320" Count="0" />
      <LineId Id="349" Count="0" />
      <LineId Id="322" Count="0" />
      <LineId Id="324" Count="1" />
      <LineId Id="328" Count="0" />
      <LineId Id="332" Count="1" />
      <LineId Id="329" Count="2" />
      <LineId Id="334" Count="0" />
      <LineId Id="230" Count="1" />
      <LineId Id="281" Count="0" />
      <LineId Id="301" Count="0" />
      <LineId Id="335" Count="0" />
      <LineId Id="367" Count="0" />
      <LineId Id="365" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>