<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_ProtectRelay_NSXCB" Id="{82ef3da5-e15b-4668-b023-b748b508a979}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ProtectRelay_NSXCB EXTENDS FB_ProtectRelay_Base
//////////////////
// SEPAM system for High Voltage or Low Voltage Grid Protection. 
//////////////////
VAR_INPUT PERSISTENT
	ParamTcpPort				: UINT:=502;		(* (NA) Tcp port *)
	ParamIPAddress				: STRING;           (* (NA) IP address*)
	ParamUnitID					: BYTE;             (* (NA) Unit ID*)
END_VAR

VAR_INPUT 

END_VAR

VAR_OUTPUT
	
END_VAR

VAR_INPUT
MesDataExd	AT %Q*	: ProtectRelay_NSXCB;
END_VAR

VAR

	
	FB_ModbusRead	          	: ARRAY[1..3] OF FB_ModbusRead; 
		
	CalCP_Read					: BOOL;
	CalCP_Write                 : BOOL;
	
	MesBlock1_Temp 				: ARRAY [1..1] OF WORD ; 
	MesBlock2_Temp 				: ARRAY [1..32] OF WORD ; 
	MesBlock3_Temp 				: ARRAY [1..8] OF WORD ; 
	
	AX_ModbusReadAlarm			: ARRAY[1..3] OF BOOL;
	AX_ModbusReadAlarmId		: ARRAY[1..3] OF UDINT;	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="M_AlarmManagement" Id="{829184ec-2d95-4acf-9510-7c1f5de3e653}">
      <Declaration><![CDATA[METHOD M_AlarmManagement
//////////////////
// Manages Sepam Alarms. Alarms opens HT CB until Sepam manual Reset. Warning Opens CB-L but does not maintain warning.
/////////////////

VAR 
	// Method local variables (reinitialized at each cycle) 
	FB_AlarmCodeManager 	: FB_AlarmCodeManager; 
 	ComWarning				: BOOL;
	ComAlarms				: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// ALARM CODE //
	FB_AlarmCodeManager(
		bAlarm1			:= NOT MesDataExd.MesData.MesAlarmCom,	//
		bAlarm2			:= FALSE,						//
		bAlarm3			:= FALSE,						//
		bAlarm4			:= FALSE,						//     							
		bAlarm5			:= FALSE,						//         						 
		bAlarm6			:= FALSE, 						// 
		bAlarm7			:= FALSE,   					//
		bAlarm8			:= FALSE,   					//
		bAlarm9			:= FALSE,   					//
		bAlarm10		:= FALSE,   					//
		bAlarm11		:= FALSE,   					//
		bAlarm12		:= FALSE,   					//
		bAlarm13		:= FALSE,   					//
		bAlarm14		:= FALSE,   					//
		bAlarm15		:= FALSE, 						// Command Alarm in case of intervention
		wAlarmCode		=>MesDataExd.MesData.MesAlarmCode);

// WARNING CODE //
	FB_AlarmCodeManager(
		bAlarm1			:= FALSE,						//
		bAlarm2			:= FALSE,   					//
		bAlarm4			:= FALSE,   					//
		bAlarm5			:= FALSE,   					//
		bAlarm6			:= FALSE,						//
		bAlarm7			:= FALSE,   					//
		bAlarm8			:= FALSE,   					//
		bAlarm9			:= FALSE,   					//
		bAlarm10		:= FALSE, 						//
		bAlarm11		:= FALSE,   					//
		bAlarm12		:= FALSE,   					//
		bAlarm13		:= FALSE,   					//
		bAlarm14		:= FALSE,   					//
		bAlarm15		:= FALSE,   					//
		wAlarmCode		=>MesDataExd.MesData.MesWarningCode);		//

// EVENT CODE //
	FB_AlarmCodeManager(
		bAlarm1			:=FALSE, 						// 
		bAlarm2			:=FALSE, 						// 
		bAlarm3			:=FALSE, 						// 
		bAlarm4			:=FALSE, 						// 
		bAlarm5			:=FALSE, 						//
		bAlarm6			:=FALSE,        				//
		bAlarm7			:=FALSE,        				//
		bAlarm8			:=FALSE,        				//
		bAlarm9			:=FALSE, 						//
		bAlarm10		:=FALSE,        				//
		bAlarm11		:=FALSE,        				//
		bAlarm12		:=FALSE,        				//
		bAlarm13		:=FALSE,        				//
		bAlarm14		:=FALSE,        				//
		bAlarm15		:=FALSE,        				//
		wAlarmCode		=>MesDataExd.MesData.MesEventCode);		//
		
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_CP" Id="{5f534d5a-fbed-4d8d-86f1-a5b76fb8ad71}">
      <Declaration><![CDATA[METHOD M_CP
//////////////////
//  Emulator
/////////////////

VAR 
	// Method local variables (reinitialized at each cycle) 
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

SUPER^.M_CP() ; 




Trig_Cmd_Read(CLK:=IN_CmdToggleRead);
Trig_Cmd_Write(CLK:=IN_CmdToggleWrite);
	
IF Trig_Cmd_Read.Q THEN
	IN_CmdToggleRead := FALSE;
	MesDataExd.MesData.MesCP_Read := NOT MesDataExd.MesData.MesCP_Read;
END_IF


IF Trig_Cmd_Write.Q THEN
	IN_CmdToggleWrite := FALSE;
	MesDataExd.MesData.MesCP_Write := NOT MesDataExd.MesData.MesCP_Write;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Evaluate" Id="{5aaae9d0-e390-4a4e-8624-8a3d2ab21887}">
      <Declaration><![CDATA[METHOD M_Evaluate
VAR_INPUT
	
END_VAR

VAR
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Execute" Id="{cef67e5a-675d-494c-b0d6-7fdc140ac4bf}">
      <Declaration><![CDATA[METHOD M_Execute
//////////////////
//  Method Calls 
/////////////////

VAR 
	// Method local variables (reinitialized at each cycle) 

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInit THEN
	M_Init();
END_IF


SUPER^.M_Execute() ; ]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Init" Id="{ceacc3a5-2419-4764-8379-a2ff9cd497e9}">
      <Declaration><![CDATA[METHOD M_Init
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Read" Id="{55dd98fe-04db-4407-bada-e06780baa54d}">
      <Declaration><![CDATA[METHOD M_Read
//////////////////
//  Method Calls 
/////////////////

VAR_INPUT
	
END_VAR
VAR 
	MW					: FB_MergeWordsToFloat;
	MW_1				: FB_MergeWordsToDint;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// CP-Read / Write 



// System BMS 
IF MesDataExd.MesData.MesCP_Read  THEN	

	FB_ModbusRead[1]
		(
			nTCPPort		:= ParamTcpPort,
			ClockRead		:= MesDataExd.MesData.MesCP_Read AND ClockRead, 
			Reset			:= CmdClearFault_G OR IN_CmdReset_L,
			sIPAddr			:= ParamIPAddress,
			nUnitID			:= ParamUnitID, 
			tTimeout		:= T#5S,
			nQuantity		:= 1, 
			nMBAddr			:= 42000 , 
			cbLength		:= SIZEOF(MesBlock1_Temp), 
			pDestAddr		:= ADR(MesBlock1_Temp), 
			ModbusReadAlarm	=> AX_ModbusReadAlarm[1] , 
			ErrorId			=> AX_ModbusReadAlarmId[1]
		);
		
	FB_ModbusRead[2]
		(
			nTCPPort		:= ParamTcpPort,
			ClockRead		:= MesDataExd.MesData.MesCP_Read AND ClockRead, 
			Reset			:= CmdClearFault_G OR IN_CmdReset_L,
			sIPAddr			:= ParamIPAddress,
			nUnitID			:= ParamUnitID, 
			tTimeout		:= T#5S,
			nQuantity		:= 32, 
			nMBAddr			:= 42420, 
			cbLength		:= SIZEOF(MesBlock2_Temp), 
			pDestAddr		:= ADR(MesBlock2_Temp) , 
			ModbusReadAlarm	=> AX_ModbusReadAlarm[2], 
			ErrorId			=> AX_ModbusReadAlarmId[2]
		);
	
	FB_ModbusRead[3]
		(
			nTCPPort		:= ParamTcpPort,
			ClockRead		:= MesDataExd.MesData.MesCP_Read AND ClockRead, 
			Reset			:= CmdClearFault_G OR IN_CmdReset_L,
			sIPAddr			:= ParamIPAddress ,
			nUnitID			:= ParamUnitID, 
			tTimeout		:= T#5S,
			nQuantity		:= 8, 
			nMBAddr			:= 42556 , 
			cbLength		:= SIZEOF(MesBlock3_Temp), 
			pDestAddr		:= ADR(MesBlock3_Temp), 
			ModbusReadAlarm	=> AX_ModbusReadAlarm[3], 
			ErrorId			=> AX_ModbusReadAlarmId[3]
		);
	
	//COM
	MesDataExd.MesStatCom 	:= WORD_TO_BOOL(MesBlock1_Temp[1]);
		 
	MW( WORD_STRONG:= MesBlock2_Temp[2  ],	WORD_WEAK := MesBlock2_Temp[1  ], VAR_OUT := MesDataExd.MesData.MesFreq 	 );	
	MW( WORD_STRONG:= MesBlock2_Temp[4  ],	WORD_WEAK := MesBlock2_Temp[3  ], VAR_OUT := MesDataExd.MesMaxFreq );
//	MW( WORD_STRONG_F:= MesBlock2_Temp[6  ],	WORD_WEAK_F := MesBlock2_Temp[5  ], NUMBER_F := MesDataExd.MesData.MesFreq	 );	
	MW( WORD_STRONG:= MesBlock2_Temp[8  ],	WORD_WEAK := MesBlock2_Temp[7  ], VAR_OUT := MesDataExd.MesP2	 	 );
	MW( WORD_STRONG:= MesBlock2_Temp[10 ],	WORD_WEAK := MesBlock2_Temp[9  ], VAR_OUT := MesDataExd.MesP3	 	 );
	MW( WORD_STRONG:= MesBlock2_Temp[12 ],	WORD_WEAK := MesBlock2_Temp[11 ], VAR_OUT := MesDataExd.MesPtot	 );                      
	MW( WORD_STRONG:= MesBlock2_Temp[14 ],	WORD_WEAK := MesBlock2_Temp[13 ], VAR_OUT := MesDataExd.MesQ1	 	 );
	MW( WORD_STRONG:= MesBlock2_Temp[16 ],	WORD_WEAK := MesBlock2_Temp[15 ], VAR_OUT := MesDataExd.MesQ2	 	 );
	MW( WORD_STRONG:= MesBlock2_Temp[18 ],	WORD_WEAK := MesBlock2_Temp[17 ], VAR_OUT := MesDataExd.MesQ3	 	 );
	MW( WORD_STRONG:= MesBlock2_Temp[20 ],	WORD_WEAK := MesBlock2_Temp[19 ], VAR_OUT := MesDataExd.MesQtot	 );                
	MW( WORD_STRONG:= MesBlock2_Temp[22 ],	WORD_WEAK := MesBlock2_Temp[21 ], VAR_OUT := MesDataExd.MesS1	 	 );
	MW( WORD_STRONG:= MesBlock2_Temp[24 ],	WORD_WEAK := MesBlock2_Temp[23 ], VAR_OUT := MesDataExd.MesS2	 	 );
    MW( WORD_STRONG:= MesBlock2_Temp[26 ],	WORD_WEAK := MesBlock2_Temp[25 ], VAR_OUT := MesDataExd.MesS3	 	 );
	MW( WORD_STRONG:= MesBlock2_Temp[28 ],	WORD_WEAK := MesBlock2_Temp[27 ], VAR_OUT := MesDataExd.MesStot	 );  
	
	MW_1(WORD_STRONG := MesBlock2_Temp[29 ], 	WORD_WEAK := MesBlock2_Temp[30 ] ,SIZE := 2,SIGNED := 1 ,VAR_OUT := MesDataExd.MesEAct );
	MW_1(WORD_STRONG := MesBlock2_Temp[31 ], 	WORD_WEAK := MesBlock2_Temp[32 ] ,SIZE := 2,SIGNED := 1 ,VAR_OUT := MesDataExd.MesEReact );
	
	MW( WORD_STRONG:= MesBlock3_Temp[2  ],	WORD_WEAK := MesBlock3_Temp[1  ], VAR_OUT := MesDataExd.MesCosPhi1 );	
	MW( WORD_STRONG:= MesBlock3_Temp[4  ],	WORD_WEAK := MesBlock3_Temp[3  ], VAR_OUT := MesDataExd.MesCosPhi2 );
	MW( WORD_STRONG:= MesBlock3_Temp[6  ],	WORD_WEAK := MesBlock3_Temp[5  ], VAR_OUT := MesDataExd.MesCosPhi3 );	
	MW( WORD_STRONG:= MesBlock3_Temp[8  ],	WORD_WEAK := MesBlock3_Temp[7  ], VAR_OUT := MesDataExd.MesCosPhi	 );

	
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_ProtectRelay_NSXCB">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProtectRelay_NSXCB.M_AlarmManagement">
      <LineId Id="120" Count="0" />
      <LineId Id="5" Count="6" />
      <LineId Id="100" Count="7" />
      <LineId Id="99" Count="0" />
      <LineId Id="13" Count="2" />
      <LineId Id="17" Count="0" />
      <LineId Id="61" Count="2" />
      <LineId Id="65" Count="10" />
      <LineId Id="19" Count="0" />
      <LineId Id="21" Count="1" />
      <LineId Id="34" Count="16" />
      <LineId Id="2" Count="0" />
      <LineId Id="131" Count="1" />
    </LineIds>
    <LineIds Name="FB_ProtectRelay_NSXCB.M_CP">
      <LineId Id="69" Count="19" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProtectRelay_NSXCB.M_Evaluate">
      <LineId Id="115" Count="0" />
      <LineId Id="55" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProtectRelay_NSXCB.M_Execute">
      <LineId Id="24" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="13" Count="1" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProtectRelay_NSXCB.M_Init">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProtectRelay_NSXCB.M_Read">
      <LineId Id="881" Count="5" />
      <LineId Id="879" Count="1" />
      <LineId Id="792" Count="74" />
      <LineId Id="354" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>