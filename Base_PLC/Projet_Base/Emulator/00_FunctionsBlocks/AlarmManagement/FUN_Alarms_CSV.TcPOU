<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FUN_Alarms_CSV" Id="{74b66b26-1d0b-42ac-9e94-64094e6491f2}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM FUN_Alarms_CSV
////////////////// 
// Save Alarms in a CSV File locally. 
//////////////////	
VAR_INPUT
	ParamSeparateur			: STRING := ';';				// Separator for the CSV file
	ParamExtension			: STRING(255) := '.csv';				// File extension
	FIFO					: FB_DBDatasetFifo;	// Buffer that contains all the alarms to be written in the file. 
	
END_VAR
VAR_OUTPUT
	
END_VAR
VAR
	format_string				: FB_Formatstring;
	CalDate						: T_MaxString;
	
	// Alarm management 
		bWriteAlarm				: BOOL;				// Writing CSV File failed 
		TON_WritealarmFile		: TON;				// Tempo to detect error in file creation.  
		
		
	// Data processing 
	MesData				: ServerCSV ;			//  Server info
	CalFileName			: STRING;				// Name of csv file 
	
	//Time Values 
	
	//Test existence file 
	FindFile 			: FB_EnumFindFileEntry ;
	FileInfo			: ST_FindFileEntry;
	bFileOK				: BOOL:= TRUE ;

	//Initial File creation 
	GetHostName			: FB_GetHostName;
	WriteFile			: FB_WriteFile;
	bStartWrite			: BOOL;
	bInitWrite			: BOOL;
	
	//Initial File creation 
	InitLine			: T_MaxString;
	LastInitLine		: T_MaxString;
	WelcomeMessage 		: T_MaxString := 'Daily alarms file';
	ForDay				: T_MaxString := 'for day :';
	ForPlant	 		: T_MaxString := 'for plant : ';
	NewLineVar			: T_MaxString := '$L $00';
	TimeStampVar		: T_MaxString := 'TimeStamp;AlarmsID;Description;Activated;Acknowledged;Level;$L$00';
	MessageInitial		: ARRAY[1..10] OF STRING(255);
	MessageInitial_Null	: ARRAY[1..10] OF STRING(255);
	bInitWriting		: BOOL;
	len_to_write		: INT;
	len_to_add			: INT;

	// Write File
	LineToWrite			: STRING(1000);

	// General variables
		bInit 			: BOOL;
		MesTimeStamp 	: STRING(19);				// Timestamp of the alarm
		bOutCompleted 	: RS;						// Writing file is completed
	
	//TABLEAU
		CalTimeStamp: STRING(255);				// Timestamp formatted

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT bInit THEN
	M_Init();
END_IF

M_AlarmManager();

format_string(
	sFormat := 'ALARMS_%0.2d-%0.2d-%0.2d%s', 
	arg1 := F_WORD(in:=CalLocalTimeStruct.wYear),	arg2 := F_WORD(in:=CalLocalTimeStruct.wMonth),	arg3 := F_WORD(in:=CalLocalTimeStruct.wDay),
	arg4 := F_STRING(in:=ParamExtension),
	sOut => CalFileName
);

format_string(
	sFormat := '%0.2d-%0.2d-%0.2d', 
	arg1 := F_WORD(in:=CalLocalTimeStruct.wYear),	arg2 := F_WORD(in:=CalLocalTimeStruct.wMonth),	arg3 := F_WORD(in:=CalLocalTimeStruct.wDay),
	sOut => CalDate
);

InitLine := concat(str1:=WelcomeMessage, STR2:= concat(str1:=
	ParamSeparateur, str2:=concat(STR1:=ForDay, STR2:=concat(str1:= ParamSeparateur, STR2:= concat(str1:= 
	CalDate,str2:=concat(str1:= ParamSeparateur, str2 := CONCAT(str1:=
	ForPlant,str2:=Concat(str1:=ParamSeparateur, str2:= CONCAT(str1:= GetHostName.sHostName, str2:=ParamSeparateur)
))))))));

IF InitLine <> LastInitLine OR InitLine = '' THEN
	LastInitLine := InitLine;
	bInitWriting := TRUE;
END_IF
		
//Test Existence File
IF FUN_CreateDir_CSV.bDirOk THEN
	FindFile
	(
		sNetId := '',
		sPathName := concat(FUN_CreateDir_CSV.AX_DirNames[2],CalFileName),
		eCmd := eEnumCmd_First,
		bExecute := TRUE,
		tTimeout := T#3S,
		stFindFile => FileInfo
	);
	
MesData.TimeCreation 	:= FILETIME_TO_SYSTEMTIME(filetime := FileInfo.creationTime);
MesData.TimeModif	 	:= FILETIME_TO_SYSTEMTIME(filetime := FileInfo.lastWriteTime);
	
MesData.FileSize  		:= ULARGE_TO_ULINT(in := FileInfo.fileSize);
	IF NOT FindFile.bBusy THEN
		FindFile(bExecute := FALSE);
		bFileOK := MesData.FileSize > 0 ; 
	END_IF
	
	
	IF NOT FindFile.bBusy AND NOT bFileOK AND bInitWriting THEN
	// Write File Initial
		bInitWriting := TRUE;
		// je réinitialise les longueurs
		len_to_write := 0;
		MessageInitial := MessageInitial_Null;
		MEMCPY(destAddr := ADR(MessageInitial)+len_to_write, srcAddr := ADR(InitLine), n := len(InitLine));
		len_to_add := len(InitLine);			len_to_write := len_to_write + len_to_add;
		
		MEMCPY(destAddr := ADR(MessageInitial)+len_to_write, srcAddr := ADR(NewLineVar), n := len(NewLineVar));
		len_to_add := len(NewLineVar);			len_to_write := len_to_write + len_to_add;
		
		MEMCPY(destAddr := ADR(MessageInitial)+len_to_write, srcAddr := ADR(TimeStampVar), n := len(TimeStampVar));
		len_to_add := len(TimeStampVar);		len_to_write := len_to_write + len_to_add;
		
		WriteFile
		(
			InStart := TRUE,
			InDirFile := concat(FUN_CreateDir_CSV.AX_DirNames[2], CalFileName),
			InAmsId := '', 
			InPMessage := ADR(MessageInitial),
			InLMessage := len_to_write
		);
		
		IF WriteFile.OutCompleted THEN
			WriteFile(InStart := FALSE);
			bInitWriting := FALSE;
		END_IF
	END_IF
	
	
	IF bFileOK AND MesData.FileSize < 100000000 AND fifo.nCount > 0 AND NOT bInitWriting THEN
		fifo.A_Get();	// Unpile the buffer to get the next alarm to write. 
		
		MesTimeStamp := CONCAT(REPLACE(STR1:= left(str := FIFO.Out.TimeStamp_Act, 19), STR2 := ' ', L := 1, P := 11), ' ') ;	// Get Timestamp of the activation or desactivation of the alarm
		ReplaceAll( In_StringTosearch := MesTimeStamp, In_StringToFind := '/', IN_StringToReplace := '-', OUT_StringToSearch => CalTimeStamp);
		
		// Create line content
		LineToWrite := Concat(CalTimeStamp, ParamSeparateur);
		LineToWrite := concat(LineToWrite, Concat(STR1 := UINT_TO_STRING(FIFO.Out.ID) ,ParamSeparateur));
		LineToWrite := concat(LineToWrite, Concat(STR1 := FIFO.Out.Message ,ParamSeparateur));
		LineToWrite := Concat(STR1 := LineToWrite, STR2 := Concat(STR1 := BOOL_TO_STRING( FIFO.Out.Value), STR2 := ParamSeparateur));
		LineToWrite:= Concat(STR1 := LineToWrite, Concat(STR1 := BOOL_TO_STRING( FIFO.Out.Ack), STR2 := ParamSeparateur)); 
		LineToWrite:= Concat(STR1 := LineToWrite, Concat(STR1 := UINT_TO_STRING( FIFO.Out.Alarms_LVL), STR2 := ParamSeparateur)); 
		LineToWrite := Concat(LineToWrite, '$L$00');
		
		// Write File
		WriteFile
		(
			InStart := TRUE,
			InDirFile := concat(FUN_CreateDir_CSV.AX_DirNames[2], CalFileName),
			InAmsId := '', 
			InPMessage := ADR(LineToWrite),
			InLMessage := LEN(LineToWrite)
		);
		IF NOT WriteFile.OutBusy AND NOT WriteFile.OutError AND WriteFile.OutCompleted THEN
			// File has been writen successfully
			fifo.A_Remove();
			WriteFile(InStart := FALSE);
			bWriteAlarm	:= FALSE ;
		ELSIF WriteFile.OutError THEN 
			// In case of writing error, try again to write the alarm. 
			bWriteAlarm	:= TRUE ;
			WriteFile(InStart := FALSE);
		END_IF
	END_IF
END_IF	


]]></ST>
    </Implementation>
    <Method Name="M_AlarmManager" Id="{450919d0-c7b6-4708-89d6-4128921bef1c}">
      <Declaration><![CDATA[METHOD M_AlarmManager
VAR

	FB_AlarmCodeManager			: FB_AlarmCodeManager ;

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TON_WritealarmFile(IN:= NOT bFileOK  , PT:= T#10S  ) ;


// ALARM CODE //
	FB_AlarmCodeManager(
		bAlarm1			:= bWriteAlarm	  ,				// Write CSV Alarm
		bAlarm2			:= fifo.bOverwrite   ,			// Overflow buffer
		bAlarm3			:= TON_WritealarmFile.Q   ,		// Can not create CSV Alarm file 
		bAlarm4			:= FALSE	 ,					//
		bAlarm5			:= FALSE	,					// 
		bAlarm6			:= FALSE,									//
		bAlarm7			:= FALSE,                                   //
		bAlarm8			:= FALSE,                                   //
		bAlarm9			:= FALSE,                                   //
		bAlarm10		:= FALSE,                                   //
		bAlarm11		:= FALSE,									//
		bAlarm12		:= FALSE,                                   //
		bAlarm13		:= FALSE,                                   //
		bAlarm14		:= FALSE,                                   //
		bAlarm15		:= FALSE,                                   //
		wAlarmCode		=>MesData.MesAlarmCode);]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Init" Id="{f2ad97ed-c71c-4511-8d11-d8a61ade6626}">
      <Declaration><![CDATA[METHOD M_Init

VAR
	LL	: SINT;
	KK 	: SINT;
	InStruct : ST_ValuesAlarms;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Create a first alarm after new code activation or PLC restart
//	FIFO.A_Get();
//	FIFO.A_Remove();
	bInit := TRUE;


	GetHostName(bExecute := FALSE);
	GetHostName(bExecute := TRUE);]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FUN_Alarms_CSV">
      <LineId Id="1279" Count="2" />
      <LineId Id="1597" Count="0" />
      <LineId Id="1596" Count="0" />
      <LineId Id="1524" Count="0" />
      <LineId Id="1775" Count="11" />
      <LineId Id="1811" Count="0" />
      <LineId Id="1937" Count="8" />
      <LineId Id="1810" Count="0" />
      <LineId Id="1292" Count="0" />
      <LineId Id="1295" Count="10" />
      <LineId Id="1522" Count="0" />
      <LineId Id="1306" Count="1" />
      <LineId Id="1521" Count="0" />
      <LineId Id="1308" Count="4" />
      <LineId Id="1863" Count="1" />
      <LineId Id="1819" Count="13" />
      <LineId Id="1847" Count="11" />
      <LineId Id="1860" Count="1" />
      <LineId Id="1313" Count="0" />
      <LineId Id="1339" Count="0" />
      <LineId Id="1341" Count="1" />
      <LineId Id="1464" Count="0" />
      <LineId Id="1526" Count="0" />
      <LineId Id="1465" Count="0" />
      <LineId Id="1343" Count="0" />
      <LineId Id="1529" Count="1" />
      <LineId Id="1344" Count="4" />
      <LineId Id="1654" Count="0" />
      <LineId Id="1349" Count="0" />
      <LineId Id="1531" Count="1" />
      <LineId Id="1351" Count="5" />
      <LineId Id="1711" Count="0" />
      <LineId Id="1357" Count="0" />
      <LineId Id="1360" Count="0" />
      <LineId Id="1533" Count="0" />
      <LineId Id="1466" Count="0" />
      <LineId Id="1364" Count="0" />
      <LineId Id="1541" Count="0" />
      <LineId Id="1534" Count="0" />
      <LineId Id="1536" Count="0" />
      <LineId Id="1542" Count="0" />
      <LineId Id="1871" Count="0" />
      <LineId Id="1366" Count="1" />
      <LineId Id="1809" Count="0" />
      <LineId Id="1368" Count="1" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FUN_Alarms_CSV.M_AlarmManager">
      <LineId Id="420" Count="3" />
      <LineId Id="395" Count="16" />
      <LineId Id="29" Count="0" />
    </LineIds>
    <LineIds Name="FUN_Alarms_CSV.M_Init">
      <LineId Id="3441" Count="0" />
      <LineId Id="3471" Count="0" />
      <LineId Id="3444" Count="3" />
      <LineId Id="3464" Count="0" />
      <LineId Id="49" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>